/**
 * Centralized TypeScript Types Generated from Zod Schemas
 *
 * Auto-generated on 2025-09-25T22:47:11.973Z
 *
 * This file provides a centralized registry of all types generated from Zod schemas
 * across the application. It ensures type safety and consistency by providing a
 * single source of truth for all validated data structures.
 *
 * üîÑ This file is automatically generated. Do not edit manually.
 * üìù To regenerate, run: npm run generate:types
 *
 * Schema files processed: 19
 * Total types generated: 217
 */

// Analytics Types
export type {
  AnalyticsResponse,
  ContentSlug,
  CustomEvent,
  ErrorTracking,
  InteractionEvent,
  NavigationEvent,
  PageView,
  PageViewEvent,
  PerformanceMetric,
  TrackClick,
  TrackClickEvent,
  TrackCopy,
  TrackCopyEvent,
  TrackError,
  TrackErrorEvent,
  TrackingEvent,
  TrackSearch,
  TrackSearchEvent,
  TrackView,
  TrackViewEvent,
  UserIdentification,
  WebVitalsMetrics,
} from '@/lib/schemas/analytics.schema';
// Re-export all types from individual schema files
export * from '@/lib/schemas/analytics.schema';
// Api Types
export type {
  ApiErrorResponse,
  ApiPagination,
  ApiPaginationParams,
  ApiRateLimitConfig,
  CacheWarmApi,
  CacheWarmResponse,
  ContentApiResponse,
  ContentTypeParam,
  GithubApiResponse,
  HttpHeaders,
  NpmApiResponse,
  SearchApiParams,
  SubmitConfigBody,
  WebhookPayload,
} from '@/lib/schemas/api.schema';
export * from '@/lib/schemas/api.schema';
// Cache Types
export type {
  APIResponseCache,
  ApiResponseCache,
  BatchIncrementOperation,
  BatchOperation,
  CacheCategory,
  CacheContentMetadata,
  CachedApiResponse,
  CachedString,
  CacheKeyParams,
  CacheStats,
  CacheTrendingItem,
  CleanupParams,
  MDXCache,
  MdxCache,
  PopularItemsQuery,
  PopularItemWithScore,
  RedisZRangeResponse,
  RelatedItemsCache,
  SearchResultsCache,
  ViewCountResponse,
  ViewTracking,
} from '@/lib/schemas/cache.schema';
export * from '@/lib/schemas/cache.schema';
// Cache-warmer Types
export type {
  BatchWarmingRequest,
  CachedContent,
  CacheWarmerPopularItem,
  CacheWarmingConfig,
  CacheWarmingItem,
  CacheWarmingResult,
  CacheWarmingStatus,
  CategoryMetadata,
  RelatedContentWarming,
  WarmableCategory,
} from '@/lib/schemas/cache-warmer.schema';
export * from '@/lib/schemas/cache-warmer.schema';
// Content Types
export type {
  AgentContent,
  CommandContent,
  ContentConfiguration,
  ContentMetadata,
  HookContent,
  JobContent,
  MCPServerContent,
  RuleContent,
} from '@/lib/schemas/content.schema';
export * from '@/lib/schemas/content.schema';
// Content-filter Types
export type { ContentFilterOptions } from '@/lib/schemas/content-filter.schema';
export * from '@/lib/schemas/content-filter.schema';
// Content-generation Types
export type {
  BaseContent,
  BuildConfig,
  BuildResult,
  ContentCollection,
  FileLoadResult,
  GeneratedContentMetadata,
  GeneratedFile,
  JsonFileValidation,
} from '@/lib/schemas/content-generation.schema';
export * from '@/lib/schemas/content-generation.schema';
// Env Types
export type {
  BuildEnv,
  ClientEnv,
  Env,
  ServerEnv,
} from '@/lib/schemas/env.schema';
export * from '@/lib/schemas/env.schema';
// Error Types
export type {
  BasicError,
  ErrorContext,
  ErrorInput,
  ErrorSanitizationResult,
  ErrorSeverity,
  ErrorType,
  SanitizedError,
  StackTraceSanitization,
} from '@/lib/schemas/error.schema';
export * from '@/lib/schemas/error.schema';
// Form Types
export type {
  ConfigSubmission,
  ConfigSubmissionData,
  ConfigSubmissionInput,
  ContactForm,
  ContactFormData,
  FeedbackForm,
  FeedbackFormData,
  Newsletter,
  NewsletterData,
  SearchForm,
  SearchFormData,
} from '@/lib/schemas/form.schema';
export * from '@/lib/schemas/form.schema';
// Logger Types
export type {
  DevelopmentLogComponents,
  LogContext,
  LogError,
  LogLevel,
  LogObject,
  PerformanceMetadata,
  RequestContext,
} from '@/lib/schemas/logger.schema';
export * from '@/lib/schemas/logger.schema';
// Markdown Types
export type {
  MarkdownContent,
  MarkdownParseOptions,
  MarkdownToHtmlRequest,
  MarkdownToHtmlResponse,
  SanitizationOptions,
  SanitizedHtml,
} from '@/lib/schemas/markdown.schema';
export * from '@/lib/schemas/markdown.schema';
// Middleware Types
export type {
  ApiEndpointType,
  ArcjetDecision,
  HttpMethod,
  IpAddress,
  MiddlewareContentType,
  MiddlewareRateLimitConfig,
  MiddlewareResponse,
  RequestPath,
  RequestValidation,
  SearchQueryValidation,
  SecurityHeaders,
  UserAgent,
} from '@/lib/schemas/middleware.schema';
export * from '@/lib/schemas/middleware.schema';
// Related-content Types
export type {
  AlgorithmBoosts,
  AlgorithmConfig,
  AlgorithmLimits,
  AlgorithmWeights,
  ContentCategory,
  ContentIndex,
  ContentItem,
  DebugInfo,
  MatchType,
  RelatedContentConfig,
  RelatedContentItem,
  RelatedContentPerformanceMetrics,
  RelatedContentResponse,
  RelatedPopularItem,
  RelatedTrendingItem,
  ScoreComponents,
  ScoringResult,
} from '@/lib/schemas/related-content.schema';
// Re-export specific items from related-content.schema to avoid conflicts
export {
  algorithmBoostsSchema,
  algorithmConfigSchema,
  algorithmLimitsSchema,
  algorithmWeightsSchema,
  cacheKeySchema,
  contentCategorySchema as relatedContentCategorySchema,
  contentIndexSchema,
  contentItemSchema,
  debugInfoSchema,
  matchTypeSchema,
  relatedContentConfigSchema,
  relatedContentItemSchema,
  relatedContentPerformanceMetricsSchema,
  relatedContentResponseSchema,
  relatedPopularItemSchema,
  relatedTrendingItemSchema,
  scoreComponentsSchema,
  scoringResultSchema,
  validateContentItem as validateRelatedContentItem,
  validateRelatedContentConfig,
  validateScoringResult,
} from '@/lib/schemas/related-content.schema';
// Search Types
export type {
  Filter,
  FilterParams,
  JobsSearchParams,
  SearchPagination,
  SearchPaginationParams,
  SearchParams,
  SearchQuery,
  SlugParam,
  Sort,
  SortParams,
  TrendingParams,
} from '@/lib/schemas/search.schema';
export * from '@/lib/schemas/search.schema';
// Seo Types
export type {
  AgentSEOMetadata,
  Alternates,
  AlternatesMetadata,
  CanonicalMetadata,
  HomepageSEOMetadata,
  JobSEOMetadata,
  MCPServerSEOMetadata,
  OpenGraph,
  OpenGraphImage,
  OpenGraphMetadata,
  OpenGraphType,
  Robots,
  RobotsMetadata,
  SEODescription,
  SEOKeywords,
  SEOKeywordsArray,
  SEOMetadata,
  SEOText,
  SEOTitle,
  SEOUrl,
  TwitterCard,
  TwitterCardMetadata,
} from '@/lib/schemas/seo.schema';
export * from '@/lib/schemas/seo.schema';
// Shared Types
export type {
  BaseContentMetadata,
  ContentType,
  PaginationParams,
  PerformanceMetrics,
  PopularItem,
  RateLimitConfig,
  TrendingItem,
} from '@/lib/schemas/shared.schema';
// Re-export specific items from shared.schema to avoid conflicts
export {
  baseContentMetadataSchema,
  contentTypeSchema as sharedContentTypeSchema,
  paginationParamsSchema,
  performanceMetricsSchema,
  popularItemSchema,
  rateLimitConfigSchema,
  trendingItemSchema,
} from '@/lib/schemas/shared.schema';
// Static-api Types
export type {
  AllConfigurationsResponse,
  BaseContentItem,
  CategoryCount,
  CategorySearchIndex,
  CombinedSearchIndex,
  ContentTypeApiResponse,
  Endpoints,
  GenerationResult,
  HealthCheckResponse,
  PopularTag,
  SearchableItem,
  Statistics,
  TransformedContentItem,
} from '@/lib/schemas/static-api.schema';
export * from '@/lib/schemas/static-api.schema';
// Webhook Types
export type {
  AnalyticsEventData,
  BaseWebhookPayload,
  CacheEventData,
  ContentEventData,
  CustomEventData,
  SubmissionEventData,
  SystemEventData,
  UserEventData,
  WebhookConfig,
  WebhookDeliveryAttempt,
  WebhookEventType,
  WebhookRegistration,
  WebhookResponse,
  WebhookSignatureHeader,
} from '@/lib/schemas/webhook.schema';
export * from '@/lib/schemas/webhook.schema';

/**
 * Utility Types
 *
 * Commonly used utility types that combine or extend base types
 * for specific use cases across the application.
 */

// API response wrapper types
export type ApiSuccessResponse<T = unknown> = {
  success: true;
  data: T;
  timestamp: string;
  requestId?: string;
};

export type ApiErrorResponseType = {
  success: false;
  error: string;
  message: string;
  code: string;
  timestamp: string;
  requestId?: string;
};

export type ApiResponse<T = unknown> = ApiSuccessResponse<T> | ApiErrorResponseType;

// Type guards
export const isApiSuccessResponse = <T>(
  response: ApiResponse<T>
): response is ApiSuccessResponse<T> => response.success === true;

export const isApiErrorResponse = (response: ApiResponse): response is ApiErrorResponseType =>
  response.success === false;

/**
 * Type Registry
 *
 * Metadata about the types for documentation and tooling purposes.
 */
export const TYPE_REGISTRY = {
  schemas: {
    analytics: 22,
    api: 14,
    'cache-warmer': 10,
    cache: 21,
    'content-filter': 1,
    'content-generation': 8,
    content: 8,
    env: 4,
    error: 8,
    form: 11,
    logger: 7,
    markdown: 6,
    middleware: 12,
    'related-content': 17,
    search: 11,
    seo: 22,
    shared: 8,
    'static-api': 13,
    webhook: 14,
  },
  totalTypes: 217,
  totalSchemas: 19,
  lastGenerated: '2025-09-25T22:47:11.973Z',
  version: '1.0.0',
  files: [
    'lib/schemas/analytics.schema.ts',
    'lib/schemas/api.schema.ts',
    'lib/schemas/cache-warmer.schema.ts',
    'lib/schemas/cache.schema.ts',
    'lib/schemas/content-filter.schema.ts',
    'lib/schemas/content-generation.schema.ts',
    'lib/schemas/content.schema.ts',
    'lib/schemas/env.schema.ts',
    'lib/schemas/error.schema.ts',
    'lib/schemas/form.schema.ts',
    'lib/schemas/logger.schema.ts',
    'lib/schemas/markdown.schema.ts',
    'lib/schemas/middleware.schema.ts',
    'lib/schemas/related-content.schema.ts',
    'lib/schemas/search.schema.ts',
    'lib/schemas/seo.schema.ts',
    'lib/schemas/shared.schema.ts',
    'lib/schemas/static-api.schema.ts',
    'lib/schemas/webhook.schema.ts',
  ],
} as const;

export default TYPE_REGISTRY;
