{
  "slug": "your-command-name",
  "description": "Brief description of what this command does and its primary purpose",
  "category": "commands",
  "author": "Your Name or GitHub Username",
  "dateAdded": "YYYY-MM-DD",
  "tags": ["primary-function", "secondary-feature", "technology-stack", "use-case"],
  "content": "---\nallowed-tools: Bash(git add:*), Bash(git status:*), Read, Write, Edit\nargument-hint: [required-arg] [optional-arg]\ndescription: Brief command description for help text\nmodel: claude-3-5-sonnet-20241022\n---\n\n## Context\n\n- Current project status: !`pwd && ls -la`\n- Git status: !`git status --short`\n- Recent activity: !`git log --oneline -3`\n\n## Your Task\n\nDescribe what this command should accomplish when executed.\n\n### Command Behavior\n1. Step 1: What the command does first\n2. Step 2: How it processes arguments\n3. Step 3: What output it generates\n\n### Arguments\n- `$1` - First argument description\n- `$2` - Second argument description  \n- `$ARGUMENTS` - All arguments as single string\n\n### Examples\n```bash\n# Basic usage\n/your-command\n\n# With arguments\n/your-command arg1 arg2\n\n# Advanced usage\n/your-command --option value\n```\n\n## Implementation\n\nProvide specific instructions for what Claude should do when this command is executed.",
  "source": "community",
  "features": [
    "Key capability or function 1",
    "Key capability or function 2",
    "Key capability or function 3"
  ],
  "useCases": [
    "Common scenario where this command excels 1",
    "Common scenario where this command excels 2",
    "Common scenario where this command excels 3"
  ],
  "configuration": {
    "temperature": 0.3,
    "maxTokens": 4000,
    "systemPrompt": "Optional custom system prompt override"
  },
  "installation": {
    "claudeCode": {
      "steps": [
        "Create command directory: mkdir -p .claude/commands (project-level) or ~/.claude/commands (user-level)",
        "Create command file: your-command-name.md in the commands directory",
        "Use YAML frontmatter format with allowed-tools, argument-hint, description, and model",
        "Add your command's prompt template as markdown content below the frontmatter",
        "Use /your-command-name to execute the command in Claude Code"
      ],
      "configFormat": "Markdown file with YAML frontmatter",
      "configPath": {
        "project": ".claude/commands/your-command-name.md",
        "user": "~/.claude/commands/your-command-name.md"
      }
    },
    "claudeDesktop": {
      "steps": [
        "Claude Desktop does not have direct slash command support",
        "To use Claude Code commands with Claude Desktop, configure Claude Code as an MCP server",
        "Add this to your claude_desktop_config.json file:",
        "{\"mcpServers\": {\"claude-code\": {\"command\": \"claude\", \"args\": [\"mcp\", \"serve\"], \"env\": {}}}}",
        "This allows Claude Desktop to access Claude Code's command capabilities via MCP"
      ],
      "configPath": {
        "macOS": "~/Library/Application Support/Claude/claude_desktop_config.json",
        "windows": "%APPDATA%\\Claude\\claude_desktop_config.json",
        "linux": "~/.config/claude/claude_desktop_config.json"
      },
      "note": "Primary command functionality is in Claude Code. Claude Desktop can only access commands indirectly via MCP."
    },
    "requirements": [
      "Claude Code CLI installed",
      "Basic understanding of YAML frontmatter and Markdown",
      "Familiarity with bash commands if using !`command` syntax"
    ]
  },
  "documentationUrl": "https://link-to-relevant-external-documentation.com",
  "githubUrl": "https://github.com/relevant-project/repository"
}
