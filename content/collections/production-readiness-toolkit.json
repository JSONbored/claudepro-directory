{
  "slug": "production-readiness-toolkit",
  "title": "Production Readiness Toolkit",
  "seoTitle": "Production Toolkit",
  "description": "Comprehensive system for ensuring code quality, security, and compliance before production deployment. Includes automated code reviews, complexity monitoring, backup strategies, and production-grade rules for professional development teams.",
  "author": "JSONbored",
  "dateAdded": "2025-10-02",
  "tags": ["production", "code-quality", "security", "compliance", "deployment", "best-practices"],
  "source": "community",
  "category": "collections",
  "collectionType": "advanced-system",
  "difficulty": "advanced",
  "estimatedSetupTime": "45 minutes",
  "features": [
    "Automated code review and complexity monitoring",
    "Production-grade codebase auditing",
    "Automatic backup and safety hooks",
    "Security and compliance checking"
  ],
  "useCases": [
    "Preparing code for production deployment",
    "Implementing team code quality standards",
    "Preventing production bugs and security issues",
    "Enterprise-grade development workflows"
  ],
  "items": [
    {
      "category": "rules",
      "slug": "production-codebase-auditor",
      "reason": "Enforces production-grade code standards and best practices"
    },
    {
      "category": "rules",
      "slug": "code-review-expert",
      "reason": "Provides expert-level code review guidance"
    },
    {
      "category": "hooks",
      "slug": "code-complexity-alert-monitor",
      "reason": "Monitors and alerts on code complexity metrics"
    },
    {
      "category": "hooks",
      "slug": "auto-save-backup",
      "reason": "Automatically backs up work to prevent data loss"
    },
    {
      "category": "agents",
      "slug": "code-reviewer-agent",
      "reason": "AI-powered comprehensive code review"
    },
    {
      "category": "commands",
      "slug": "generate-tests",
      "reason": "Ensures adequate test coverage before deployment"
    }
  ],
  "installationOrder": [
    "production-codebase-auditor",
    "code-review-expert",
    "code-complexity-alert-monitor",
    "auto-save-backup",
    "code-reviewer-agent",
    "generate-tests"
  ],
  "prerequisites": [
    "Existing codebase with CI/CD pipeline",
    "Understanding of production deployment processes",
    "Team buy-in for code quality standards",
    "Access to version control system"
  ],
  "compatibility": {
    "claudeDesktop": true,
    "claudeCode": true
  },
  "troubleshooting": [
    {
      "issue": "Code complexity monitor triggers false alerts constantly",
      "solution": "Configure thresholds in hook settings: cyclomatic_complexity: 15, cognitive_complexity: 20. Add exceptions for generated code in .complexityignore file.",
      "category": "installation_setup"
    },
    {
      "issue": "Auto-save backup conflicts with Git version control system",
      "solution": "Set backup directory outside Git repo in hook config: backup_path: '../backups'. Add backup_path to .gitignore. Schedule cleanup for backups older than 7 days.",
      "category": "compatibility"
    },
    {
      "issue": "Code reviewer agent and production auditor rules disagree",
      "solution": "Production auditor takes precedence for deployment decisions. Use reviewer agent for development phase. Configure agent to defer to auditor rules.",
      "category": "common_errors"
    },
    {
      "issue": "Generate-tests command fails: missing test framework setup",
      "solution": "Install test dependencies: npm install -D jest @types/jest ts-jest. Initialize config: npx jest --init. Ensure package.json has test script defined.",
      "category": "prerequisites"
    },
    {
      "issue": "Collection slows down Claude responses significantly",
      "solution": "Disable hooks during development: set enabled: false for complexity monitor and backup. Re-enable before commits. Use agent/rules only for reviews.",
      "category": "common_errors"
    }
  ]
}
