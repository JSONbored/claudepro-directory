{
  "slug": "cursor-windsurf-ai-ide-setup",
  "title": "Cursor/Windsurf AI IDE Setup & Optimization",
  "seoTitle": "Cursor Windsurf AI Code Editor Configuration Skill",
  "description": "Configure and optimize Cursor and Windsurf AI code editors for maximum productivity. Agent mode, composer features, keybindings, and AI-powered refactoring workflows.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-23",
  "tags": ["cursor", "windsurf", "ide", "ai-coding", "editor"],
  "discoveryMetadata": {
    "researchDate": "2025-10-23",
    "trendingSources": [
      {
        "source": "hackernews_october_2025",
        "evidence": "HackerNews discussion: 'Cursor, Windsurf, Claude Code dominate the conversation' - AI IDE tools most discussed topic in October 2025",
        "url": "https://news.ycombinator.com/item?id=44635075",
        "relevanceScore": "high"
      },
      {
        "source": "ai_coding_trends_oct_2025",
        "evidence": "Cursor/Windsurf are 'no longer optional, becoming default dev stack' - AI mentioned in 20% of October HN hiring posts, historic high",
        "url": "https://www.shakudo.io/blog/best-ai-coding-assistants",
        "relevanceScore": "high"
      }
    ],
    "keywordResearch": {
      "primaryKeywords": ["cursor ide", "windsurf editor", "ai code editor", "cursor setup"],
      "searchVolume": "high",
      "competitionLevel": "medium"
    },
    "gapAnalysis": {
      "existingContent": ["windsurf-collaborative-development", "github-actions-ai-cicd"],
      "identifiedGap": "Existing Windsurf skill focuses on collaborative development workflows, NOT IDE setup/configuration/optimization. Zero Cursor content despite being equally dominant. These are THE two AI IDEs dominating October 2025 discussions with AI mentions at historic 20% of HN hiring posts. No setup, keybinding, agent mode, or IDE optimization guidance exists.",
      "priority": "high"
    },
    "approvalRationale": "Cursor and Windsurf explicitly called out as dominating AI IDE conversation in HackerNews October 2025 discussions. AI coding tools mentioned in 20% of HN hiring posts - historic high. Existing Windsurf skill is workflow-focused, not setup-focused. Cursor has zero coverage. These tools are 'no longer optional, becoming default dev stack' per industry analysis. User approved October 23, 2025."
  },
  "content": "# Cursor/Windsurf AI IDE Setup & Optimization Skill\n\n## What This Skill Enables\n\nClaude can help you configure and optimize Cursor or Windsurf AI code editors for maximum productivity. Both editors provide AI-powered code completion, multi-file editing, and intelligent refactoring. Cursor excels with its Agent mode and Composer features, while Windsurf emphasizes collaborative flows and Cascade AI. From initial setup to advanced workflows, Claude handles IDE configuration and optimization.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription or Claude Code CLI\n- macOS, Windows, or Linux\n- Cursor or Windsurf IDE installed\n- OpenAI API key or Anthropic API key\n- Basic code editor knowledge\n\n**What Claude handles automatically:**\n- Configuring API keys and model selection\n- Setting up keybindings for AI features\n- Optimizing editor settings for performance\n- Creating custom rules and context files\n- Configuring agent mode behaviors\n- Setting up workspace-specific settings\n- Implementing best practices for prompting\n- Optimizing token usage and costs\n\n## How to Use This Skill\n\n### Initial Setup & Configuration\n\n**Prompt:** \"Help me set up Cursor with Claude Sonnet model. Configure keybindings for: inline completion (Tab), chat (Cmd+K), composer (Cmd+I), and agent mode. Optimize for React/TypeScript projects.\"\n\nClaude will:\n1. Guide API key configuration\n2. Set model to Claude Sonnet\n3. Configure keyboard shortcuts\n4. Add .cursorrules for React/TS\n5. Set up workspace settings\n6. Configure auto-complete behavior\n7. Add project context files\n\n### Optimizing Agent Mode\n\n**Prompt:** \"Configure Cursor Agent mode for: automatic file edits, test generation, refactoring tasks, and documentation. Set guardrails to prevent breaking changes.\"\n\nClaude will:\n1. Enable agent mode settings\n2. Configure file permissions\n3. Set up test generation rules\n4. Add refactoring guidelines\n5. Create .cursorrules for safety\n6. Configure approval workflows\n7. Set token limits\n\n### Custom Rules & Context\n\n**Prompt:** \"Create .cursorrules file for Next.js 15 project with: TypeScript strict mode, shadcn/ui components, Tailwind CSS, server actions, and Zod validation. Include coding standards.\"\n\nClaude will:\n1. Create .cursorrules file\n2. Specify tech stack versions\n3. Add coding conventions\n4. Include common patterns\n5. Set error handling rules\n6. Add performance guidelines\n7. Document API usage\n\n### Multi-File Refactoring\n\n**Prompt:** \"Set up Windsurf Cascade for: renaming components across files, updating import paths, refactoring prop types, and running type checks. Configure to preview changes before applying.\"\n\nClaude will:\n1. Configure Cascade settings\n2. Enable preview mode\n3. Set up diff viewing\n4. Add rollback capability\n5. Configure type checking\n6. Set up batch operations\n7. Add safety confirmations\n\n## Tips for Best Results\n\n1. **Use .cursorrules**: Create project-specific rules file with tech stack, conventions, and patterns. AI reads this for context.\n\n2. **Composer for Large Changes**: Use Cmd+I (Cursor) or Cascade (Windsurf) for multi-file edits. More powerful than inline chat.\n\n3. **@ Mentions for Context**: Use @filename, @folder, @docs to give AI specific context. Reduces hallucinations.\n\n4. **Agent Mode Guardrails**: Set file permissions and review changes. Don't let agent edit critical files unsupervised.\n\n5. **Model Selection**: Claude Sonnet for code quality, GPT-4 for speed. Switch based on task complexity.\n\n6. **Token Optimization**: Use codebase indexing wisely. Exclude node_modules, dist, .next from context.\n\n## Common Workflows\n\n### React Component Refactoring\n```\n\"Configure Cursor for React refactoring workflow:\n1. Set up .cursorrules with React 19 patterns\n2. Enable TypeScript strict mode validation\n3. Configure agent mode for component splits\n4. Add rules for shadcn/ui usage\n5. Set up automatic prop-types to TS conversion\n6. Configure test generation with Vitest\n7. Enable preview for all agent changes\n8. Add rollback shortcuts\"\n```\n\n### API Route Generation\n```\n\"Set up Windsurf for API development:\n1. Create .cursorrules for FastAPI/Next.js API routes\n2. Configure agent to generate OpenAPI docs\n3. Set up automatic validation with Zod\n4. Add error handling templates\n5. Configure test generation\n6. Set up database query optimization\n7. Enable security scanning\n8. Add rate limiting patterns\"\n```\n\n### Legacy Code Migration\n```\n\"Configure Cursor for migrating JS to TS:\n1. Set up .cursorrules for TypeScript migration\n2. Configure agent for file-by-file conversion\n3. Add type inference rules\n4. Set up any type replacement\n5. Configure import path updates\n6. Enable type checking after each file\n7. Add rollback on type errors\n8. Generate migration report\"\n```\n\n### Test Coverage Improvement\n```\n\"Set up Windsurf for test generation:\n1. Configure agent for unit test creation\n2. Add .cursorrules for testing patterns\n3. Set up coverage threshold checks\n4. Configure mock generation\n5. Add integration test templates\n6. Set up snapshot testing rules\n7. Enable test runner integration\n8. Generate coverage reports\"\n```\n\n## Troubleshooting\n\n**Issue:** \"AI suggestions are slow or timing out\"\n**Solution:** Reduce context size by excluding large folders in settings. Use @filename for specific context instead of full codebase. Check API rate limits. Switch to faster model (GPT-3.5) for simple edits. Clear index and rebuild.\n\n**Issue:** \"Agent mode making unwanted changes\"\n**Solution:** Add .cursorrules with explicit guidelines. Set file permissions to read-only for critical files. Enable preview mode to review all changes. Use 'explain' prompts before 'do' prompts. Add 'do not modify' comments in code.\n\n**Issue:** \"API costs higher than expected\"\n**Solution:** Exclude unnecessary folders from indexing. Use caching (Cursor's @codebase). Switch to smaller models for simple tasks. Disable auto-complete for comments. Review token usage in settings. Use local models for basic completion.\n\n**Issue:** \"Keybindings conflicting with other extensions\"\n**Solution:** Check keybindings.json for conflicts. Reassign Cursor/Windsurf shortcuts. Disable conflicting extensions. Use Cmd+K+S (Cursor) to view all shortcuts. Export keybindings and version control them.\n\n**Issue:** \"AI not using project context correctly\"\n**Solution:** Create detailed .cursorrules file. Use @docs to reference documentation. Add README with architecture overview. Use @folder for package-specific context. Verify codebase indexing is complete. Rebuild index if stale.\n\n## Learn More\n\n- [Cursor Documentation](https://cursor.sh/docs)\n- [Windsurf by Codeium](https://codeium.com/windsurf)\n- [Cursor Forum](https://forum.cursor.sh/)\n- [AI Coding Best Practices](https://cursor.sh/blog/agent-mode)\n- [Windsurf Cascade Guide](https://codeium.com/blog/windsurf-editor)\n",
  "features": [
    "AI-powered multi-file editing with agent modes",
    "Inline code completion with context awareness",
    "Chat interface for code explanations and refactoring",
    "Composer/Cascade for large-scale code changes"
  ],
  "useCases": [
    "Configuring AI IDE for specific tech stacks",
    "Setting up multi-file refactoring workflows",
    "Optimizing token usage and API costs"
  ],
  "requirements": [
    "Cursor IDE or Windsurf IDE",
    "OpenAI API key or Anthropic API key",
    "macOS/Windows/Linux"
  ],
  "examples": [
    {
      "title": "Sample .cursorrules File",
      "language": "markdown",
      "code": "# Project: Next.js 15 SaaS Application\n\n## Tech Stack\n- Next.js 15.0+ (App Router, Server Actions)\n- React 19.0+\n- TypeScript 5.5+ (strict mode)\n- Tailwind CSS 4.0+\n- shadcn/ui components\n- Zod for validation\n- Prisma with PostgreSQL\n\n## Coding Conventions\n- Use named exports (no default exports except pages)\n- Prefix server actions with 'action'\n- All async functions must have error handling\n- Use Zod schemas for all form inputs\n- Components in PascalCase, files in kebab-case\n- Max function length: 50 lines\n- All props must have TypeScript interfaces\n\n## Patterns to Follow\n- Server Actions for mutations (no API routes)\n- React Server Components by default\n- Client components only when needed ('use client')\n- Parallel data fetching with Promise.all\n- Error boundaries for all async components\n- Loading states with Suspense\n- Form validation with Zod + React Hook Form\n\n## Patterns to Avoid\n- Don't use 'any' type (use 'unknown' if needed)\n- Don't fetch in client components (use server)\n- Don't bypass TypeScript with @ts-ignore\n- Don't create custom hooks without jsdoc\n- Don't use inline styles (use Tailwind)\n\n## Testing\n- Unit tests with Vitest\n- E2E tests with Playwright\n- Minimum 80% coverage\n- Test file naming: *.test.ts\n\n## Performance\n- Dynamic imports for heavy components\n- Image optimization with next/image\n- Font optimization with next/font\n- Metadata API for SEO"
    },
    {
      "title": "Cursor Settings (settings.json)",
      "language": "json",
      "code": "{\n  \"cursor.general.enableShadowWorkspace\": true,\n  \"cursor.chat.model\": \"claude-sonnet-4-5\",\n  \"cursor.cpp.disabledLanguages\": [\"plaintext\", \"markdown\"],\n  \"cursor.cmdk.useThemedDiffBackground\": true,\n  \"cursor.general.gitignoreFolders\": [\n    \"node_modules\",\n    \".next\",\n    \"dist\",\n    \"build\",\n    \".vercel\",\n    \"coverage\"\n  ],\n  \"cursor.general.maxNumberOfLines\": 1000,\n  \"cursor.composer.defaultModel\": \"claude-sonnet-4-5\",\n  \"cursor.agentMode.enabled\": true,\n  \"cursor.agentMode.requireApproval\": true,\n  \"cursor.agentMode.maxIterations\": 5\n}"
    },
    {
      "title": "Keybindings (keybindings.json)",
      "language": "json",
      "code": "[\n  {\n    \"key\": \"cmd+k\",\n    \"command\": \"aichat.newchataction\",\n    \"when\": \"editorTextFocus\"\n  },\n  {\n    \"key\": \"cmd+i\",\n    \"command\": \"composer.startComposerPrompt\",\n    \"when\": \"editorTextFocus\"\n  },\n  {\n    \"key\": \"cmd+shift+l\",\n    \"command\": \"cursor.composer.selectCodeBlocks\"\n  },\n  {\n    \"key\": \"cmd+shift+k\",\n    \"command\": \"editor.action.inlineSuggest.trigger\"\n  },\n  {\n    \"key\": \"tab\",\n    \"command\": \"editor.action.inlineSuggest.commit\",\n    \"when\": \"inlineSuggestionVisible\"\n  }\n]"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Download Cursor from cursor.sh or Windsurf from codeium.com",
        "Add API key in Settings > Features > AI",
        "Ask Claude: 'Help me set up .cursorrules for [your project]'",
        "Configure keybindings and workspace settings"
      ]
    },
    "claudeCode": {
      "steps": [
        "Install Cursor or Windsurf for your OS",
        "Set up API keys (OpenAI/Anthropic)",
        "Create .cursorrules in project root",
        "Configure settings.json and keybindings.json"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "AI suggestions slow or timing out",
      "solution": "Reduce context by excluding large folders. Use @filename for specific context. Check API rate limits. Switch to faster model. Clear and rebuild index."
    },
    {
      "issue": "Agent mode making unwanted changes",
      "solution": "Add explicit .cursorrules guidelines. Set read-only permissions for critical files. Enable preview mode. Use 'explain' before 'do' prompts. Add 'do not modify' comments."
    },
    {
      "issue": "High API costs",
      "solution": "Exclude unnecessary folders from indexing. Enable caching (@codebase). Use smaller models for simple tasks. Disable auto-complete for comments. Review token usage in settings."
    }
  ],
  "documentationUrl": "https://cursor.sh/docs",
  "source": "community"
}
