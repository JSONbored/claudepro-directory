{
  "slug": "csv-excel-data-wrangler",
  "title": "CSV & Excel Data Wrangler",
  "seoTitle": "CSV/Excel Data Wrangler Skill",
  "description": "Clean, filter, join, pivot, and export CSV/XLSX data reliably with reproducible steps.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-15",
  "tags": ["csv", "xlsx", "data-cleaning", "pandas", "python"],
  "content": "# CSV & Excel Data Wrangler Skill\n\n## What This Skill Enables\n\nClaude can clean, transform, analyze, and merge CSV and Excel files with pandas. Upload messy spreadsheets and get production-ready data pipelines, statistical summaries, and formatted exports.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription\n- Code Interpreter feature enabled\n- CSV or Excel file uploaded to conversation\n\n**What Claude handles:**\n- Installing pandas, openpyxl, and data processing libraries\n- Detecting file encodings and formats\n- Type inference and conversion\n- Memory-efficient processing of large files\n\n## How to Use This Skill\n\n### Quick Data Cleaning\n\n**Prompt:** \"Clean this CSV file: remove duplicates, fix missing values, standardize column names, and export as clean.csv\"\n\nClaude will:\n1. Load and analyze the file structure\n2. Identify data quality issues\n3. Apply cleaning transformations\n4. Export cleaned version\n\n### Data Merging & Joining\n\n**Prompt:** \"Merge customers.csv and orders.csv on customer_id. Show me the combined data and export as customer_orders.xlsx\"\n\nClaude will:\n1. Load both files\n2. Detect join keys\n3. Perform the merge (inner/left/right/outer)\n4. Validate results\n5. Export formatted Excel file\n\n### Data Analysis & Summaries\n\n**Prompt:** \"Analyze this sales data: show me summary statistics, identify top products, calculate monthly trends, and create a pivot table by region.\"\n\nClaude will:\n1. Generate descriptive statistics\n2. Perform aggregations\n3. Create pivot tables\n4. Calculate trends\n5. Present insights\n\n### Format Conversion\n\n**Prompt:** \"Convert this Excel workbook to CSV files, one per sheet, with UTF-8 encoding.\"\n\nClaude will:\n1. Read all Excel sheets\n2. Export each as separate CSV\n3. Handle encoding properly\n4. Preserve data types where possible\n\n## Common Workflows\n\n### CRM Data Cleanup\n```\n\"Clean this customer export:\n1. Remove duplicate emails (keep most recent)\n2. Standardize phone numbers to (XXX) XXX-XXXX format\n3. Fill missing company names with 'Unknown'\n4. Split full_name into first_name and last_name\n5. Export as customers_clean.xlsx\"\n```\n\n### Sales Report Generation\n```\n\"Analyze this sales data:\n1. Calculate total revenue by product category\n2. Identify top 10 customers by revenue\n3. Show month-over-month growth\n4. Create a pivot table: rows=salesperson, columns=month, values=revenue\n5. Export summary as sales_report.xlsx with formatted numbers\"\n```\n\n### Data Validation\n```\n\"Validate this CSV:\n1. Check for duplicate IDs\n2. Identify rows with missing required fields (name, email, phone)\n3. Flag invalid email formats\n4. Report data quality issues\n5. Export clean rows and error rows separately\"\n```\n\n### Multi-File Consolidation\n```\n\"Combine all CSV files I upload into one master file:\n1. Ensure columns match (add missing ones)\n2. Add a 'source_file' column\n3. Remove duplicates across all files\n4. Sort by date column\n5. Export as consolidated_data.csv\"\n```\n\n## Tips for Best Results\n\n1. **Be Specific About Columns**: Name the exact columns you want to work with\n2. **Describe Your Data**: Mention what each column represents for better context\n3. **Specify Output Format**: Tell Claude exactly how you want the result formatted\n4. **Handle Missing Data**: Be explicit about how to handle nulls (drop, fill with value, forward-fill, etc.)\n5. **Large Files**: For files >100MB, ask Claude to process in chunks or sample first\n6. **Date Formats**: Specify your expected date format (MM/DD/YYYY vs DD/MM/YYYY)\n7. **Encoding Issues**: If you see garbled text, ask Claude to try different encodings (UTF-8, latin-1, etc.)\n\n## Advanced Operations\n\n### Complex Transformations\n- Unpivoting (melt) wide data to long format\n- Creating calculated columns with business logic\n- Grouping and aggregating with custom functions\n- Handling multi-index data\n- Time series resampling and rolling windows\n\n### Data Quality Checks\n- Outlier detection and reporting\n- Referential integrity validation\n- Format consistency checks\n- Statistical anomaly detection\n\n## Troubleshooting\n\n**Issue:** File encoding errors or garbled characters\n**Solution:** Ask Claude to detect encoding or try: \"Read this with UTF-8-SIG encoding\" or \"Try latin-1 encoding\"\n\n**Issue:** Memory errors on large files\n**Solution:** \"Process this file in 10,000 row chunks\" or \"Sample 10% of rows first to test\"\n\n**Issue:** Wrong data types (dates as strings, numbers as text)\n**Solution:** Be explicit: \"Convert created_at column to datetime\" or \"Cast price to float\"\n\n**Issue:** Merge produces unexpected results\n**Solution:** Ask Claude to show sample rows before/after merge and explain the join type used\n\n**Issue:** Excel export loses formatting\n**Solution:** \"Export with formatted numbers, bold headers, and auto-column-width\"\n\n## Learn More\n\n- [Pandas Documentation](https://pandas.pydata.org/docs/) - Comprehensive data manipulation guide\n- [Excel to Pandas Mapping](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_spreadsheets.html) - Translate Excel operations\n- [Data Cleaning Best Practices](https://github.com/Quartz/bad-data-guide) - Common data issues and solutions\n- [Claude Code Interpreter Guide](https://www.anthropic.com/news/code-interpreter) - How Claude processes data\n",
  "features": [
    "Import/export with explicit schema control",
    "Deduplicate and null-safe transformations",
    "Join/merge/pivot with predictable results",
    "Encoding-aware IO with UTF-8/UTF-8-SIG handling",
    "Parquet round-trips for performance"
  ],
  "useCases": [
    "Clean messy CRM exports",
    "Join sales and marketing datasets",
    "Generate analyst-ready summary tables"
  ],
  "requirements": ["Python 3.11+", "pandas", "openpyxl", "pyarrow (optional for Parquet)"],
  "examples": [
    {
      "title": "Load, dedupe, and export",
      "language": "python",
      "code": "import pandas as pd\n\ncustomers = pd.read_csv('customers.csv', dtype=str)\norders = pd.read_excel('orders.xlsx')\n\n# Normalize and dedupe\ncustomers['email'] = customers['email'].str.strip().str.lower()\ncustomers = customers.drop_duplicates(subset=['email'])\n\n# Join and summarize\ndf = orders.merge(customers, on='customer_id', how='left')\nsales_by_region = df.groupby('region', dropna=False)['total'].sum().reset_index()\n\nsales_by_region.to_excel('sales_by_region.xlsx', index=False)"
    },
    {
      "title": "Explicit types and safe parsing",
      "language": "python",
      "code": "import pandas as pd\n\ndtypes = {\n  'id': 'Int64',\n  'price': 'float64',\n  'created_at': 'string'\n}\ndf = pd.read_csv('input.csv', dtype=dtypes, encoding='utf-8-sig')\n\n# Coerce dates after load\ndf['created_at'] = pd.to_datetime(df['created_at'], errors='coerce', utc=True)\n\ndf.to_parquet('output.parquet')"
    }
  ],
  "installation": {
    "claudeDesktop": { "steps": ["Install Python 3.11+", "pip install pandas openpyxl pyarrow"] },
    "claudeCode": { "steps": ["pip install pandas openpyxl", "Verify versions: pandas >= 2.0"] }
  },
  "troubleshooting": [
    {
      "issue": "Weird characters or extra header row",
      "solution": "Use encoding='utf-8-sig' and header=None with manual names when needed."
    },
    {
      "issue": "MemoryError on large files",
      "solution": "Use chunksize in read_csv or convert to Parquet and process incrementally."
    }
  ],
  "documentationUrl": "https://pandas.pydata.org/",
  "source": "community"
}
