{
  "slug": "v0-rapid-prototyping",
  "title": "V0 Rapid UI Prototyping Workflow",
  "seoTitle": "V0 Rapid UI Prototyping Workflow Skill",
  "description": "Build production-ready React components and full pages in minutes using V0.dev AI with shadcn/ui, TailwindCSS v4, and Next.js 15 integration.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["v0", "prototyping", "ui", "shadcn", "react"],
  "content": "# V0 Rapid UI Prototyping Workflow Skill\n\n## What This Skill Enables\n\nClaude can generate production-ready React components and complete page layouts using V0.dev patterns - Vercel's breakthrough AI UI generator that has transformed frontend development in 2025. This skill enables instant component creation with shadcn/ui integration, TailwindCSS v4 styling, full TypeScript support, and seamless Next.js 15 App Router compatibility.\n\n## Prerequisites\n\n**Required:**\n- Next.js 15+ project (App Router)\n- TailwindCSS v4.1+ configured\n- shadcn/ui components installed\n- Node.js 18+\n\n**What Claude handles automatically:**\n- Generating React 19 components with proper TypeScript types\n- Applying TailwindCSS v4 styling with CSS variables\n- Integrating shadcn/ui components\n- Creating responsive, mobile-first layouts\n- Adding framer-motion animations\n- Implementing accessibility (WCAG 2.2 Level AA)\n- Server/Client component distinction\n\n## How to Use This Skill\n\n### Component Generation from Description\n\n**Prompt:** \"Create a pricing table component with 3 tiers (Basic, Pro, Enterprise). Include monthly/annual toggle, feature lists with checkmarks, and prominent CTA buttons. Use shadcn/ui Card and Button components.\"\n\nClaude will:\n1. Generate TypeScript component with proper types\n2. Use shadcn/ui primitives (Card, Button, Switch)\n3. Apply TailwindCSS v4 utility classes\n4. Implement state management with useState\n5. Add responsive grid layout\n6. Include accessibility attributes (ARIA labels)\n7. Add smooth transitions with CSS\n\n### Dashboard Layout Creation\n\n**Prompt:** \"Build an analytics dashboard layout with sidebar navigation, header with search and notifications, stat cards showing KPIs, revenue chart using Recharts, and recent activity table. Make it fully responsive.\"\n\nClaude will:\n1. Create Server Component for static shell\n2. Add Client Components for interactive elements\n3. Implement responsive sidebar (mobile drawer)\n4. Generate stat cards with icons from lucide-react\n5. Integrate Recharts with proper TypeScript types\n6. Add loading states with Suspense boundaries\n7. Include dark mode support via next-themes\n\n### Form Generation with Validation\n\n**Prompt:** \"Create a user registration form with email, password, confirm password, and terms acceptance. Use react-hook-form with Zod validation. Show validation errors inline and disable submit until valid.\"\n\nClaude will:\n1. Generate form with shadcn/ui Form components\n2. Define Zod schema with comprehensive validation\n3. Integrate react-hook-form with zodResolver\n4. Add password strength indicator\n5. Implement real-time validation feedback\n6. Create accessible error messages\n7. Add loading state during submission\n\n### Landing Page Section\n\n**Prompt:** \"Design a hero section with gradient background, animated headline text, two CTA buttons, and three feature highlights below. Include subtle animations on scroll using framer-motion.\"\n\nClaude will:\n1. Create responsive hero layout\n2. Add gradient backgrounds with TailwindCSS\n3. Implement text animations with framer-motion\n4. Add button hover effects\n5. Create feature cards with icons\n6. Implement scroll-triggered animations\n7. Optimize for Core Web Vitals\n\n## Tips for Best Results\n\n1. **Be Specific About Components**: Mention exact shadcn/ui components you want (Card, Button, Dialog, etc.) for consistent design system usage.\n\n2. **Request Mobile-First**: Always specify \"mobile-first responsive design\" to ensure proper breakpoints and touch-friendly interactions.\n\n3. **Accessibility First**: Ask for WCAG 2.2 Level AA compliance to get proper semantic HTML, ARIA labels, and keyboard navigation.\n\n4. **Server vs Client**: Clarify if components need interactivity (Client Component with 'use client') or can be static (Server Component).\n\n5. **Animation Budgets**: Request \"performant animations\" to get GPU-accelerated framer-motion transitions instead of heavy JavaScript.\n\n6. **Dark Mode**: Specify \"with dark mode support\" to get proper color variable usage compatible with next-themes.\n\n## Common Workflows\n\n### Complete Page Generation\n```\n\"Create a complete product details page with:\n1. Image gallery with thumbnails (Client Component)\n2. Product info section (title, price, description)\n3. Add to cart button with quantity selector\n4. Reviews section with star ratings\n5. Related products carousel\n6. Mobile-responsive layout with good UX\n7. Loading states and error handling\"\n```\n\n### Component Library Starter\n```\n\"Generate a set of reusable UI components:\n1. CustomButton with variants (primary, secondary, outline, ghost)\n2. CustomCard with header, content, footer slots\n3. CustomInput with label, error message, help text\n4. CustomSelect with search and multi-select\n5. All components with TypeScript props, accessibility, and Storybook-ready\"\n```\n\n### Data Visualization Dashboard\n```\n\"Build a data visualization dashboard component:\n1. KPI summary cards at top (Revenue, Users, Conversion)\n2. Line chart for 30-day trends using Recharts\n3. Bar chart for category breakdown\n4. Pie chart for traffic sources\n5. Data table with sorting and filtering\n6. Export to CSV functionality\n7. Responsive grid that stacks on mobile\"\n```\n\n### Authentication UI Flow\n```\n\"Create a complete authentication flow:\n1. Login page with email/password and OAuth buttons\n2. Registration page with form validation\n3. Forgot password page with email input\n4. Email verification pending page\n5. Password reset page\n6. All pages with consistent styling using shadcn/ui\n7. Loading states and error handling\"\n```\n\n## Troubleshooting\n\n**Issue:** Generated components don't match my design system colors\n**Solution:** Ask Claude to use CSS variables from globals.css (--primary, --secondary, etc.) instead of hardcoded color values. Specify \"use our existing design tokens.\"\n\n**Issue:** Components are not responsive on mobile\n**Solution:** Request \"mobile-first responsive design with specific breakpoints: sm (640px), md (768px), lg (1024px)\" and ask for preview at each breakpoint.\n\n**Issue:** Too many client components affecting performance\n**Solution:** Ask Claude to \"identify which components can be Server Components and only use 'use client' for interactive elements like forms, buttons with onClick.\"\n\n**Issue:** Animations cause layout shift (CLS)\n**Solution:** Request \"animations that don't affect layout, using transform and opacity only\" to maintain good Core Web Vitals scores.\n\n**Issue:** TypeScript errors with component props\n**Solution:** Ask Claude to \"define explicit TypeScript interfaces for all component props with JSDoc comments\" for better type safety.\n\n## Learn More\n\n- [V0.dev Documentation](https://v0.dev/docs)\n- [shadcn/ui Components](https://ui.shadcn.com/)\n- [TailwindCSS v4 Guide](https://tailwindcss.com/docs)\n- [Next.js 15 App Router](https://nextjs.org/docs/app)\n- [React 19 Documentation](https://react.dev/)\n",
  "features": [
    "Instant React component generation with V0 patterns",
    "shadcn/ui integration with full type safety",
    "TailwindCSS v4 styling with CSS variables",
    "Responsive mobile-first layouts",
    "framer-motion animations",
    "WCAG 2.2 Level AA accessibility"
  ],
  "useCases": [
    "Rapid prototyping of UI designs",
    "Building production-ready components",
    "Creating landing pages and marketing sites",
    "Dashboard and admin panel development"
  ],
  "requirements": ["Next.js 15+", "React 19+", "TailwindCSS v4.1+", "shadcn/ui components"],
  "examples": [
    {
      "title": "Pricing Table Component",
      "language": "typescript",
      "code": "'use client';\n\nimport { useState } from 'react';\nimport { Check } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\n\ninterface PricingTier {\n  name: string;\n  price: { monthly: number; annual: number };\n  features: string[];\n  cta: string;\n  popular?: boolean;\n}\n\nconst tiers: PricingTier[] = [\n  {\n    name: 'Basic',\n    price: { monthly: 9, annual: 90 },\n    features: ['5 projects', '1GB storage', 'Email support'],\n    cta: 'Get Started',\n  },\n  {\n    name: 'Pro',\n    price: { monthly: 29, annual: 290 },\n    features: ['Unlimited projects', '10GB storage', 'Priority support', 'Advanced analytics'],\n    cta: 'Start Free Trial',\n    popular: true,\n  },\n  {\n    name: 'Enterprise',\n    price: { monthly: 99, annual: 990 },\n    features: ['Unlimited everything', '100GB storage', '24/7 phone support', 'Custom integrations', 'SLA'],\n    cta: 'Contact Sales',\n  },\n];\n\nexport function PricingTable() {\n  const [isAnnual, setIsAnnual] = useState(false);\n\n  return (\n    <div className=\"py-12\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tight sm:text-4xl\">Simple, transparent pricing</h2>\n          <div className=\"mt-6 flex items-center justify-center gap-3\">\n            <span className={!isAnnual ? 'font-semibold' : 'text-muted-foreground'}>Monthly</span>\n            <Switch checked={isAnnual} onCheckedChange={setIsAnnual} />\n            <span className={isAnnual ? 'font-semibold' : 'text-muted-foreground'}>\n              Annual <span className=\"text-sm text-primary\">(Save 20%)</span>\n            </span>\n          </div>\n        </div>\n\n        <div className=\"mt-12 grid gap-8 lg:grid-cols-3\">\n          {tiers.map((tier) => (\n            <Card key={tier.name} className={tier.popular ? 'border-primary shadow-lg' : ''}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  {tier.name}\n                  {tier.popular && (\n                    <span className=\"rounded-full bg-primary px-3 py-1 text-xs text-primary-foreground\">\n                      Popular\n                    </span>\n                  )}\n                </CardTitle>\n                <CardDescription>\n                  <div className=\"mt-4 flex items-baseline\">\n                    <span className=\"text-4xl font-bold\">\n                      ${isAnnual ? tier.price.annual / 12 : tier.price.monthly}\n                    </span>\n                    <span className=\"ml-1 text-muted-foreground\">/month</span>\n                  </div>\n                  {isAnnual && (\n                    <p className=\"mt-1 text-sm\">Billed annually (${tier.price.annual}/year)</p>\n                  )}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {tier.features.map((feature) => (\n                    <li key={feature} className=\"flex items-center gap-2\">\n                      <Check className=\"h-5 w-5 text-primary\" />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n              <CardFooter>\n                <Button className=\"w-full\" variant={tier.popular ? 'default' : 'outline'}>\n                  {tier.cta}\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "title": "Registration Form with Validation",
      "language": "typescript",
      "code": "'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email address' }),\n  password: z\n    .string()\n    .min(8, { message: 'Password must be at least 8 characters' })\n    .regex(/[A-Z]/, { message: 'Password must contain at least one uppercase letter' })\n    .regex(/[0-9]/, { message: 'Password must contain at least one number' }),\n  confirmPassword: z.string(),\n  acceptTerms: z.boolean().refine((val) => val === true, {\n    message: 'You must accept the terms and conditions',\n  }),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: ['confirmPassword'],\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function RegistrationForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      acceptTerms: false,\n    },\n  });\n\n  const onSubmit = async (data: FormValues) => {\n    setIsSubmitting(true);\n    try {\n      // Submit form\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      console.log(data);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"you@example.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"acceptTerms\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n              <FormControl>\n                <Checkbox checked={field.value} onCheckedChange={field.onChange} />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel>I accept the terms and conditions</FormLabel>\n                <FormMessage />\n              </div>\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n          {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Create Account\n        </Button>\n      </form>\n    </Form>\n  );\n}"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Ensure shadcn/ui is installed: npx shadcn-ui@latest init",
        "Ask Claude: 'Generate a [component description] using V0 patterns'",
        "Claude will create component with proper imports and types",
        "Install missing shadcn/ui components if needed"
      ]
    },
    "claudeCode": {
      "steps": [
        "npx shadcn-ui@latest init",
        "npx shadcn-ui@latest add button card input form",
        "Use prompts to generate components",
        "Copy generated code to your components directory"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "Missing shadcn/ui components",
      "solution": "Run 'npx shadcn-ui@latest add [component-name]' to install required components."
    },
    {
      "issue": "TypeScript errors with component props",
      "solution": "Ensure all shadcn/ui components are properly typed. Update to latest versions."
    },
    {
      "issue": "Styling conflicts with TailwindCSS",
      "solution": "Verify TailwindCSS v4 is configured correctly with CSS variables in globals.css."
    }
  ],
  "documentationUrl": "https://v0.dev/docs",
  "source": "community"
}
