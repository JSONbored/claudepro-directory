{
  "slug": "svelte-sveltekit-fullstack",
  "title": "Svelte/SvelteKit Full-Stack Developer",
  "seoTitle": "Svelte SvelteKit Full-Stack Development Skill",
  "description": "Build full-stack web apps with Svelte and SvelteKit. Minimal runtime overhead, reactive components, and server-side rendering. The most admired frontend framework of 2025.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-23",
  "tags": ["svelte", "sveltekit", "frontend", "full-stack", "reactive"],
  "discoveryMetadata": {
    "researchDate": "2025-10-23",
    "trendingSources": [
      {
        "source": "dev_to_javascript_trends",
        "evidence": "Svelte is 'one of most admired frameworks' in 2025, gaining on React/Angular. Developer satisfaction highest among UI frameworks",
        "url": "https://dev.to/this-is-learning/javascript-frameworks-heading-into-2025-hkb",
        "relevanceScore": "high"
      },
      {
        "source": "javascript_trends_2025",
        "evidence": "SvelteKit with SPA modes shows framework evolution. Svelte and SolidJS gaining popularity for performance and minimal runtime overhead",
        "url": "https://www.oliant.io/articles/javascript-trends-predictions-2025",
        "relevanceScore": "high"
      }
    ],
    "keywordResearch": {
      "primaryKeywords": [
        "svelte tutorial",
        "sveltekit development",
        "svelte components",
        "svelte full stack"
      ],
      "searchVolume": "medium",
      "competitionLevel": "medium"
    },
    "gapAnalysis": {
      "existingContent": ["v0-rapid-prototyping"],
      "identifiedGap": "No alternative frontend framework skills exist. V0 focuses on React/shadcn rapid prototyping, but all existing content is React/TypeScript-centric. Svelte is the #1 most admired framework in 2025 with unique compile-time approach and minimal runtime. SvelteKit provides full-stack capabilities missing from existing skills. Critical gap for developers seeking React alternatives.",
      "priority": "high"
    },
    "approvalRationale": "Svelte maintains title of 'most admired framework' in 2025 developer surveys with highest satisfaction ratings. SvelteKit evolution with SPA modes shows framework maturity. All existing skills are React/Node-focused - zero coverage of compile-time frameworks or React alternatives despite Svelte's proven track record and growing adoption. User approved October 23, 2025."
  },
  "content": "# Svelte/SvelteKit Full-Stack Developer Skill\n\n## What This Skill Enables\n\nClaude can build reactive web applications using Svelte's compile-time approach and SvelteKit's full-stack framework. Svelte compiles components to vanilla JavaScript at build time, resulting in minimal runtime overhead and exceptional performance. SvelteKit adds file-based routing, server-side rendering, API routes, and adapters for any platform. From simple components to production apps with authentication and databases, Claude handles the Svelte ecosystem end-to-end.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription or Claude Code CLI\n- Node.js 18+ (20+ recommended)\n- npm or pnpm package manager\n- Basic JavaScript knowledge\n\n**What Claude handles automatically:**\n- Creating reactive Svelte components with stores\n- Building SvelteKit routes with +page.svelte files\n- Implementing server-side logic in +page.server.ts\n- Setting up form actions with progressive enhancement\n- Adding authentication with hooks and load functions\n- Configuring database connections and ORMs\n- Implementing real-time features with Svelte stores\n- Deploying to Vercel, Netlify, or Node servers\n\n## How to Use This Skill\n\n### Reactive Component Development\n\n**Prompt:** \"Create Svelte component for user profile with: editable bio, avatar upload with preview, reactive form validation, and optimistic UI updates. Use Svelte stores for state.\"\n\nClaude will:\n1. Create component with $: reactive statements\n2. Set up writable stores for form state\n3. Add two-way binding with bind:value\n4. Implement file upload with FileReader\n5. Add reactive validation with $:\n6. Show optimistic updates\n7. Handle submission with fetch\n\n### SvelteKit Full-Stack App\n\n**Prompt:** \"Build SvelteKit blog with: file-based routing, Markdown posts with frontmatter, server-side API routes for CRUD, authentication with JWT, and SQLite database with Prisma.\"\n\nClaude will:\n1. Set up SvelteKit project structure\n2. Create +page.svelte routes\n3. Add +page.server.ts load functions\n4. Implement API routes in +server.ts\n5. Configure Prisma with SQLite\n6. Add authentication hooks\n7. Parse Markdown with gray-matter\n\n### Form Handling with Actions\n\n**Prompt:** \"Create SvelteKit form for product creation with: server-side validation, progressive enhancement (works without JS), file uploads, and optimistic UI. Show errors next to fields.\"\n\nClaude will:\n1. Create form in +page.svelte\n2. Add form action in +page.server.ts\n3. Implement server-side validation\n4. Use enhance for progressive enhancement\n5. Add file upload handling\n6. Display field-specific errors\n7. Show success messages\n\n### Real-Time Dashboard\n\n**Prompt:** \"Build real-time analytics dashboard with Svelte: WebSocket connection, reactive charts with Chart.js, derived stores for calculated metrics, and auto-refreshing data every 30s.\"\n\nClaude will:\n1. Set up WebSocket in SvelteKit\n2. Create writable stores for data\n3. Add derived stores for calculations\n4. Integrate Chart.js reactively\n5. Implement auto-refresh with setInterval\n6. Add connection status indicator\n7. Handle reconnection logic\n\n## Tips for Best Results\n\n1. **Use Reactive Statements**: The `$:` syntax automatically re-runs when dependencies change. Use for derived values, side effects, and reactive logic.\n\n2. **Embrace Two-Way Binding**: `bind:value`, `bind:checked`, `bind:group` simplify form handling. No need for onChange handlers.\n\n3. **Stores for Global State**: Use writable, readable, or derived stores instead of React Context. Access with `$` prefix in components.\n\n4. **Server Load Functions**: Fetch data in `+page.server.ts` load functions for SSR. Access with `data` prop in components.\n\n5. **Form Actions Over APIs**: SvelteKit form actions provide progressive enhancement. No JavaScript required for basic functionality.\n\n6. **Compile-Time Optimization**: Svelte compiles to optimal JavaScript. Avoid runtime overhead of virtual DOM. Components are just functions.\n\n## Common Workflows\n\n### E-Commerce Store\n```\n\"Build SvelteKit e-commerce with:\n1. Product catalog: +page.svelte with load function, search/filter\n2. Product detail: dynamic [slug]/+page.svelte route\n3. Cart: writable store with localStorage persistence\n4. Checkout: form actions with Stripe integration\n5. Auth: hooks for JWT validation, protected routes\n6. Admin: +layout.server.ts for role-based access\n7. Database: Prisma with PostgreSQL\n8. Images: static adapter with CDN\"\n```\n\n### SaaS Dashboard\n```\n\"Create multi-tenant SvelteKit SaaS:\n1. Auth: +hooks.server.ts for session management\n2. Multi-tenant: load function filters by tenant ID\n3. Dashboard: reactive charts with derived stores\n4. Settings: form actions for account updates\n5. API: +server.ts routes for external integrations\n6. Billing: Stripe webhooks in API routes\n7. Real-time: Server-Sent Events for notifications\n8. Deploy: Node adapter with PM2\"\n```\n\n### Static Site Generator\n```\n\"Build Svelte static site generator:\n1. Content: Markdown files with frontmatter\n2. Processing: +page.server.ts loads and parses MD\n3. Templates: layout components for post types\n4. Navigation: derived store from post metadata\n5. Search: client-side with Fuse.js\n6. RSS: +server.ts generates feed.xml\n7. Sitemap: prerender all routes\n8. Deploy: Static adapter to Netlify\"\n```\n\n### Real-Time Collaboration\n```\n\"Build collaborative doc editor with Svelte:\n1. Editor: rich text with ProseMirror\n2. Sync: WebSocket for real-time updates\n3. Presence: writable store showing active users\n4. Conflict resolution: operational transforms\n5. Persistence: auto-save to database\n6. Auth: session-based with refresh tokens\n7. Rooms: dynamic [roomId] routes\n8. Cursor positions: reactive SVG overlays\"\n```\n\n## Troubleshooting\n\n**Issue:** \"Reactive statements not updating when I expect\"\n**Solution:** Ensure reactive statement depends on reactive value ($: result = calculate(value), not const). Use = for assignment in reactive block. Check that dependencies are in scope. Array/object mutations need reassignment: `items = [...items, newItem]`.\n\n**Issue:** \"Load function data not available in component\"\n**Solution:** Export data prop in +page.svelte: `export let data;`. Check +page.server.ts returns object from load(). Verify route has +page.server.ts file. Use $page.data for nested layouts.\n\n**Issue:** \"Form action not being called\"\n**Solution:** Add name to form action: `<form method=\"POST\" action=\"?/create\">`. Export actions in +page.server.ts. Use enhance from $app/forms for progressive enhancement. Check method is POST.\n\n**Issue:** \"Stores not persisting across page navigation\"\n**Solution:** Use writable store in separate .ts file, not component. Import same store instance everywhere. For persistence, sync to localStorage with custom store. Check SvelteKit isn't destroying store on navigation.\n\n**Issue:** \"Deployment build failing with adapter errors\"\n**Solution:** Install correct adapter (@sveltejs/adapter-node, -vercel, -static). Check svelte.config.js has adapter configured. Verify build command in package.json. For static, ensure all routes are prerenderable.\n\n## Learn More\n\n- [Svelte Official Tutorial](https://svelte.dev/tutorial)\n- [SvelteKit Documentation](https://kit.svelte.dev/docs)\n- [Svelte GitHub Repository](https://github.com/sveltejs/svelte)\n- [SvelteKit Examples](https://github.com/sveltejs/kit/tree/master/examples)\n- [Svelte Society Recipes](https://sveltesociety.dev/recipes)\n- [Svelte REPL](https://svelte.dev/repl)\n",
  "features": [
    "Compile-time optimization with zero runtime overhead",
    "Reactive programming with $: syntax for auto-updates",
    "SvelteKit file-based routing with SSR and SSG",
    "Form actions with progressive enhancement"
  ],
  "useCases": [
    "Building reactive dashboards with minimal JavaScript",
    "Full-stack apps with authentication and databases",
    "Static sites with Markdown content processing"
  ],
  "requirements": ["Node.js 18+", "@sveltejs/kit ^2.0.0", "svelte ^4.0.0", "vite ^5.0.0"],
  "examples": [
    {
      "title": "Reactive Counter Component",
      "language": "javascript",
      "code": "<script>\n  let count = 0;\n  \n  // Reactive statement - automatically re-runs when count changes\n  $: doubled = count * 2;\n  $: console.log(`Count is now ${count}`);\n  \n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <button on:click={increment}>Count: {count}</button>\n  <p>Doubled: {doubled}</p>\n</div>\n\n<style>\n  div {\n    padding: 1rem;\n  }\n  button {\n    background: #ff3e00;\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    cursor: pointer;\n  }\n</style>"
    },
    {
      "title": "SvelteKit Page with Server Load",
      "language": "typescript",
      "code": "// src/routes/posts/+page.server.ts\nimport type { PageServerLoad } from './$types';\nimport { prisma } from '$lib/server/database';\n\nexport const load: PageServerLoad = async () => {\n  const posts = await prisma.post.findMany({\n    orderBy: { createdAt: 'desc' },\n    take: 10,\n  });\n  \n  return { posts };\n};\n\n// src/routes/posts/+page.svelte\n<script lang=\"ts\">\n  import type { PageData } from './$types';\n  \n  export let data: PageData;\n</script>\n\n<h1>Recent Posts</h1>\n\n<ul>\n  {#each data.posts as post}\n    <li>\n      <a href=\"/posts/{post.slug}\">{post.title}</a>\n      <time>{post.createdAt.toLocaleDateString()}</time>\n    </li>\n  {/each}\n</ul>"
    },
    {
      "title": "Form with Server Action",
      "language": "typescript",
      "code": "// src/routes/create/+page.server.ts\nimport type { Actions } from './$types';\nimport { fail } from '@sveltejs/kit';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  title: z.string().min(3),\n  content: z.string().min(10),\n});\n\nexport const actions: Actions = {\n  create: async ({ request }) => {\n    const formData = await request.formData();\n    const data = {\n      title: formData.get('title'),\n      content: formData.get('content'),\n    };\n    \n    const result = schema.safeParse(data);\n    if (!result.success) {\n      return fail(400, {\n        errors: result.error.flatten().fieldErrors,\n        data,\n      });\n    }\n    \n    // Save to database\n    // await prisma.post.create({ data: result.data });\n    \n    return { success: true };\n  },\n};\n\n// src/routes/create/+page.svelte\n<script lang=\"ts\">\n  import { enhance } from '$app/forms';\n  import type { ActionData } from './$types';\n  \n  export let form: ActionData;\n</script>\n\n<form method=\"POST\" action=\"?/create\" use:enhance>\n  <label>\n    Title\n    <input name=\"title\" value={form?.data?.title ?? ''} />\n    {#if form?.errors?.title}\n      <span class=\"error\">{form.errors.title[0]}</span>\n    {/if}\n  </label>\n  \n  <label>\n    Content\n    <textarea name=\"content\">{form?.data?.content ?? ''}</textarea>\n    {#if form?.errors?.content}\n      <span class=\"error\">{form.errors.content[0]}</span>\n    {/if}\n  </label>\n  \n  <button type=\"submit\">Create Post</button>\n  \n  {#if form?.success}\n    <p class=\"success\">Post created successfully!</p>\n  {/if}\n</form>"
    },
    {
      "title": "Writable Store with Persistence",
      "language": "typescript",
      "code": "// src/lib/stores/cart.ts\nimport { writable } from 'svelte/store';\nimport { browser } from '$app/environment';\n\ntype CartItem = { id: string; name: string; quantity: number };\n\nfunction createCartStore() {\n  // Load from localStorage if in browser\n  const stored = browser ? localStorage.getItem('cart') : null;\n  const initial: CartItem[] = stored ? JSON.parse(stored) : [];\n  \n  const { subscribe, set, update } = writable<CartItem[]>(initial);\n  \n  // Persist to localStorage on changes\n  if (browser) {\n    subscribe((value) => {\n      localStorage.setItem('cart', JSON.stringify(value));\n    });\n  }\n  \n  return {\n    subscribe,\n    add: (item: CartItem) => update((cart) => {\n      const existing = cart.find((i) => i.id === item.id);\n      if (existing) {\n        existing.quantity += item.quantity;\n        return [...cart];\n      }\n      return [...cart, item];\n    }),\n    remove: (id: string) => update((cart) => cart.filter((i) => i.id !== id)),\n    clear: () => set([]),\n  };\n}\n\nexport const cart = createCartStore();\n\n// Usage in component:\n// <script>\n//   import { cart } from '$lib/stores/cart';\n//   $: total = $cart.reduce((sum, item) => sum + item.quantity, 0);\n// </script>\n// <p>Cart: {total} items</p>"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Create SvelteKit project: npm create svelte@latest my-app",
        "Choose TypeScript, ESLint, Prettier in prompts",
        "Ask Claude: 'Create Svelte component for [your feature]'",
        "Run dev server: npm run dev"
      ]
    },
    "claudeCode": {
      "steps": [
        "npm create svelte@latest my-app",
        "cd my-app && npm install",
        "npm install -D @sveltejs/adapter-node prisma",
        "npx prisma init (if using database)"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "Reactive statements not updating",
      "solution": "Ensure reactive statement uses $: syntax and depends on reactive value. Array/object mutations need reassignment: items = [...items, newItem]. Check dependencies are in component scope."
    },
    {
      "issue": "Load function data not available",
      "solution": "Export data prop in +page.svelte: export let data;. Verify +page.server.ts returns object from load(). Check route has server file. Use $page.data for nested layouts."
    },
    {
      "issue": "Form action not being called",
      "solution": "Add action name to form: <form method=\"POST\" action=\"?/create\">. Export actions in +page.server.ts. Use enhance from $app/forms. Verify method is POST."
    }
  ],
  "documentationUrl": "https://kit.svelte.dev/",
  "source": "community"
}
