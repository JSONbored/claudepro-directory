{
  "slug": "supabase-realtime-database",
  "title": "Supabase Realtime Database Builder",
  "seoTitle": "Supabase Realtime Database Builder Skill",
  "description": "Build full-stack applications with Supabase Postgres, real-time subscriptions, Edge Functions, and pgvector AI integration for 4M+ developers.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["supabase", "postgres", "realtime", "backend", "database"],
  "content": "# Supabase Realtime Database Builder Skill\n\n## What This Skill Enables\n\nClaude can build complete backend systems using Supabase, the open-source Firebase alternative that raised $100M at $5B valuation in October 2025. With 4M+ developers and enterprise-scale Multigres features launching, Supabase provides PostgreSQL database, real-time subscriptions, authentication, storage, and Edge Functions - all with automatic APIs and pgvector for AI embeddings.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription or Claude Code CLI\n- Supabase account (free tier available)\n- Node.js 18+ for client libraries\n- Basic SQL and JavaScript knowledge\n\n**What Claude handles automatically:**\n- Setting up Supabase project and database schema\n- Creating Row Level Security (RLS) policies\n- Generating TypeScript types from database\n- Implementing real-time subscriptions\n- Configuring authentication with multiple providers\n- Building Edge Functions with Deno\n- Setting up Storage buckets with access control\n- Integrating pgvector for AI embeddings\n\n## How to Use This Skill\n\n### Initialize Supabase Project\n\n**Prompt:** \"Set up a Supabase project for a task management app with users, projects, tasks tables. Include RLS policies and TypeScript types.\"\n\nClaude will:\n1. Create database schema with foreign keys\n2. Set up RLS policies for multi-tenant data\n3. Generate migration files\n4. Create TypeScript types with supabase gen types\n5. Initialize Supabase client in application\n6. Add authentication flow\n7. Configure authorization rules\n\n### Real-Time Collaboration\n\n**Prompt:** \"Build real-time chat functionality where users see messages instantly when posted. Include typing indicators and online presence.\"\n\nClaude will:\n1. Create messages table with indexes\n2. Set up real-time subscription channel\n3. Implement message broadcasting\n4. Add presence tracking\n5. Show typing indicator\n6. Handle connection state\n7. Optimize with message batching\n\n### AI Integration with pgvector\n\n**Prompt:** \"Create a semantic search system using pgvector. Store document embeddings from OpenAI and enable similarity search with cosine distance.\"\n\nClaude will:\n1. Enable pgvector extension\n2. Create table with vector column\n3. Generate embeddings with OpenAI\n4. Store vectors in Supabase\n5. Implement similarity search RPC\n6. Add HNSW index for performance\n7. Create semantic search API\n\n### Edge Functions for Business Logic\n\n**Prompt:** \"Build Edge Functions that: send welcome emails on signup, process webhook from Stripe, and run nightly data aggregation job.\"\n\nClaude will:\n1. Create Deno Edge Functions\n2. Set up function triggers (database, HTTP, cron)\n3. Implement email sending with Resend\n4. Add Stripe webhook validation\n5. Create scheduled job\n6. Include error handling and logging\n7. Deploy with supabase functions deploy\n\n## Tips for Best Results\n\n1. **RLS is Critical**: Always implement Row Level Security policies. Request policies that match your access patterns (user owns data, team members can access, public read).\n\n2. **Type Generation**: Use `supabase gen types typescript` to generate TypeScript types. This ensures client code matches database schema.\n\n3. **Real-Time Channels**: Supabase real-time has different channel types (postgres_changes, broadcast, presence). Specify which you need based on use case.\n\n4. **Edge Functions with Deno**: Supabase uses Deno for Edge Functions. Request Deno-compatible code (no Node.js-specific APIs).\n\n5. **Storage Access Control**: Storage buckets can be public or private. Request appropriate RLS policies for file access.\n\n6. **Connection Pooling**: For serverless deployments, use Supabase connection pooling to avoid exceeding connection limits.\n\n## Common Workflows\n\n### Complete SaaS Backend\n```\n\"Build a SaaS backend with Supabase:\n1. Authentication with email, Google, GitHub OAuth\n2. Organizations and team member management\n3. Role-based access control (owner, admin, member)\n4. Real-time activity feed\n5. File uploads to Storage with access control\n6. Billing integration with Stripe webhooks\n7. Edge Functions for business logic\n8. pgvector for AI-powered search\"\n```\n\n### Social Media Platform\n```\n\"Create social media backend:\n1. User profiles with avatars in Storage\n2. Posts with likes, comments, shares\n3. Real-time notifications\n4. Follow/unfollow relationships\n5. Feed algorithm with RLS\n6. Direct messaging with presence\n7. Content moderation Edge Function\n8. Full-text search with PostgreSQL\"\n```\n\n### IoT Data Collection\n```\n\"Build IoT data collection system:\n1. Device registration and authentication\n2. Time-series data table with partitioning\n3. Real-time sensor data streaming\n4. Edge Functions for data aggregation\n5. Alert system for threshold violations\n6. Historical data analytics queries\n7. Dashboard real-time updates\n8. Export to CSV with Storage\"\n```\n\n### AI-Powered Knowledge Base\n```\n\"Create knowledge base with AI:\n1. Document storage with chunking\n2. Generate embeddings with OpenAI\n3. Store vectors in pgvector\n4. Semantic search with similarity\n5. Full-text search fallback\n6. Real-time collaborative editing\n7. Version history with temporal tables\n8. Edge Function for embedding generation\"\n```\n\n## Troubleshooting\n\n**Issue:** RLS policies blocking valid queries\n**Solution:** Check policies with `EXPLAIN` to see applied policies. Use service role key for admin operations. Test policies in SQL editor with `set role authenticated` and `set request.jwt.claim.sub = 'user-id'`.\n\n**Issue:** Real-time subscriptions not receiving updates\n**Solution:** Verify table has REPLICA IDENTITY configured. Check RLS policies allow SELECT on rows. Confirm real-time is enabled in Supabase dashboard. Use broadcast channels if PostgreSQL changes insufficient.\n\n**Issue:** Edge Functions timing out\n**Solution:** Edge Functions have 60s limit. Optimize database queries. Use connection pooling. Move long-running tasks to background jobs. Check function logs in dashboard.\n\n**Issue:** Type generation failing\n**Solution:** Ensure PostgreSQL schema is valid. Check for circular foreign keys. Update Supabase CLI to latest. Use `--local` flag if working with local instance.\n\n**Issue:** Storage upload fails\n**Solution:** Check bucket is created and RLS policies allow INSERT. Verify file size within limits. Check MIME type restrictions. Use service role for admin uploads.\n\n**Issue:** Connection pool exhausted\n**Solution:** Use Supabase pooler (port 6543 instead of 5432). Implement connection caching. Close connections properly. Consider upgrading plan for more connections.\n\n## Learn More\n\n- [Supabase Official Documentation](https://supabase.com/docs)\n- [Supabase JavaScript Client](https://supabase.com/docs/reference/javascript/introduction)\n- [Row Level Security Guide](https://supabase.com/docs/guides/auth/row-level-security)\n- [Real-Time Subscriptions](https://supabase.com/docs/guides/realtime)\n- [Edge Functions Guide](https://supabase.com/docs/guides/functions)\n- [pgvector Extension](https://supabase.com/docs/guides/ai/vector-columns)\n- [Database Migrations](https://supabase.com/docs/guides/cli/local-development)\n",
  "features": [
    "PostgreSQL with automatic REST and GraphQL APIs",
    "Real-time subscriptions with websockets",
    "Built-in authentication and authorization",
    "pgvector for AI embeddings and similarity search"
  ],
  "useCases": [
    "Full-stack web applications",
    "Real-time collaborative tools",
    "AI-powered semantic search"
  ],
  "requirements": [
    "Supabase account",
    "@supabase/supabase-js ^2.38.0",
    "Node.js 18+",
    "Supabase CLI for local development"
  ],
  "examples": [
    {
      "title": "Initialize Supabase Client",
      "language": "typescript",
      "code": "import { createClient } from '@supabase/supabase-js';\nimport { Database } from './types/supabase';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);\n\n// With authentication\nexport const createAuthenticatedClient = (accessToken: string) => {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    },\n  });\n};"
    },
    {
      "title": "Database Schema with RLS",
      "language": "sql",
      "code": "-- Create tables\nCREATE TABLE profiles (\n  id UUID PRIMARY KEY REFERENCES auth.users(id),\n  username TEXT UNIQUE NOT NULL,\n  avatar_url TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE TABLE projects (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  owner_id UUID REFERENCES profiles(id) NOT NULL,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE TABLE tasks (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  project_id UUID REFERENCES projects(id) ON DELETE CASCADE,\n  title TEXT NOT NULL,\n  completed BOOLEAN DEFAULT FALSE,\n  assigned_to UUID REFERENCES profiles(id),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Enable Row Level Security\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE projects ENABLE ROW LEVEL SECURITY;\nALTER TABLE tasks ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies\nCREATE POLICY \"Users can view own profile\"\n  ON profiles FOR SELECT\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\"\n  ON profiles FOR UPDATE\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can view own projects\"\n  ON projects FOR SELECT\n  USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can create projects\"\n  ON projects FOR INSERT\n  WITH CHECK (auth.uid() = owner_id);\n\nCREATE POLICY \"Users can view tasks in own projects\"\n  ON tasks FOR SELECT\n  USING (\n    EXISTS (\n      SELECT 1 FROM projects\n      WHERE projects.id = tasks.project_id\n      AND projects.owner_id = auth.uid()\n    )\n  );"
    },
    {
      "title": "Real-Time Subscription",
      "language": "typescript",
      "code": "import { useEffect, useState } from 'react';\nimport { supabase } from './supabase';\nimport { Database } from './types/supabase';\n\ntype Task = Database['public']['Tables']['tasks']['Row'];\n\nexport function useTasks(projectId: string) {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  useEffect(() => {\n    // Fetch initial data\n    const fetchTasks = async () => {\n      const { data } = await supabase\n        .from('tasks')\n        .select('*')\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false });\n      \n      if (data) setTasks(data);\n    };\n\n    fetchTasks();\n\n    // Subscribe to real-time changes\n    const channel = supabase\n      .channel(`tasks:${projectId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'tasks',\n          filter: `project_id=eq.${projectId}`,\n        },\n        (payload) => {\n          if (payload.eventType === 'INSERT') {\n            setTasks((current) => [payload.new as Task, ...current]);\n          } else if (payload.eventType === 'UPDATE') {\n            setTasks((current) =>\n              current.map((task) =>\n                task.id === payload.new.id ? (payload.new as Task) : task\n              )\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setTasks((current) =>\n              current.filter((task) => task.id !== payload.old.id)\n            );\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      channel.unsubscribe();\n    };\n  }, [projectId]);\n\n  return tasks;\n}"
    },
    {
      "title": "Edge Function Example",
      "language": "typescript",
      "code": "// supabase/functions/send-welcome-email/index.ts\nimport { serve } from 'https://deno.land/std@0.177.0/http/server.ts';\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL')!,\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n);\n\nserve(async (req) => {\n  try {\n    const { record } = await req.json();\n    const userId = record.id;\n\n    // Get user email\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('email')\n      .eq('id', userId)\n      .single();\n\n    if (!profile) {\n      throw new Error('Profile not found');\n    }\n\n    // Send email (integrate with Resend, SendGrid, etc.)\n    const response = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${Deno.env.get('RESEND_API_KEY')}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: 'welcome@yourapp.com',\n        to: profile.email,\n        subject: 'Welcome to YourApp!',\n        html: '<h1>Welcome!</h1><p>Thanks for signing up.</p>',\n      }),\n    });\n\n    return new Response(JSON.stringify({ success: true }), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n});"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Create account at supabase.com",
        "Install CLI: npm install -g supabase",
        "Initialize project: supabase init",
        "Ask Claude: 'Set up Supabase for [your app]'",
        "Claude generates schema, RLS policies, and client code"
      ]
    },
    "claudeCode": {
      "steps": [
        "npm install @supabase/supabase-js",
        "supabase login",
        "supabase init",
        "supabase start (for local development)",
        "supabase gen types typescript > types/supabase.ts"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "RLS policies blocking queries",
      "solution": "Test policies with service role key first. Check policy using EXPLAIN in SQL editor. Verify auth.uid() returns expected user ID."
    },
    {
      "issue": "Real-time not working",
      "solution": "Enable real-time in table settings. Check RLS allows SELECT. Verify REPLICA IDENTITY is FULL. Use broadcast channel if needed."
    },
    {
      "issue": "Edge Function deployment fails",
      "solution": "Check Deno compatibility of imports. Verify environment variables set. Check function logs in dashboard for errors."
    }
  ],
  "documentationUrl": "https://supabase.com/docs",
  "source": "community"
}
