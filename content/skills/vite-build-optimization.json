{
  "slug": "vite-build-optimization",
  "title": "Vite Build Optimization Specialist",
  "seoTitle": "Vite Frontend Build Performance Optimization Skill",
  "description": "Optimize frontend build performance with Vite's lightning-fast HMR, code splitting, and tree-shaking. Modern build tooling that's replaced Webpack as the developer favorite.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-23",
  "tags": ["vite", "build-tools", "webpack", "performance", "frontend"],
  "discoveryMetadata": {
    "researchDate": "2025-10-23",
    "trendingSources": [
      {
        "source": "dev_to_2025_survey",
        "evidence": "Vite ranked higher than Webpack in 2025, reversing 2023 trend. Dev.to survey shows Vite dominating build tool discussion",
        "url": "https://dev.to/this-is-learning/javascript-frameworks-heading-into-2025-hkb",
        "relevanceScore": "high"
      },
      {
        "source": "javascript_trends_2025",
        "evidence": "VoidZero (Evan You) shows integrated tooling foundation is essential. Vite adoption accelerating across all major frameworks",
        "url": "https://www.oliant.io/articles/javascript-trends-predictions-2025",
        "relevanceScore": "high"
      }
    ],
    "keywordResearch": {
      "primaryKeywords": ["vite optimization", "vite config", "vite build", "frontend build tools"],
      "searchVolume": "high",
      "competitionLevel": "medium"
    },
    "gapAnalysis": {
      "existingContent": ["v0-rapid-prototyping", "windsurf-collaborative-development"],
      "identifiedGap": "No build tool or frontend performance optimization skills exist. Existing skills focus on UI prototyping (v0) or collaborative development workflows (Windsurf), not build configuration or optimization. Vite is now the dominant build tool, surpassing Webpack in 2025 developer preference surveys. Critical gap for modern frontend development.",
      "priority": "high"
    },
    "approvalRationale": "Vite reversed Webpack dominance in 2025 according to Dev.to survey, marking major shift in frontend tooling landscape. Evan You's VoidZero initiative emphasizes integrated tooling as essential for modern development. No existing build tool skills despite this being fundamental infrastructure. User approved October 23, 2025."
  },
  "content": "# Vite Build Optimization Specialist Skill\n\n## What This Skill Enables\n\nClaude can optimize your Vite build configuration for production-ready performance with instant Hot Module Replacement (HMR), intelligent code splitting, and tree-shaking. Vite leverages native ES modules during development and Rollup for optimized production builds, delivering the fastest developer experience while generating highly optimized bundles. From configuring build options to debugging bundle size, Claude handles the complexity of modern frontend tooling.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription or Claude Code CLI\n- Node.js 18+ (20+ recommended)\n- npm, pnpm, or yarn package manager\n- Basic understanding of JavaScript modules\n\n**What Claude handles automatically:**\n- Configuring vite.config.ts for optimal builds\n- Setting up code splitting strategies\n- Implementing lazy loading for routes/components\n- Analyzing and optimizing bundle size\n- Configuring CSS optimization and extraction\n- Setting up environment variables\n- Implementing caching strategies\n- Configuring build targets for browser support\n\n## How to Use This Skill\n\n### Production Build Optimization\n\n**Prompt:** \"Optimize my Vite config for production with: code splitting by route, lazy loading for heavy components, CSS extraction, source maps, and tree-shaking. Target modern browsers (ES2020).\"\n\nClaude will:\n1. Configure build.rollupOptions for chunking\n2. Set up manual chunks for vendors\n3. Enable CSS code splitting\n4. Configure source map generation\n5. Set build.target for ES2020\n6. Add tree-shaking optimizations\n7. Configure minification settings\n\n### Bundle Size Analysis\n\n**Prompt:** \"My Vite bundle is 2MB. Help me analyze what's taking space and optimize. Use rollup-plugin-visualizer and suggest splitting strategies.\"\n\nClaude will:\n1. Install and configure bundle analyzer\n2. Generate visual bundle report\n3. Identify large dependencies\n4. Suggest dynamic imports for heavy libs\n5. Configure vendor chunk splitting\n6. Recommend lighter alternatives\n7. Set up lazy loading for routes\n\n### Multi-Page Application Setup\n\n**Prompt:** \"Configure Vite for multi-page app with 3 entry points: landing page, dashboard, admin panel. Each should have separate bundles but share common dependencies.\"\n\nClaude will:\n1. Set up build.rollupOptions.input\n2. Create separate HTML entry points\n3. Configure shared chunk extraction\n4. Set up independent CSS bundles\n5. Implement common vendor splitting\n6. Add entry-specific optimizations\n7. Configure dev server for multi-page\n\n### Plugin Configuration & Optimization\n\n**Prompt:** \"Set up Vite with React, TypeScript, PWA support, image optimization, and SVG imports. Optimize for fastest dev server startup and HMR.\"\n\nClaude will:\n1. Install and configure @vitejs/plugin-react\n2. Add vite-plugin-pwa with precaching\n3. Set up vite-imagetools for optimization\n4. Configure vite-plugin-svgr\n5. Enable React Fast Refresh\n6. Optimize dependencies prebundling\n7. Configure HMR boundaries\n\n## Tips for Best Results\n\n1. **Use Manual Chunks Wisely**: Split vendors by update frequency. React/Vue rarely change, but business logic does. Use `manualChunks` to separate stable from volatile code.\n\n2. **Lazy Load Heavy Libraries**: Import chart libraries, rich editors, or large UI components dynamically only when needed. Vite handles code splitting automatically.\n\n3. **Optimize Dependencies**: Use `optimizeDeps.include` for dependencies that slow down dev server startup. Pre-bundle CJS dependencies to ESM.\n\n4. **Environment Variables**: Use `import.meta.env` (not `process.env`). Prefix with `VITE_` to expose to client code. Use `.env.local` for secrets.\n\n5. **Source Maps in Production**: Use `hidden-source-map` for error tracking without exposing code. Never use `inline-source-map` in production.\n\n6. **CSS Optimization**: Enable `build.cssCodeSplit` for route-based CSS. Use PostCSS for autoprefixer and minification.\n\n## Common Workflows\n\n### Large React App Optimization\n```\n\"Optimize Vite build for React app with 50+ routes:\n1. Implement route-based code splitting with React.lazy()\n2. Split vendor chunks: react/react-dom, UI library, utilities\n3. Configure dynamic imports for modals, charts, editors\n4. Add preload hints for critical chunks\n5. Enable CSS code splitting per route\n6. Configure build.rollupOptions for optimal chunking\n7. Add bundle analyzer and aim for <200KB initial load\n8. Set up Lighthouse CI to track performance\"\n```\n\n### Monorepo Build Configuration\n```\n\"Configure Vite in Turborepo monorepo:\n1. Shared vite.config.base.ts for common config\n2. App-specific configs extending base\n3. Shared component library with optimized exports\n4. Configure path aliases for @workspace packages\n5. Set up cache strategy for unchanged packages\n6. Optimize prebundling for internal dependencies\n7. Configure dev server proxy for backend services\n8. Add workspace-aware HMR\"\n```\n\n### Progressive Web App Build\n```\n\"Set up Vite PWA with offline support:\n1. Install vite-plugin-pwa with Workbox\n2. Configure service worker precaching strategy\n3. Add runtime caching for API calls\n4. Set up offline fallback page\n5. Generate web manifest with icons\n6. Configure update notification for new versions\n7. Optimize caching based on file types\n8. Add service worker update lifecycle\"\n```\n\n### Library Build Configuration\n```\n\"Configure Vite for component library build:\n1. Set build.lib mode with entry point\n2. Configure external dependencies (React, Vue)\n3. Generate ESM and UMD bundles\n4. Add TypeScript declaration generation\n5. Set up CSS extraction and modules\n6. Configure tree-shaking for optimal imports\n7. Add source maps for debugging\n8. Set up package.json exports field\"\n```\n\n## Troubleshooting\n\n**Issue:** \"Dev server slow to start with large dependencies\"\n**Solution:** Add slow dependencies to `optimizeDeps.include` array. Use `server.warmup` to prebundle commonly used files. Check for circular dependencies. Consider using `optimizeDeps.esbuildOptions.target` to skip unnecessary transforms.\n\n**Issue:** \"HMR not working for certain components\"\n**Solution:** Check component exports are named (not default). Ensure no side effects in module scope. Add HMR boundaries with `import.meta.hot.accept()`. Verify vite-plugin-react is installed for React Fast Refresh.\n\n**Issue:** \"Production bundle size larger than expected\"\n**Solution:** Run bundle analyzer to identify heavy dependencies. Check for duplicate dependencies in node_modules. Use dynamic imports for heavy libs. Verify tree-shaking with `build.rollupOptions.treeshake`. Check for unintentional global imports.\n\n**Issue:** \"Environment variables not accessible in client\"\n**Solution:** Prefix variables with `VITE_` in .env file. Use `import.meta.env.VITE_VAR_NAME` not `process.env`. Check .env file is in project root. Restart dev server after adding new env vars.\n\n**Issue:** \"Build fails with 'Cannot find module' errors\"\n**Solution:** Check path aliases in vite.config.ts match tsconfig.json. Verify resolve.alias configuration. Ensure all imports use correct file extensions. Check for case-sensitive file naming issues.\n\n## Learn More\n\n- [Vite Official Documentation](https://vitejs.dev/)\n- [Vite GitHub Repository](https://github.com/vitejs/vite)\n- [Rollup Plugin Documentation](https://rollupjs.org/guide/en/#plugin-development)\n- [Vite Plugin Collection](https://github.com/vitejs/awesome-vite)\n- [ViteConf 2024 Talks](https://viteconf.org/2024/replay)\n- [Vite Performance Guide](https://vitejs.dev/guide/performance.html)\n",
  "features": [
    "Instant Hot Module Replacement (HMR) with native ESM",
    "Rollup-powered production builds with tree-shaking",
    "Plugin ecosystem for React, Vue, Svelte, and more",
    "Zero-config CSS code splitting and optimization"
  ],
  "useCases": [
    "Optimizing large React/Vue apps with 50+ routes",
    "Building component libraries with ESM/UMD output",
    "Configuring PWAs with offline support"
  ],
  "requirements": ["Node.js 18+", "vite ^5.0.0", "npm/pnpm/yarn"],
  "examples": [
    {
      "title": "Optimized Production Build Config",
      "language": "typescript",
      "code": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { visualizer } from 'rollup-plugin-visualizer';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    visualizer({ open: true, filename: 'dist/stats.html' }),\n  ],\n  build: {\n    target: 'es2020',\n    sourcemap: 'hidden',\n    rollupOptions: {\n      output: {\n        manualChunks: (id) => {\n          // Vendor chunk for React ecosystem\n          if (id.includes('node_modules/react') || id.includes('node_modules/react-dom')) {\n            return 'vendor-react';\n          }\n          // Separate chunk for UI library\n          if (id.includes('node_modules/@mui') || id.includes('node_modules/@emotion')) {\n            return 'vendor-ui';\n          }\n          // Utilities chunk\n          if (id.includes('node_modules/lodash') || id.includes('node_modules/date-fns')) {\n            return 'vendor-utils';\n          }\n        },\n      },\n    },\n    cssCodeSplit: true,\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true,\n      },\n    },\n  },\n  optimizeDeps: {\n    include: ['react', 'react-dom'],\n  },\n});"
    },
    {
      "title": "Multi-Page App Configuration",
      "language": "typescript",
      "code": "import { defineConfig } from 'vite';\nimport { resolve } from 'path';\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        dashboard: resolve(__dirname, 'dashboard/index.html'),\n        admin: resolve(__dirname, 'admin/index.html'),\n      },\n      output: {\n        manualChunks: {\n          // Shared dependencies across all pages\n          shared: ['react', 'react-dom', 'react-router-dom'],\n        },\n      },\n    },\n  },\n  server: {\n    open: '/index.html',\n  },\n});"
    },
    {
      "title": "PWA with Service Worker",
      "language": "typescript",
      "code": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { VitePWA } from 'vite-plugin-pwa';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    VitePWA({\n      registerType: 'autoUpdate',\n      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],\n      manifest: {\n        name: 'My App',\n        short_name: 'App',\n        description: 'My awesome Progressive Web App',\n        theme_color: '#ffffff',\n        icons: [\n          {\n            src: 'pwa-192x192.png',\n            sizes: '192x192',\n            type: 'image/png',\n          },\n          {\n            src: 'pwa-512x512.png',\n            sizes: '512x512',\n            type: 'image/png',\n          },\n        ],\n      },\n      workbox: {\n        runtimeCaching: [\n          {\n            urlPattern: /^https:\\/\\/api\\.example\\.com\\/.*$/,\n            handler: 'NetworkFirst',\n            options: {\n              cacheName: 'api-cache',\n              expiration: {\n                maxEntries: 50,\n                maxAgeSeconds: 86400, // 1 day\n              },\n            },\n          },\n          {\n            urlPattern: /\\.(?:png|jpg|jpeg|svg|gif)$/,\n            handler: 'CacheFirst',\n            options: {\n              cacheName: 'images-cache',\n              expiration: {\n                maxEntries: 100,\n                maxAgeSeconds: 2592000, // 30 days\n              },\n            },\n          },\n        ],\n      },\n    }),\n  ],\n});"
    },
    {
      "title": "Component Library Build",
      "language": "typescript",
      "code": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport dts from 'vite-plugin-dts';\nimport { resolve } from 'path';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    dts({ insertTypesEntry: true }),\n  ],\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'src/index.ts'),\n      name: 'MyComponentLibrary',\n      formats: ['es', 'umd'],\n      fileName: (format) => `my-lib.${format}.js`,\n    },\n    rollupOptions: {\n      external: ['react', 'react-dom'],\n      output: {\n        globals: {\n          react: 'React',\n          'react-dom': 'ReactDOM',\n        },\n      },\n    },\n    sourcemap: true,\n  },\n});"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Create Vite project: npm create vite@latest",
        "Ask Claude: 'Optimize my Vite config for [your use case]'",
        "Claude generates optimized vite.config.ts",
        "Build with: npm run build"
      ]
    },
    "claudeCode": {
      "steps": [
        "npm create vite@latest my-app",
        "cd my-app && npm install",
        "Install plugins: npm install -D rollup-plugin-visualizer vite-plugin-pwa",
        "Configure vite.config.ts for your needs"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "Dev server startup slow with large dependencies",
      "solution": "Add slow dependencies to optimizeDeps.include. Use server.warmup for commonly used files. Check for circular dependencies. Configure optimizeDeps.esbuildOptions.target appropriately."
    },
    {
      "issue": "HMR not working for specific components",
      "solution": "Ensure named exports (not default). Check for side effects in module scope. Add HMR boundaries with import.meta.hot.accept(). Verify plugin installation (vite-plugin-react for React)."
    },
    {
      "issue": "Production bundle larger than expected",
      "solution": "Use bundle analyzer (rollup-plugin-visualizer) to identify heavy dependencies. Check for duplicates. Implement dynamic imports. Verify tree-shaking configuration. Audit global imports."
    }
  ],
  "documentationUrl": "https://vitejs.dev/",
  "source": "community"
}
