{
  "slug": "rest-api-client-harness",
  "title": "REST API Client Harness",
  "seoTitle": "REST API Client Harness Skill",
  "description": "Explore and script against REST APIs with auth, pagination, retries, and error handling.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-15",
  "tags": ["rest", "http", "api", "curl", "node"],
  "content": "# REST API Client Harness Skill\n\n## What This Skill Enables\n\nClaude can interact with REST APIs: make requests, handle authentication (API keys, OAuth, JWT), paginate through results, handle rate limits with retries, and process responses. Build API integration scripts, test endpoints, and extract data from web services.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription\n- Code Interpreter feature enabled\n- API credentials (if required by the API)\n\n**What Claude handles:**\n- Installing HTTP libraries (requests, axios, fetch)\n- Making authenticated requests\n- Handling pagination\n- Retry logic with exponential backoff\n- Response parsing and data extraction\n- Error handling\n\n## How to Use This Skill\n\n### Simple API Request\n\n**Prompt:** \"Fetch data from this REST API endpoint: https://api.example.com/users\nUse API key: [your-key]\nShow me the first 10 results.\"\n\nClaude will:\n1. Make GET request with auth header\n2. Parse JSON response\n3. Extract and display data\n4. Handle errors gracefully\n\n### Paginated Data Extraction\n\n**Prompt:** \"Fetch all pages from this paginated API:\nURL: https://api.example.com/items\nPagination: cursor-based (next_cursor field)\nAPI Key: [your-key]\nSave all results to items.json\"\n\nClaude will:\n1. Make first request\n2. Loop through pages using cursor\n3. Collect all results\n4. Save to JSON file\n5. Report total count\n\n### POST Request with Data\n\n**Prompt:** \"Create a new user via POST request:\nURL: https://api.example.com/users\nPayload: {name: 'John Doe', email: 'john@example.com'}\nAuth: Bearer token [your-token]\nShow me the response.\"\n\nClaude will:\n1. Prepare POST request\n2. Set headers (auth, content-type)\n3. Send JSON payload\n4. Parse response\n5. Display result or error\n\n### Batch Operations\n\n**Prompt:** \"Upload all these records to the API:\n- Read from users.csv\n- For each row, POST to /users endpoint\n- Handle rate limits (max 10 requests/second)\n- Log successes and failures\n- Retry failures once\"\n\nClaude will:\n1. Read CSV data\n2. Iterate through rows\n3. Make POST requests with rate limiting\n4. Retry on failures\n5. Generate success/failure report\n\n## Common Workflows\n\n### API Testing & Exploration\n```\n\"Test this API endpoint:\n1. Make GET request to /api/products\n2. Check status code and headers\n3. Validate JSON response schema\n4. Show sample of first 3 records\n5. Report if any fields are null/missing\"\n```\n\n### Data Migration\n```\n\"Migrate data from API A to API B:\n1. Fetch all records from source API (paginated)\n2. Transform to target API format\n3. POST to destination API\n4. Handle rate limits (5 req/sec)\n5. Log migration progress and errors\nSave unmigrated records to errors.json\"\n```\n\n### Webhook Testing\n```\n\"Test this webhook:\n1. POST sample payload to webhook URL\n2. Check response status\n3. Validate response format\n4. Test with invalid payload\n5. Report all results\"\n```\n\n### API Monitoring\n```\n\"Monitor API health:\n1. Hit /health endpoint every minute for 10 minutes\n2. Record response time and status\n3. Alert if response time > 1 second\n4. Create uptime report\n5. Plot response times\"\n```\n\n## Authentication Methods\n\n### API Key Authentication\n- Header: `X-API-Key: your-key`\n- Query parameter: `?api_key=your-key`\n- Custom header format\n\n### Bearer Token (JWT)\n- Header: `Authorization: Bearer your-token`\n- Token refresh handling\n- Expiration detection\n\n### Basic Authentication\n- Header: `Authorization: Basic base64(user:pass)`\n- Credentials encoding\n\n### OAuth 2.0\n- Client credentials flow\n- Authorization code flow\n- Token refresh logic\n\n## Advanced Features\n\n### Rate Limiting & Retries\n- Respect rate limit headers\n- Exponential backoff\n- Jitter for retry timing\n- Max retry attempts\n\n### Response Handling\n- JSON parsing\n- XML/HTML parsing\n- Binary data (images, files)\n- Streaming responses\n\n### Error Handling\n- HTTP status code detection\n- Custom error messages\n- Validation errors\n- Network timeouts\n\n### Data Transformation\n- JSON to CSV conversion\n- Field mapping and renaming\n- Data type coercion\n- Filtering and aggregation\n\n## Tips for Best Results\n\n1. **Provide API Docs**: Share API documentation link or describe endpoints\n2. **Authentication**: Be clear about auth method and provide credentials securely\n3. **Rate Limits**: Mention any known rate limits (\"max 100 requests/minute\")\n4. **Pagination**: Describe pagination style (cursor, offset, page-based)\n5. **Error Handling**: Specify how to handle failures (\"retry 3 times then skip\")\n6. **Data Volume**: Estimate how many requests (\"expect 1000 records across 10 pages\")\n7. **Response Format**: Mention expected format (JSON, XML, etc.)\n\n## Common Patterns\n\n### Cursor-Based Pagination\n```python\nurl = \"https://api.example.com/items\"\nall_items = []\ncursor = None\nwhile True:\n    params = {\"cursor\": cursor} if cursor else {}\n    response = requests.get(url, params=params)\n    data = response.json()\n    all_items.extend(data[\"items\"])\n    cursor = data.get(\"next_cursor\")\n    if not cursor:\n        break\n```\n\n### Retry with Exponential Backoff\n```python\nimport time\nmax_retries = 3\nfor attempt in range(max_retries):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        break\n    except requests.exceptions.RequestException:\n        if attempt < max_retries - 1:\n            wait = 2 ** attempt  # 1s, 2s, 4s\n            time.sleep(wait)\n        else:\n            raise\n```\n\n## Troubleshooting\n\n**Issue:** Authentication failing\n**Solution:** Double-check auth method and credentials. Show Claude the API docs for auth section.\n\n**Issue:** Rate limit errors (429)\n**Solution:** \"Add retry logic with exponential backoff\" or \"Reduce concurrent requests to 5/second\"\n\n**Issue:** Response parsing errors\n**Solution:** \"Show me raw response first\" then describe expected structure\n\n**Issue:** Pagination not working\n**Solution:** Clarify pagination method: \"Use offset pagination starting at 0, increment by 100\"\n\n**Issue:** Timeouts on large requests\n**Solution:** \"Increase timeout to 60 seconds\" or \"Fetch in smaller batches\"\n\n**Issue:** CORS errors (in browser context)\n**Solution:** Note: Code Interpreter runs server-side, no CORS issues\n\n## Learn More\n\n- [HTTP Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) - GET, POST, PUT, DELETE, etc.\n- [HTTP Status Codes](https://httpstatuses.com/) - Understanding response codes\n- [REST API Best Practices](https://restfulapi.net/) - API design principles\n- [Postman Learning](https://learning.postman.com/) - API testing tutorials\n- [Python Requests](https://requests.readthedocs.io/) - Popular HTTP library\n",
  "features": [
    "Token management patterns",
    "Pagination utilities",
    "Retry with exponential backoff",
    "Typed responses (TS)"
  ],
  "useCases": ["ETL from third-party APIs", "Backfills and migrations", "Monitoring scripts"],
  "requirements": ["Node.js 18+", "undici or axios"],
  "examples": [
    {
      "title": "Fetch all pages with backoff (TS)",
      "language": "typescript",
      "code": "import { setTimeout as delay } from 'node:timers/promises';\nimport { fetch } from 'undici';\n\nasync function fetchAll(url, token) {\n  let next = url;\n  const items = [];\n  while (next) {\n    const res = await fetch(next, { headers: { Authorization: `Bearer ${token}` } });\n    if (!res.ok) {\n      if (res.status >= 500) { await delay(1000); continue; }\n      throw new Error(`HTTP ${res.status}`);\n    }\n    const data = await res.json();\n    items.push(...data.items);\n    next = data.next;\n  }\n  return items;\n}"
    }
  ],
  "installation": {
    "claudeDesktop": { "steps": ["Install Node.js 18+", "npm i undici"] },
    "claudeCode": { "steps": ["Set env vars for tokens", "Use .netrc or keychain where possible"] }
  },
  "troubleshooting": [
    {
      "issue": "Rate limits",
      "solution": "Respect Retry-After headers and implement exponential backoff with jitter."
    },
    {
      "issue": "OAuth token refresh failing with 'invalid_grant' error",
      "solution": "Check token expiry before requests. Store refresh token securely. Ensure clock sync between client/server (use NTP)."
    },
    {
      "issue": "Request body not being sent or arriving as empty object",
      "solution": "Set Content-Type header to 'application/json'. Use JSON.stringify() for body. Check if API expects form-urlencoded instead."
    },
    {
      "issue": "SSL certificate verification errors (CERT_HAS_EXPIRED, UNABLE_TO_VERIFY)",
      "solution": "Update Node.js and CA certificates. For dev/testing only: disable with NODE_TLS_REJECT_UNAUTHORIZED=0 (never in production)."
    },
    {
      "issue": "Pagination cursor getting stuck in infinite loop or returning duplicates",
      "solution": "Check if cursor equals previous value before continuing. Implement max iteration limit. Verify API cursor is URL-encoded properly."
    }
  ],
  "documentationUrl": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",
  "source": "community"
}
