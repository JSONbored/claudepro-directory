{
  "slug": "rest-api-client-harness",
  "title": "REST API Client Harness",
  "seoTitle": "REST API Client Harness Skill",
  "description": "Explore and script against REST APIs with auth, pagination, retries, and error handling.",
  "category": "skills",
  "author": "claudepro",
  "dateAdded": "2025-10-15",
  "tags": ["rest", "http", "api", "curl", "node"],
  "content": "# REST API Client Harness\n\nQuickly build robust API scripts with auth, pagination, idempotency, and retries.\n\n## Key Operations\n- OAuth/token auth and storage patterns\n- Pagination helpers (cursor/page)\n- Exponential backoff and idempotency keys\n- Structured error handling\n",
  "features": [
    "Token management patterns",
    "Pagination utilities",
    "Retry with exponential backoff",
    "Typed responses (TS)"
  ],
  "useCases": ["ETL from third-party APIs", "Backfills and migrations", "Monitoring scripts"],
  "requirements": ["Node.js 18+", "undici or axios"],
  "examples": [
    {
      "title": "Fetch all pages with backoff (TS)",
      "language": "typescript",
      "code": "import { setTimeout as delay } from 'node:timers/promises';\nimport { fetch } from 'undici';\n\nasync function fetchAll(url, token) {\n  let next = url;\n  const items = [];\n  while (next) {\n    const res = await fetch(next, { headers: { Authorization: `Bearer ${token}` } });\n    if (!res.ok) {\n      if (res.status >= 500) { await delay(1000); continue; }\n      throw new Error(`HTTP ${res.status}`);\n    }\n    const data = await res.json();\n    items.push(...data.items);\n    next = data.next;\n  }\n  return items;\n}"
    }
  ],
  "installation": {
    "claudeDesktop": { "steps": ["Install Node.js 18+", "npm i undici"] },
    "claudeCode": { "steps": ["Set env vars for tokens", "Use .netrc or keychain where possible"] }
  },
  "troubleshooting": [
    {
      "issue": "Rate limits",
      "solution": "Respect Retry-After headers and implement exponential backoff with jitter."
    }
  ],
  "documentationUrl": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",
  "source": "community"
}
