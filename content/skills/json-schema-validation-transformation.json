{
  "slug": "json-schema-validation-transformation",
  "title": "JSON Schema Validation and Transformation",
  "seoTitle": "JSON Schema Validate + Transform Skill",
  "description": "Validate JSON with Ajv/Zod and perform safe, lossless schema migrations and transformations.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-15",
  "tags": ["json", "schema", "validation", "ajv", "zod"],
  "content": "# JSON Schema Validation & Transformation Skill\n\n## What This Skill Enables\n\nClaude can validate JSON data against schemas, transform data between formats, migrate between schema versions, and generate TypeScript types from JSON schemas using tools like Ajv, Zod, and json-schema-to-typescript.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription\n- Code Interpreter feature enabled\n- JSON data or schema file uploaded\n\n**What Claude handles:**\n- Installing validation libraries (Ajv, Zod)\n- Schema compilation and validation\n- Error reporting and debugging\n- Data transformation and migration\n- Type generation from schemas\n\n## How to Use This Skill\n\n### Validate JSON Against Schema\n\n**Prompt:** \"Validate this JSON data against the provided JSON Schema. Show me all validation errors.\"\n\nClaude will:\n1. Load schema and data\n2. Compile schema\n3. Run validation\n4. Report all errors with paths\n5. Suggest fixes\n\n### Generate TypeScript Types\n\n**Prompt:** \"Generate TypeScript interfaces from this JSON Schema.\"\n\nClaude will:\n1. Parse the JSON Schema\n2. Generate TypeScript types\n3. Include JSDoc comments\n4. Export as .d.ts file\n\n### Transform Data Format\n\n**Prompt:** \"Transform this API response from format A to format B according to this mapping schema.\"\n\nClaude will:\n1. Analyze source and target schemas\n2. Create transformation logic\n3. Map fields\n4. Validate output\n5. Return transformed data\n\n### Schema Migration\n\n**Prompt:** \"Migrate these 100 JSON documents from schema v1 to schema v2. Show me the migration script and any issues.\"\n\nClaude will:\n1. Compare schema versions\n2. Identify changes\n3. Generate migration script\n4. Process all documents\n5. Report any migration failures\n\n## Common Workflows\n\n### API Payload Validation\n```\n\"Create a validation script that:\n1. Loads this OpenAPI spec\n2. Extracts the POST /users request schema\n3. Validates this payload against it\n4. Returns detailed error messages for invalid fields\n5. Suggests corrections\"\n```\n\n### Config File Validation\n```\n\"Validate all JSON config files in the uploaded directory:\n1. Check against config.schema.json\n2. Report which files are invalid\n3. For each error, show: file, path, expected type, actual value\n4. Suggest fixes for common errors\n5. Generate a validation report\"\n```\n\n### Data Normalization\n```\n\"Normalize this messy JSON data:\n1. Validate against the schema\n2. Fix common issues (trim strings, coerce types)\n3. Remove extra properties not in schema\n4. Fill in default values for missing optional fields\n5. Export clean, validated JSON\"\n```\n\n### Batch Transformation\n```\n\"Transform all JSON files from old format to new:\n1. Load transformation rules\n2. For each file:\n   - Parse and validate source\n   - Apply transformations\n   - Validate against target schema\n   - Save to output/\n3. Report success/failure stats\"\n```\n\n## Tips for Best Results\n\n1. **Provide Complete Schemas**: Include all $ref dependencies or use inline definitions\n2. **Specify Validation Rules**: Be clear about strictness (additional properties, coercion, etc.)\n3. **Error Reporting**: Ask for detailed error paths: \"Show me the JSON path for each error\"\n4. **Examples**: Provide sample valid and invalid data\n5. **Version Info**: Specify JSON Schema draft version (draft-07, 2019-09, 2020-12)\n6. **Custom Formats**: If using custom formats, define validation logic\n7. **Large Datasets**: For many files, ask Claude to process in batches\n\n## Advanced Features\n\n### Schema Generation\n- Generate schema from sample JSON\n- Infer types and patterns\n- Add validation rules\n- Export as JSON Schema or TypeScript\n\n### Complex Validations\n- Custom validation functions\n- Conditional schemas (if/then/else)\n- Dependencies between properties\n- Pattern properties\n- Recursive schemas\n\n### Data Transformation Patterns\n- Field renaming and mapping\n- Nested object flattening/nesting\n- Array transformations\n- Type coercion with validation\n- Conditional transformations\n\n## Troubleshooting\n\n**Issue:** Schema validation too strict\n**Solution:** Ask Claude to adjust: \"Allow additional properties\" or \"Coerce types when possible\"\n\n**Issue:** $ref resolution errors\n**Solution:** Either inline all schemas or ensure all referenced files are uploaded\n\n**Issue:** Type coercion not working as expected\n**Solution:** Be explicit: \"Convert string numbers to integers\" or \"Parse ISO date strings to Date objects\"\n\n**Issue:** Large JSON files cause memory issues\n**Solution:** \"Process this file in streaming mode\" or \"Validate in chunks of 1000 records\"\n\n**Issue:** Validation errors are cryptic\n**Solution:** Ask for better errors: \"Explain each validation error in plain English with examples\"\n\n**Issue:** Migration breaks data\n**Solution:** \"Validate each step of the migration\" and \"Keep backup of original values for rollback\"\n\n## Learn More\n\n- [JSON Schema Specification](https://json-schema.org/) - Official JSON Schema docs\n- [Ajv Documentation](https://ajv.js.org/) - The fastest JSON Schema validator\n- [Zod](https://zod.dev/) - TypeScript-first schema validation\n- [Understanding JSON Schema](https://json-schema.org/understanding-json-schema/) - Comprehensive guide\n- [JSON Schema Tools](https://json-schema.org/implementations.html) - Validators and generators\n",
  "features": [
    "Strict validation with helpful errors",
    "Schema-aware migration",
    "Format and ref handling",
    "CLI-friendly usage"
  ],
  "useCases": ["API payload validation", "Config migration", "Data pipeline guards"],
  "requirements": ["Node.js 18+", "ajv or zod"],
  "examples": [
    {
      "title": "Validate with Ajv",
      "language": "javascript",
      "code": "import Ajv from 'ajv';\nconst ajv = new Ajv({ allErrors: true, strict: true });\nconst validate = ajv.compile({ type: 'object', properties: { id: { type: 'string' } }, required: ['id'], additionalProperties: false });\nconsole.log(validate({ id: 'abc' })); // true\nconsole.log(validate({})); // false, see validate.errors"
    }
  ],
  "installation": {
    "claudeDesktop": { "steps": ["Install Node.js 18+", "npm i ajv zod"] },
    "claudeCode": { "steps": ["npm i ajv", "Enable strict mode for better guarantees"] }
  },
  "troubleshooting": [
    {
      "issue": "$ref resolution errors",
      "solution": "Provide absolute refs or use a loader for multi-file schemas."
    }
  ],
  "documentationUrl": "https://ajv.js.org/",
  "source": "community"
}
