{
  "slug": "markdown-knowledge-base-composer",
  "title": "Markdown Knowledge Base Composer",
  "seoTitle": "Markdown Knowledge Base Composer Skill",
  "description": "Aggregate Markdown folders into a cohesive knowledge base with TOC, cross-links, and export.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-15",
  "tags": ["markdown", "docs", "remark", "node"],
  "content": "# Markdown Knowledge Base Composer Skill\n\n## What This Skill Enables\n\nClaude can organize, process, and transform Markdown documentation into cohesive knowledge bases. Generate table of contents, fix broken links, convert formats, create static sites, and export to PDF or HTML.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription\n- Code Interpreter feature enabled\n- Markdown files uploaded (can be multiple files/folders)\n\n**What Claude handles:**\n- Installing Markdown processing tools (remark, unified, pandoc)\n- Parsing and transforming Markdown\n- Link validation and fixing\n- TOC generation\n- Format conversion (MD → HTML, PDF, DOCX)\n- Static site generation\n\n## How to Use This Skill\n\n### Generate Table of Contents\n\n**Prompt:** \"Generate a table of contents from all these Markdown files. Include links to each section.\"\n\nClaude will:\n1. Parse all Markdown files\n2. Extract headings\n3. Create hierarchical TOC\n4. Add anchor links\n5. Save as README.md or TOC.md\n\n### Fix Broken Links\n\n**Prompt:** \"Check all internal links in these Markdown files and fix any broken ones. Report what was fixed.\"\n\nClaude will:\n1. Parse all Markdown files\n2. Extract all links\n3. Validate targets exist\n4. Fix broken links\n5. Report changes made\n\n### Convert Format\n\n**Prompt:** \"Convert all these Markdown docs to a single PDF with:\n- Table of contents\n- Page numbers\n- Consistent heading styles\n- Code syntax highlighting\"\n\nClaude will:\n1. Merge Markdown files\n2. Generate TOC\n3. Apply styling\n4. Convert to PDF\n5. Export final document\n\n### Create Static Site\n\n**Prompt:** \"Generate a static HTML site from these docs:\n- Homepage with navigation\n- Responsive design\n- Search functionality\n- Dark mode toggle\"\n\nClaude will:\n1. Process Markdown to HTML\n2. Generate navigation\n3. Apply responsive CSS\n4. Add JavaScript features\n5. Create static site files\n\n## Common Workflows\n\n### Documentation Site Generation\n```\n\"Create documentation site:\n1. Parse all .md files in docs/\n2. Generate sidebar navigation\n3. Create search index\n4. Add syntax highlighting for code blocks\n5. Export as static HTML site\nUse clean, professional styling.\"\n```\n\n### Knowledge Base Consolidation\n```\n\"Consolidate scattered notes:\n1. Combine all Markdown files into sections\n2. Generate master TOC\n3. Normalize heading levels (start all at H1)\n4. Fix relative links between files\n5. Create single comprehensive document\nExport as both Markdown and PDF.\"\n```\n\n### README Generation\n```\n\"Generate professional README.md:\n1. Extract project info from package.json\n2. Add badges (build status, version, license)\n3. Create sections: About, Installation, Usage, Contributing\n4. Add table of contents with anchor links\n5. Include code examples from docs/\"\n```\n\n### Multi-Format Export\n```\n\"Export documentation in multiple formats:\n1. HTML (with navigation and search)\n2. PDF (with TOC and page numbers)\n3. EPUB (for e-readers)\n4. DOCX (for Word)\nMaintain consistent styling across all formats.\"\n```\n\n## Features & Capabilities\n\n### Markdown Processing\n- Parse frontmatter (YAML, TOML)\n- Extract and process links\n- Handle images and media\n- Process code blocks\n- Parse tables\n- Support GFM (GitHub Flavored Markdown)\n\n### Link Management\n- Validate internal links\n- Fix broken references\n- Convert relative to absolute\n- Update moved files\n- Generate anchor links\n\n### Content Organization\n- Auto-generate TOC at any level\n- Sort files by frontmatter or name\n- Create hierarchical structure\n- Merge multiple files\n- Split large files\n\n### Format Conversion\n- Markdown → HTML\n- Markdown → PDF\n- Markdown → DOCX\n- Markdown → EPUB\n- HTML → Markdown\n\n## Tips for Best Results\n\n1. **File Organization**: Upload files with clear directory structure\n2. **Frontmatter**: Use YAML frontmatter for metadata (title, date, tags)\n3. **Link Style**: Be consistent with link styles (relative vs absolute)\n4. **Heading Hierarchy**: Start with H1, don't skip levels\n5. **File Naming**: Use kebab-case or snake_case consistently\n6. **Image Paths**: Keep images in dedicated folder (./images/ or ./assets/)\n7. **Code Blocks**: Always specify language for syntax highlighting\n\n## Advanced Operations\n\n### Custom Transformations\n- Replace text patterns across all files\n- Add custom frontmatter\n- Insert headers/footers\n- Inject custom CSS/JS\n- Apply templates\n\n### Multi-Language Support\n- Organize by language (en/, es/, etc.)\n- Generate language switcher\n- Maintain translation links\n\n### Version Control\n- Track changes between versions\n- Generate changelogs\n- Compare documentation versions\n\n## Troubleshooting\n\n**Issue:** Broken links after reorganizing files\n**Solution:** \"Scan all links and update paths based on new file structure\"\n\n**Issue:** TOC not rendering correctly\n**Solution:** Ensure consistent heading hierarchy (H1 → H2 → H3, no skipping)\n\n**Issue:** Images not showing in PDF export\n**Solution:** \"Use absolute paths for images\" or \"Embed images inline as base64\"\n\n**Issue:** Code blocks losing formatting\n**Solution:** \"Preserve code block syntax highlighting in export\" and specify language\n\n**Issue:** Special characters breaking exports\n**Solution:** \"Escape special characters\" or \"Use UTF-8 encoding throughout\"\n\n**Issue:** Large files causing memory issues\n**Solution:** \"Process files in batches\" or \"Split into smaller sections first\"\n\n## Learn More\n\n- [Markdown Guide](https://www.markdownguide.org/) - Comprehensive Markdown reference\n- [Remark](https://github.com/remarkjs/remark) - Markdown processor\n- [Pandoc](https://pandoc.org/) - Universal document converter\n- [MkDocs](https://www.mkdocs.org/) - Documentation site generator\n- [VitePress](https://vitepress.dev/) - Modern documentation framework\n",
  "features": [
    "Heading normalization and slug consistency",
    "TOC generation across directories",
    "Cross-link rewriting and validation",
    "Export to static HTML/PDF"
  ],
  "useCases": [
    "Assemble a product handbook",
    "Publish internal notes",
    "Create a client-facing knowledge pack"
  ],
  "requirements": ["Node.js 18+", "remark / unified", "Playwright (optional for PDF export)"],
  "examples": [
    {
      "title": "Build TOC and rewrite links (Node)",
      "language": "javascript",
      "code": "import { readFileSync, readdirSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkStringify from 'remark-stringify';\n\nconst dir = './notes';\nconst files = readdirSync(dir).filter(f => f.endsWith('.md'));\n\nfor (const file of files) {\n  const input = readFileSync(join(dir, file), 'utf8');\n  const tree = unified().use(remarkParse).parse(input);\n  // ... transform headings and links ...\n  const out = unified().use(remarkStringify).stringify(tree);\n  // writeFileSync(join('dist', file), out)\n}"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": ["Install Node.js 18+", "npm i remark remark-parse remark-stringify"]
    },
    "claudeCode": {
      "steps": ["npm i remark unified", "Optionally install Playwright for PDF export"]
    }
  },
  "troubleshooting": [
    {
      "issue": "Broken links after re-organization",
      "solution": "Regenerate slugs and run a link validator; ensure relative paths are correct."
    },
    {
      "issue": "Remark/unified plugins throwing 'Cannot read property' errors",
      "solution": "Ensure plugin order is correct: parse → transform plugins → stringify. Check unified() pipeline sequence and plugin compatibility."
    },
    {
      "issue": "Frontmatter YAML parsing fails with special characters in values",
      "solution": "Quote YAML values containing colons, brackets, or special chars. Use remark-frontmatter with yaml-safe mode enabled."
    },
    {
      "issue": "PDF export cuts off code blocks or loses syntax highlighting",
      "solution": "Use Playwright with explicit page breaks. Install prism.js or highlight.js for code styling, set print CSS media queries."
    },
    {
      "issue": "TOC anchor links not working after Markdown-to-HTML conversion",
      "solution": "Use remark-slug to generate consistent heading IDs, then remark-toc with 'tight' option. Ensure heading hierarchy is valid."
    }
  ],
  "documentationUrl": "https://github.com/remarkjs/remark",
  "source": "community"
}
