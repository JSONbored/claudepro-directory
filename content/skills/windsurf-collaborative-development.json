{
  "slug": "windsurf-collaborative-development",
  "title": "Windsurf AI-Native Collaborative Development",
  "seoTitle": "Windsurf AI-Native Collaborative Development Skill",
  "description": "Master collaborative AI-assisted development with Windsurf IDE's Cascade AI, multi-file context awareness, and Flow patterns for team workflows.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["windsurf", "collaboration", "cascade", "ai-ide", "workflow"],
  "content": "# Windsurf AI-Native Collaborative Development Skill\n\n## What This Skill Enables\n\nClaude can guide you through Windsurf's AI-native development environment, featuring Cascade AI for context-aware multi-file operations, Flow collaboration patterns for team coordination, and intelligent code navigation. Windsurf is emerging as a powerful alternative to GitHub Copilot in 2025, with superior multi-file refactoring and real-time collaboration features.\n\n## Prerequisites\n\n**Required:**\n- Windsurf IDE installed (download from codeium.com/windsurf)\n- Active project/codebase\n- Basic understanding of your tech stack\n\n**What Claude helps you master:**\n- Cascade AI prompts for multi-file operations\n- Flow sessions for team collaboration\n- Context-aware code navigation\n- Intelligent refactoring workflows\n- AI-assisted debugging patterns\n- Code review with Cascade\n\n## How to Use This Skill\n\n### Multi-File Refactoring with Cascade\n\n**Prompt:** \"I need to refactor our authentication system from NextAuth to better-auth v1.3.9. Walk me through using Cascade AI to update all files while maintaining existing functionality.\"\n\nClaude will guide you to:\n1. Select all auth-related files in Windsurf sidebar (Cmd/Ctrl+Click)\n2. Open Cascade panel (Cmd/Ctrl+K)\n3. Use specific Cascade prompt:\n   ```\n   Refactor authentication across these files to use better-auth v1.3.9:\n   - Update lib/auth.ts to use betterAuth() instead of NextAuth()\n   - Migrate session handling to better-auth patterns\n   - Update all import statements\n   - Maintain existing OAuth providers\n   - Keep current session management logic\n   ```\n4. Review Cascade's proposed changes before applying\n5. Test authentication flow after refactoring\n\n### Flow Collaboration for Feature Development\n\n**Prompt:** \"Show me how to use Windsurf Flow to coordinate with my team on building a real-time notification system.\"\n\nClaude will explain:\n1. Create Flow session (Cmd/Ctrl+Shift+F)\n2. Define feature scope with Cascade:\n   ```\n   Implement real-time notifications using Supabase Realtime:\n   - Database schema: notifications table with RLS\n   - Server-side: Supabase client setup\n   - Hooks: useNotifications with real-time subscription\n   - UI: NotificationBell component\n   - Follow patterns in /lib/supabase and /components/ui\n   ```\n3. Cascade generates coordinated changes across multiple files\n4. Team members can review and collaborate in Flow session\n5. Apply changes with atomic commits\n\n### Context-Aware Code Navigation\n\n**Prompt:** \"Help me use Cascade to understand how error handling works across our codebase.\"\n\nClaude will demonstrate:\n1. Select a complex error handling function\n2. Right-click â†’ Ask Cascade\n3. Use prompt:\n   ```\n   Explain this error handling pattern and show me:\n   1. Where else this pattern is used\n   2. All files that import this error handler\n   3. How errors propagate to the UI layer\n   4. Any inconsistencies in error handling\n   ```\n4. Cascade provides context-aware analysis with file references\n5. Navigate to related code using Cascade's suggestions\n\n### Component Extraction with Cascade\n\n**Prompt:** \"Use Cascade to extract a reusable UserProfile component from my dashboard page.\"\n\nClaude will guide:\n1. Select the user profile section in dashboard/page.tsx\n2. Open Cascade (Cmd/Ctrl+K)\n3. Use extraction prompt:\n   ```\n   Extract user profile section into reusable component:\n   - Create components/user/profile.tsx\n   - Add TypeScript props interface\n   - Support 'compact' and 'full' variants\n   - Move styles to component\n   - Update dashboard to import and use new component\n   ```\n4. Review Cascade's component design\n5. Apply changes atomically\n\n## Tips for Best Results\n\n1. **Specific File Context**: When using Cascade, select all related files first (Cmd/Ctrl+Click in sidebar) to provide complete context for multi-file operations.\n\n2. **Structured Prompts**: Format Cascade prompts with numbered steps or bullet points for complex refactorings to get organized, sequential changes.\n\n3. **Reference Existing Patterns**: In prompts, reference specific files or patterns (\"Follow patterns in /lib/api\") to ensure consistency.\n\n4. **Atomic Operations**: Use Flow sessions for coordinated multi-file changes to maintain codebase integrity.\n\n5. **Verify Before Apply**: Always review Cascade's proposed changes before applying, especially for critical security or authentication code.\n\n6. **Leverage Type Awareness**: Windsurf's deep TypeScript integration helps Cascade understand type dependencies across files - mention \"maintain type safety\" in prompts.\n\n## Common Workflows\n\n### Complete Feature Implementation\n```\n\"Use Cascade Flow to implement user profile editing:\n1. Database: Add Prisma schema for user profiles\n2. API: Create tRPC mutations for profile updates\n3. Validation: Define Zod schemas\n4. UI: Build profile edit form with react-hook-form\n5. State: Add optimistic updates\n6. Follow our existing patterns in /lib and /components\"\n```\n\n### Security Audit with Cascade\n```\n\"Run Cascade security audit on authentication flow:\n1. Analyze all files in /lib/auth and /app/api/auth\n2. Check for OWASP Top 10 vulnerabilities\n3. Verify input validation with Zod\n4. Review session management security\n5. Identify any exposed secrets or tokens\n6. Suggest security improvements\"\n```\n\n### Codebase Modernization\n```\n\"Use Cascade to migrate from React 18 to React 19:\n1. Update package.json dependencies\n2. Migrate class components to functional components with hooks\n3. Replace deprecated lifecycle methods\n4. Update ReactDOM.render to createRoot\n5. Adopt new React 19 features (useOptimistic, useFormStatus)\n6. Update tests for new React Testing Library patterns\"\n```\n\n### Performance Optimization\n```\n\"Cascade analysis for performance optimization:\n1. Identify components causing unnecessary re-renders\n2. Suggest React.memo, useCallback, useMemo placements\n3. Find expensive operations that could use useTransition\n4. Optimize database queries in Server Components\n5. Suggest code splitting opportunities\n6. Analyze bundle size impact\"\n```\n\n## Troubleshooting\n\n**Issue:** Cascade makes changes that break type safety\n**Solution:** In your prompt, explicitly state \"maintain strict TypeScript type safety\" and \"verify all type definitions are updated.\" Review changes before applying.\n\n**Issue:** Cascade doesn't understand project-specific patterns\n**Solution:** Reference specific files in your prompt: \"Follow the API pattern in /lib/api/base.ts\" to teach Cascade your conventions.\n\n**Issue:** Flow sessions become too large and slow\n**Solution:** Break large features into smaller Flow sessions focused on specific layers (database, API, UI) rather than entire features at once.\n\n**Issue:** Cascade refactorings miss edge cases\n**Solution:** After Cascade applies changes, ask: \"Review the refactoring for edge cases, error handling, and boundary conditions. Suggest tests to verify correctness.\"\n\n**Issue:** Team members can't see Flow changes\n**Solution:** Ensure Flow session is properly shared (check session permissions) and all team members have latest Windsurf version installed.\n\n## Learn More\n\n- [Windsurf Documentation](https://docs.codeium.com/windsurf)\n- [Cascade AI Guide](https://docs.codeium.com/windsurf/cascade)\n- [Flow Collaboration Patterns](https://docs.codeium.com/windsurf/flow)\n- [Windsurf vs Cursor Comparison](https://codeium.com/compare/windsurf-cursor)\n- [AI-Native Development Best Practices](https://docs.codeium.com/windsurf/best-practices)\n",
  "features": [
    "Cascade AI for multi-file context-aware operations",
    "Flow sessions for team collaboration",
    "Intelligent code navigation with AI assistance",
    "Automated refactoring workflows",
    "Real-time collaborative coding",
    "Deep TypeScript and project context understanding"
  ],
  "useCases": [
    "Multi-file refactoring and migrations",
    "Team-based feature development",
    "Codebase understanding and navigation",
    "Automated code reviews and quality checks"
  ],
  "requirements": [
    "Windsurf IDE installed",
    "Active project/codebase",
    "Git repository (recommended)"
  ],
  "examples": [
    {
      "title": "Multi-File Authentication Refactoring",
      "language": "typescript",
      "code": "// Cascade Prompt Example:\n// \"Refactor authentication to use better-auth v1.3.9 across these files:\n//  - lib/auth.ts\n//  - app/api/auth/[...auth]/route.ts\n//  - components/login-form.tsx\n//  Maintain all existing OAuth providers and session logic.\"\n\n// Before: lib/auth.ts (NextAuth)\nimport NextAuth from 'next-auth';\nimport { authOptions } from './options';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth(authOptions);\n\n// After: lib/auth.ts (better-auth) - Generated by Cascade\nimport { betterAuth } from 'better-auth';\nimport { prismaAdapter } from 'better-auth/adapters/prisma';\nimport { prisma } from '@/lib/db';\n\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, { provider: 'postgresql' }),\n  emailAndPassword: { enabled: true },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    },\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    },\n  },\n});\n\nexport const { signIn, signOut } = auth;"
    },
    {
      "title": "Component Extraction with Cascade",
      "language": "typescript",
      "code": "// Cascade Prompt:\n// \"Extract user profile section into components/user/profile.tsx\n//  with variants support and proper TypeScript types.\"\n\n// After: components/user/profile.tsx - Generated by Cascade\nimport type { User } from '@/types/user';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface UserProfileProps {\n  user: User;\n  variant?: 'compact' | 'full';\n}\n\nexport function UserProfile({ user, variant = 'full' }: UserProfileProps) {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <Avatar className={variant === 'compact' ? 'h-8 w-8' : 'h-16 w-16'}>\n        <AvatarImage src={user.avatar} alt={user.name} />\n        <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n      </Avatar>\n      <div>\n        <h3 className={variant === 'compact' ? 'text-sm font-medium' : 'text-lg font-semibold'}>\n          {user.name}\n        </h3>\n        {variant === 'full' && (\n          <>\n            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n            {user.bio && <p className=\"mt-2 text-sm\">{user.bio}</p>}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Updated dashboard usage:\nimport { UserProfile } from '@/components/user/profile';\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  return (\n    <div>\n      <UserProfile user={user} variant=\"full\" />\n    </div>\n  );\n}"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Download Windsurf IDE from codeium.com/windsurf",
        "Install and open your project",
        "Learn Cascade shortcuts: Cmd/Ctrl+K for prompts",
        "Ask Claude for Cascade prompt examples for your tasks"
      ]
    },
    "claudeCode": {
      "steps": [
        "Install Windsurf IDE",
        "Open project in Windsurf",
        "Practice with Cascade on small refactorings first",
        "Use Flow for team collaboration features"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "Cascade doesn't understand project patterns",
      "solution": "Reference specific files in prompts: 'Follow patterns in /lib/api/base.ts' to teach Cascade your conventions."
    },
    {
      "issue": "Type errors after Cascade refactoring",
      "solution": "Always include 'maintain strict TypeScript type safety' in prompts and review changes before applying."
    },
    {
      "issue": "Flow session changes not visible to team",
      "solution": "Verify session permissions and ensure all team members have latest Windsurf version."
    }
  ],
  "documentationUrl": "https://docs.codeium.com/windsurf",
  "source": "community"
}
