{
  "slug": "bun-runtime-modern-javascript",
  "title": "Bun Runtime Modern JavaScript",
  "seoTitle": "Bun JavaScript Runtime Development Skill",
  "description": "Build high-performance JavaScript applications with Bun, the all-in-one runtime challenging Node.js. Native TypeScript support, built-in bundler, and 3x faster package installs.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-23",
  "tags": ["bun", "runtime", "javascript", "typescript", "performance"],
  "discoveryMetadata": {
    "researchDate": "2025-10-23",
    "trendingSources": [
      {
        "source": "dev_to_javascript_trends",
        "evidence": "Bun gaining popularity, challenging Node.js for edge computing scenarios. Mentioned alongside Deno as modern runtime alternative",
        "url": "https://dev.to/michaelwiley9999/staying-ahead-in-javascript-whats-trending-in-2025-4fb4",
        "relevanceScore": "high"
      },
      {
        "source": "javascript_trends_2025",
        "evidence": "Deno and Bun gaining traction for performance and modern features, enabling edge computing scenarios by 2025",
        "url": "https://www.oliant.io/articles/javascript-trends-predictions-2025",
        "relevanceScore": "high"
      }
    ],
    "keywordResearch": {
      "primaryKeywords": [
        "bun runtime",
        "bun vs node",
        "bun javascript",
        "fast javascript runtime"
      ],
      "searchVolume": "medium",
      "competitionLevel": "low"
    },
    "gapAnalysis": {
      "existingContent": ["cloudflare-workers-ai-edge"],
      "identifiedGap": "No modern JavaScript runtime skills exist. Cloudflare Workers skill is platform-specific, not runtime-focused. Bun is the fastest-growing alternative to Node.js in 2025 with all-in-one approach (runtime + bundler + test runner + package manager). Zero coverage of Node.js alternatives despite Bun's proven performance advantages and growing ecosystem adoption.",
      "priority": "high"
    },
    "approvalRationale": "Bun identified as gaining popularity alongside Deno in JavaScript Trends 2025 reports, specifically for edge computing and performance scenarios. No existing runtime skills despite this being fundamental infrastructure choice. Bun's all-in-one approach (runtime + bundler + package manager) represents significant shift in JavaScript tooling. User approved October 23, 2025."
  },
  "content": "# Bun Runtime Modern JavaScript Skill\n\n## What This Skill Enables\n\nClaude can build and deploy JavaScript/TypeScript applications using Bun, the all-in-one JavaScript runtime that's 3x faster than Node.js for package installs and startup time. Bun includes a native bundler, test runner, package manager, and TypeScript transpiler in a single binary. From APIs to CLIs to build tools, Bun provides drop-in Node.js compatibility with modern performance.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription or Claude Code CLI\n- macOS, Linux, or WSL (Windows support in beta)\n- curl or wget for installation\n- Basic JavaScript/TypeScript knowledge\n\n**What Claude handles automatically:**\n- Writing Bun-optimized server code\n- Configuring bun:test for testing\n- Setting up Bun.serve() for HTTP servers\n- Using Bun.build() for bundling\n- Implementing file operations with Bun.file()\n- Adding WebSocket support\n- Configuring environment variables\n- Optimizing for Bun's performance characteristics\n\n## How to Use This Skill\n\n### High-Performance HTTP Server\n\n**Prompt:** \"Create Bun HTTP server with: REST API routes, JSON parsing, CORS middleware, static file serving, WebSocket support, and error handling. Optimize for maximum req/sec.\"\n\nClaude will:\n1. Use Bun.serve() with fetch handler\n2. Implement routing with URL patterns\n3. Add CORS headers\n4. Serve static files with Bun.file()\n5. Set up WebSocket upgrade\n6. Handle errors gracefully\n7. Benchmark with wrk/autocannon\n\n### CLI Tool Development\n\n**Prompt:** \"Build CLI tool with Bun for: file processing, progress bars, colored output, interactive prompts, and parallel operations. Package as standalone binary.\"\n\nClaude will:\n1. Parse args with Bun.argv\n2. Use chalk for colors\n3. Add ora for spinners\n4. Implement inquirer prompts\n5. Process files with Bun.file()\n6. Use Bun.spawn() for parallel\n7. Build executable with bun build\n\n### Database Operations\n\n**Prompt:** \"Create Bun app with SQLite using bun:sqlite. Include: connection pooling, prepared statements, migrations, and query builder pattern.\"\n\nClaude will:\n1. Use bun:sqlite module\n2. Set up connection pool\n3. Create prepared statements\n4. Implement migration system\n5. Build query builder\n6. Add transaction support\n7. Handle errors and cleanup\n\n### Testing with Bun\n\n**Prompt:** \"Set up Bun testing for API with: unit tests, integration tests, mocking, coverage reporting, and parallel execution.\"\n\nClaude will:\n1. Write tests with bun:test\n2. Use expect assertions\n3. Mock with spyOn\n4. Configure coverage\n5. Run tests in parallel\n6. Add before/after hooks\n7. Test HTTP endpoints\n\n## Tips for Best Results\n\n1. **Use Bun APIs**: Prefer `Bun.file()` over `fs`, `Bun.serve()` over http module. Bun's APIs are optimized and simpler.\n\n2. **Native TypeScript**: No need for ts-node or build step. Bun runs TypeScript natively. Use .ts extensions directly.\n\n3. **Built-in Bundler**: Use `bun build` instead of webpack/esbuild. Single-command bundling with tree-shaking.\n\n4. **Fast Package Manager**: Run `bun install` instead of npm/pnpm. Uses global cache and parallel downloads.\n\n5. **WebSocket Native**: Bun.serve() includes WebSocket upgrade. No need for ws or socket.io for simple cases.\n\n## Common Workflows\n\n### REST API Backend\n```\n\"Build production REST API with Bun:\n1. HTTP server with Bun.serve() and routing\n2. JWT authentication middleware\n3. Database with bun:sqlite or Postgres\n4. Request validation with Zod\n5. Rate limiting with in-memory store\n6. File uploads with Bun.file()\n7. WebSocket for real-time updates\n8. Docker deployment with bun:alpine\"\n```\n\n### Build Tool Development\n```\n\"Create build tool with Bun:\n1. File watching with Bun.watch()\n2. Bundling with Bun.build()\n3. TypeScript transpilation (automatic)\n4. Minification and tree-shaking\n5. Source maps generation\n6. Plugin system for transforms\n7. Parallel file processing\n8. Cache invalidation\"\n```\n\n### Microservices Infrastructure\n```\n\"Build microservices with Bun:\n1. Service discovery with etcd\n2. gRPC communication\n3. Health checks endpoint\n4. Metrics collection\n5. Structured logging\n6. Graceful shutdown\n7. Docker containers\n8. Kubernetes deployment\"\n```\n\n## Troubleshooting\n\n**Issue:** \"Node.js package not working in Bun\"\n**Solution:** Check Bun compatibility at bun.sh/docs. Most npm packages work. For native modules, ensure Bun version supports Node-API. Use --bun flag or check package.json engines field.\n\n**Issue:** \"Performance not better than Node.js\"\n**Solution:** Ensure using Bun APIs (Bun.serve not http). Check CPU-bound vs I/O-bound. Bun excels at I/O. Profile with bun:jsc. Verify using latest Bun version.\n\n**Issue:** \"TypeScript types not working\"\n**Solution:** Install @types packages with bun add -d. Check bunfig.toml has correct compilerOptions. Use bun-types for Bun APIs. Restart editor/LSP.\n\n## Learn More\n\n- [Bun Official Documentation](https://bun.sh/docs)\n- [Bun GitHub Repository](https://github.com/oven-sh/bun)\n- [Bun Discord Community](https://bun.sh/discord)\n- [Awesome Bun Resources](https://github.com/apvarun/awesome-bun)\n",
  "features": [
    "3x faster package installs with global cache",
    "Native TypeScript support without transpilation",
    "Built-in bundler, test runner, and package manager",
    "Drop-in Node.js compatibility for most packages"
  ],
  "useCases": [
    "High-performance HTTP servers with Bun.serve()",
    "CLI tools with fast startup times",
    "Build tools with native bundling"
  ],
  "requirements": ["Bun 1.0+", "macOS/Linux/WSL"],
  "examples": [
    {
      "title": "HTTP Server with Routing",
      "language": "typescript",
      "code": "const server = Bun.serve({\n  port: 3000,\n  async fetch(req) {\n    const url = new URL(req.url);\n    \n    // Route handling\n    if (url.pathname === '/') {\n      return new Response('Hello from Bun!');\n    }\n    \n    if (url.pathname === '/api/users') {\n      const users = await getUsers();\n      return Response.json(users);\n    }\n    \n    // Static file serving\n    if (url.pathname.startsWith('/static/')) {\n      const file = Bun.file(`.${url.pathname}`);\n      return new Response(file);\n    }\n    \n    return new Response('Not Found', { status: 404 });\n  },\n});\n\nconsole.log(`Listening on http://localhost:${server.port}`);"
    },
    {
      "title": "SQLite Database Operations",
      "language": "typescript",
      "code": "import { Database } from 'bun:sqlite';\n\nconst db = new Database('mydb.sqlite');\n\n// Create table\ndb.run(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n  )\n`);\n\n// Prepared statement for insertion\nconst insert = db.prepare('INSERT INTO users (name, email) VALUES (?, ?)');\ninsert.run('Alice', 'alice@example.com');\n\n// Query with prepared statement\nconst query = db.prepare('SELECT * FROM users WHERE id = ?');\nconst user = query.get(1);\n\nconsole.log(user);\n\n// Transaction\nconst insertMany = db.transaction((users) => {\n  for (const user of users) {\n    insert.run(user.name, user.email);\n  }\n});\n\ninsertMany([\n  { name: 'Bob', email: 'bob@example.com' },\n  { name: 'Charlie', email: 'charlie@example.com' },\n]);\n\ndb.close();"
    },
    {
      "title": "Testing with bun:test",
      "language": "typescript",
      "code": "import { expect, test, describe, beforeAll, afterAll } from 'bun:test';\n\ndescribe('Math operations', () => {\n  test('addition', () => {\n    expect(1 + 1).toBe(2);\n  });\n  \n  test('subtraction', () => {\n    expect(5 - 3).toBe(2);\n  });\n});\n\ndescribe('API tests', () => {\n  let server;\n  \n  beforeAll(() => {\n    server = Bun.serve({ port: 3001, fetch: () => new Response('OK') });\n  });\n  \n  afterAll(() => {\n    server.stop();\n  });\n  \n  test('server responds', async () => {\n    const res = await fetch('http://localhost:3001');\n    expect(res.status).toBe(200);\n    expect(await res.text()).toBe('OK');\n  });\n});\n\n// Run with: bun test"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": [
        "Install Bun: curl -fsSL https://bun.sh/install | bash",
        "Verify: bun --version",
        "Ask Claude: 'Create Bun server for [your use case]'",
        "Run with: bun run server.ts"
      ]
    },
    "claudeCode": {
      "steps": [
        "curl -fsSL https://bun.sh/install | bash",
        "bun init (creates package.json)",
        "bun add <packages> for dependencies",
        "bun run --watch server.ts for dev mode"
      ]
    }
  },
  "troubleshooting": [
    {
      "issue": "npm package not compatible",
      "solution": "Check bun.sh/docs for compatibility. Most packages work. For native modules, verify Bun version supports Node-API. Try --bun flag or update package."
    },
    {
      "issue": "Performance not improved over Node",
      "solution": "Use Bun APIs (Bun.serve not http module). Bun excels at I/O-bound tasks. Profile with bun:jsc. Verify latest Bun version installed."
    },
    {
      "issue": "TypeScript types missing",
      "solution": "Install @types packages: bun add -d @types/node. Add bun-types for Bun APIs. Check bunfig.toml compilerOptions. Restart LSP."
    }
  ],
  "documentationUrl": "https://bun.sh/docs",
  "source": "community"
}
