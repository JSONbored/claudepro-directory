{
  "slug": "image-ocr-table-extraction",
  "title": "Image OCR and Table Extraction",
  "seoTitle": "Image OCR + Table Extraction Skill",
  "description": "Extract text and tabular data from images/scans using Tesseract and OpenCV with preprocessing.",
  "category": "skills",
  "author": "JSONbored",
  "dateAdded": "2025-10-15",
  "tags": ["ocr", "image", "pytesseract", "opencv", "tables"],
  "content": "# Image OCR & Table Extraction Skill\n\n## What This Skill Enables\n\nClaude can extract text and tables from images, screenshots, scanned documents, and PDFs using OCR (Optical Character Recognition). Convert images of receipts, invoices, forms, and tables into editable text and structured data.\n\n## Prerequisites\n\n**Required:**\n- Claude Pro subscription\n- Code Interpreter feature enabled\n- Image file uploaded (PNG, JPG, PDF with images)\n\n**What Claude handles:**\n- Installing Tesseract OCR and vision libraries\n- Image preprocessing and enhancement\n- Text recognition and layout analysis\n- Table structure detection\n- Data extraction and formatting\n\n## How to Use This Skill\n\n### Basic Text Extraction\n\n**Prompt:** \"Extract all text from this screenshot and give me the content as plain text.\"\n\nClaude will:\n1. Preprocess the image\n2. Run OCR\n3. Extract text with layout preservation\n4. Return formatted text\n\n### Table Extraction\n\n**Prompt:** \"Extract the table from this image and export it as CSV.\"\n\nClaude will:\n1. Detect table boundaries\n2. Identify rows and columns\n3. Extract cell contents\n4. Structure as tabular data\n5. Export as CSV\n\n### Form Data Extraction\n\n**Prompt:** \"Extract data from this invoice image:\n- Invoice number\n- Date\n- Vendor name\n- Line items (description, quantity, price)\n- Total amount\nFormat as JSON.\"\n\nClaude will:\n1. OCR the entire image\n2. Identify fields by labels\n3. Extract values\n4. Structure as JSON\n5. Validate data format\n\n### Receipt Processing\n\n**Prompt:** \"Process this receipt image and extract:\n- Merchant name\n- Date and time\n- All item names and prices\n- Subtotal, tax, total\nCreate a structured expense record.\"\n\nClaude will:\n1. OCR the receipt\n2. Parse line items\n3. Extract financial data\n4. Calculate totals\n5. Format as structured data\n\n## Common Workflows\n\n### Batch Invoice Processing\n```\n\"Process all invoice images I upload and:\n1. Extract: invoice #, date, vendor, total\n2. Create a master spreadsheet with all invoices\n3. Flag any invoices where OCR confidence is low\n4. Export as invoices_data.csv\"\n```\n\n### Screenshot Text Recovery\n```\n\"Extract all code from this screenshot of a terminal:\n1. Recognize monospace text accurately\n2. Preserve indentation\n3. Clean up any OCR artifacts\n4. Save as code.py\"\n```\n\n### Business Card Digitization\n```\n\"Extract contact information from this business card:\n1. Name\n2. Title/Position\n3. Company\n4. Email\n5. Phone\n6. Address\nFormat as vCard or CSV for import to contacts.\"\n```\n\n### Table from PDF Extraction\n```\n\"This PDF contains a table that I can't copy/paste properly:\n1. Extract the table using OCR\n2. Recognize the column headers\n3. Parse all rows\n4. Handle multi-line cells\n5. Export as clean CSV\"\n```\n\n## Tips for Best Results\n\n1. **Image Quality Matters**: Higher resolution, clear contrast, straight orientation = better OCR\n2. **Preprocessing**: Ask Claude to enhance/preprocess low-quality images first\n3. **Language**: Specify if text isn't in English (\"OCR this German document...\")\n4. **Table Complexity**: For complex tables, describe the structure (\"5 columns, headers in first row\")\n5. **Multiple Pages**: Upload one page at a time for best results, or ask Claude to process sequentially\n6. **Handwriting**: Note that OCR works best on printed text; handwriting recognition is limited\n7. **Confidence Thresholds**: Ask Claude to report OCR confidence scores for verification\n\n## Image Quality Enhancements\n\n### Preprocessing Options\n- Rotate/deskew images\n- Increase contrast\n- Remove noise and artifacts\n- Binarization (convert to black/white)\n- Upscale low-resolution images\n- Crop to region of interest\n\n### Common Issues Claude Can Fix\n- Skewed/rotated images\n- Low contrast\n- Background noise\n- Poor lighting\n- Watermarks (some removal possible)\n\n## Advanced Extraction\n\n### Multi-Column Layouts\n- Newspaper-style columns\n- Magazine layouts\n- Academic papers\n- Forms with complex layouts\n\n### Special Document Types\n- Passports and IDs\n- Medical forms\n- Financial statements\n- Legal documents\n- Shipping labels\n\n## Troubleshooting\n\n**Issue:** OCR results are garbled or inaccurate\n**Solution:** Ask Claude to preprocess the image first: \"Enhance this image (increase contrast, deskew) and then run OCR\"\n\n**Issue:** Table structure not recognized properly\n**Solution:** Describe the table: \"This is a 4-column table with headers in row 1. Extract it as CSV.\"\n\n**Issue:** Numbers recognized as letters (0 as O, 1 as I)\n**Solution:** Tell Claude what type of data to expect: \"Extract invoice number (numeric only) and date\"\n\n**Issue:** Multi-page document results are mixed up\n**Solution:** Process pages individually: \"Extract text from page 1 only\" then \"Now page 2\"\n\n**Issue:** Handwriting not recognized\n**Solution:** OCR works best on printed text. For handwriting, describe it: \"This is handwritten notes, do your best to extract text\"\n\n**Issue:** Foreign language not recognized\n**Solution:** Specify language explicitly: \"OCR this Japanese document using Japanese language model\"\n\n## Learn More\n\n- [Tesseract OCR](https://github.com/tesseract-ocr/tesseract) - Open-source OCR engine\n- [pytesseract Documentation](https://pypi.org/project/pytesseract/) - Python wrapper for Tesseract\n- [OpenCV for Image Processing](https://opencv.org/) - Image preprocessing techniques\n- [Table Detection Methods](https://nanonets.com/blog/table-extraction-deep-learning/) - How table extraction works\n- [Claude Vision Capabilities](https://www.anthropic.com/news/claude-3-family) - Claude's image understanding\n",
  "features": [
    "OpenCV preprocessing recipes",
    "Pytesseract OCR with language packs",
    "Export tables to CSV/JSON",
    "Confidence-aware extraction"
  ],
  "useCases": [
    "Digitize receipts and invoices",
    "Extract tables from scans",
    "Searchable archives"
  ],
  "requirements": [
    "Python 3.11+",
    "opencv-python",
    "pytesseract",
    "tesseract-ocr binary with language data"
  ],
  "examples": [
    {
      "title": "OCR with preprocessing (Python)",
      "language": "python",
      "code": "import cv2, pytesseract\nimg = cv2.imread('scan.png', cv2.IMREAD_GRAYSCALE)\nimg = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]\ntext = pytesseract.image_to_string(img, lang='eng')\nprint(text[:300])"
    }
  ],
  "installation": {
    "claudeDesktop": {
      "steps": ["Install tesseract-ocr", "pip install opencv-python pytesseract"]
    },
    "claudeCode": { "steps": ["Verify TESSDATA_PREFIX", "Install language packs as needed"] }
  },
  "troubleshooting": [
    {
      "issue": "Garbled or incorrect text from low-contrast scans",
      "solution": "Apply OpenCV adaptive thresholding with cv2.THRESH_BINARY + cv2.THRESH_OTSU, or increase DPI via resampling before OCR."
    },
    {
      "issue": "TesseractNotFoundError when running pytesseract",
      "solution": "Install Tesseract OCR binary separately: apt-get install tesseract-ocr or brew install tesseract, then set path if needed."
    },
    {
      "issue": "OCR returns empty string for valid image with text",
      "solution": "Check image preprocessing: convert to grayscale, apply binarization, ensure correct page segmentation mode (--psm) parameter."
    },
    {
      "issue": "Numbers confused with letters (0 vs O, 1 vs l)",
      "solution": "Use config='--psm 6 --oem 3 -c tessedit_char_whitelist=0123456789' to restrict character set for numeric-only fields."
    },
    {
      "issue": "Non-English text recognition fails or returns gibberish",
      "solution": "Install language data with apt-get install tesseract-ocr-[lang] or brew install tesseract-lang, then use lang='fra' parameter."
    }
  ],
  "documentationUrl": "https://tesseract-ocr.github.io/",
  "source": "community"
}
