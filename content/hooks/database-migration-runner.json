{
  "slug": "database-migration-runner",
  "description": "Automated database migration management with rollback capabilities, validation, and multi-environment support",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-16",
  "tags": ["database", "migration", "automation", "deployment", "sql"],
  "hookType": "PostToolUse",
  "features": [
    "Automated database migration detection and execution",
    "Support for multiple database systems (PostgreSQL, MySQL, SQLite)",
    "Safe rollback capabilities with validation",
    "Migration file integrity checking with checksums",
    "Environment-specific migration configurations",
    "CI/CD pipeline integration"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/database-migration-runner.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if it's a migration-related file\nif [[ \"$FILE_PATH\" == *migration* ]] || [[ \"$FILE_PATH\" == *schema* ]] || [[ \"$FILE_PATH\" == *.sql ]]; then\n  echo \"🗃️ Database migration file detected: $FILE_PATH\" >&2\n  \n  # Check for common migration frameworks\n  if [ -f \"package.json\" ] && (grep -q \"knex\" package.json || grep -q \"sequelize\" package.json || grep -q \"typeorm\" package.json); then\n    echo \"📦 Node.js migration framework detected\" >&2\n    \n    # Knex migrations\n    if command -v npx &> /dev/null && npx knex --version &> /dev/null 2>&1; then\n      echo \"🔧 Running Knex migration status check...\" >&2\n      MIGRATION_STATUS=$(npx knex migrate:status 2>/dev/null || echo \"No pending migrations\")\n      echo \"📊 Migration Status: $MIGRATION_STATUS\" >&2\n      \n      # Check for pending migrations\n      if echo \"$MIGRATION_STATUS\" | grep -q \"pending\"; then\n        echo \"⚠️ Pending migrations detected. Run 'npx knex migrate:latest' to apply them\" >&2\n      else\n        echo \"✅ All migrations are up to date\" >&2\n      fi\n      \n    # Sequelize migrations\n    elif command -v npx &> /dev/null && npx sequelize-cli --version &> /dev/null 2>&1; then\n      echo \"🔧 Sequelize CLI detected\" >&2\n      echo \"💡 Run 'npx sequelize-cli db:migrate:status' to check migration status\" >&2\n      \n    # TypeORM migrations\n    elif command -v npx &> /dev/null && npx typeorm --version &> /dev/null 2>&1; then\n      echo \"🔧 TypeORM detected\" >&2\n      echo \"💡 Run 'npx typeorm migration:show' to check migration status\" >&2\n    fi\n    \n  # Django migrations\n  elif [ -f \"manage.py\" ]; then\n    echo \"🐍 Django project detected\" >&2\n    if command -v python &> /dev/null; then\n      echo \"🔧 Checking Django migration status...\" >&2\n      python manage.py showmigrations --plan 2>/dev/null | tail -5 | head -3 || echo \"💡 Run 'python manage.py showmigrations' to check status\" >&2\n    fi\n    \n  # Rails migrations\n  elif [ -f \"Gemfile\" ] && grep -q \"rails\" Gemfile; then\n    echo \"💎 Rails project detected\" >&2\n    if command -v bundle &> /dev/null; then\n      echo \"🔧 Checking Rails migration status...\" >&2\n      bundle exec rails db:migrate:status 2>/dev/null | tail -5 || echo \"💡 Run 'rails db:migrate:status' to check status\" >&2\n    fi\n    \n  # Raw SQL files\n  elif [[ \"$FILE_PATH\" == *.sql ]]; then\n    echo \"📜 Raw SQL migration file detected\" >&2\n    \n    # Check file size and complexity\n    if [ -f \"$FILE_PATH\" ]; then\n      LINE_COUNT=$(wc -l < \"$FILE_PATH\" 2>/dev/null || echo \"0\")\n      echo \"📊 SQL file contains $LINE_COUNT lines\" >&2\n      \n      # Check for potentially destructive operations\n      if grep -i \"DROP\\|DELETE\\|TRUNCATE\" \"$FILE_PATH\" >/dev/null 2>&1; then\n        echo \"⚠️ WARNING: Potentially destructive SQL operations detected (DROP/DELETE/TRUNCATE)\" >&2\n        echo \"💡 Consider creating a backup before executing this migration\" >&2\n      fi\n      \n      # Check for common patterns\n      if grep -i \"CREATE TABLE\\|ALTER TABLE\\|CREATE INDEX\" \"$FILE_PATH\" >/dev/null 2>&1; then\n        echo \"🏗️ Schema modification statements detected\" >&2\n      fi\n      \n      if grep -i \"INSERT\\|UPDATE\" \"$FILE_PATH\" >/dev/null 2>&1; then\n        echo \"📝 Data modification statements detected\" >&2\n      fi\n    fi\n  fi\n  \n  # General migration best practices reminder\n  echo \"📋 Migration Best Practices:\" >&2\n  echo \"   • Always backup database before running migrations\" >&2\n  echo \"   • Test migrations on development/staging first\" >&2\n  echo \"   • Ensure migrations are reversible when possible\" >&2\n  echo \"   • Use transactions for atomic operations\" >&2\n  \nelse\n  echo \"File $FILE_PATH is not a migration file, skipping analysis\" >&2\nfi\n\nexit 0"
  },
  "useCases": [
    "Automated database schema evolution in development workflows",
    "CI/CD pipeline integration for deployment migrations",
    "Multi-environment database synchronization",
    "Migration validation and rollback safety",
    "Database versioning and change tracking"
  ],
  "documentationUrl": "https://knexjs.org/guide/migrations.html",
  "source": "community"
}
