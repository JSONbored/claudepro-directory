{
  "slug": "security-scanner-hook",
  "description": "Automated security vulnerability scanning that integrates with development workflow to detect and prevent security issues before deployment",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-16",
  "tags": ["security", "vulnerability", "scanning", "automation", "compliance"],
  "hookType": "PostToolUse",
  "features": [
    "Comprehensive security vulnerability scanning",
    "Static code analysis with multiple SAST tools",
    "Dependency vulnerability detection",
    "Secrets and credential scanning",
    "Container security analysis",
    "OWASP Top 10 compliance checking",
    "Automated remediation suggestions",
    "Integration with CI/CD pipelines"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/security-scanner-hook.sh",
          "matchers": ["write", "edit", "multiedit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\necho \"🔒 Running security scans on $FILE_PATH...\"\n\n# Secrets detection\necho \"Scanning for secrets...\"\nif command -v truffleHog &> /dev/null; then\n  truffleHog --regex --entropy=False \"$FILE_PATH\" 2>/dev/null\n  if [ $? -ne 0 ]; then\n    echo \"⚠️ Potential secrets detected in $FILE_PATH\" >&2\n  fi\nfi\n\n# Static analysis with Semgrep\nif command -v semgrep &> /dev/null; then\n  echo \"Running static security analysis...\"\n  semgrep --config=auto \"$FILE_PATH\" 2>/dev/null\n  if [ $? -eq 0 ]; then\n    echo \"✅ No security issues found with Semgrep\" >&2\n  else\n    echo \"⚠️ Security issues detected with Semgrep\" >&2\n  fi\nfi\n\n# Language-specific security checks\nEXT=\"${FILE_PATH##*.}\"\ncase \"$EXT\" in\n  js|jsx|ts|tsx)\n    # Node.js security audit\n    if [ -f \"package.json\" ] && command -v npm &> /dev/null; then\n      echo \"Running npm audit...\"\n      npm audit --audit-level=moderate 2>/dev/null || echo \"⚠️ Vulnerabilities found in dependencies\" >&2\n    fi\n    ;;\n  py)\n    # Python security checks\n    if command -v bandit &> /dev/null; then\n      echo \"Running Bandit security scan...\"\n      bandit \"$FILE_PATH\" 2>/dev/null || echo \"⚠️ Security issues detected with Bandit\" >&2\n    fi\n    ;;\n  go)\n    # Go security checks\n    if command -v gosec &> /dev/null; then\n      echo \"Running gosec security scan...\"\n      gosec \"$FILE_PATH\" 2>/dev/null || echo \"⚠️ Security issues detected with gosec\" >&2\n    fi\n    ;;\nesac\n\necho \"✅ Security scan completed for $FILE_PATH\" >&2\nexit 0"
  },
  "useCases": [
    "Automated security testing in CI/CD pipelines",
    "Pre-commit security validation",
    "Continuous security monitoring during development",
    "OWASP compliance checking",
    "Dependency vulnerability tracking",
    "Secrets and credential leak prevention"
  ],
  "documentationUrl": "https://owasp.org/www-project-top-ten/",
  "troubleshooting": [
    {
      "issue": "truffleHog reports false positives on test data and mock credentials",
      "solution": "Entropy detection flags dummy data. Create .trufflehogignore: add patterns like 'test/**' or '**/fixtures/*'. Or use --exclude: 'truffleHog --exclude test/ --regex' filtering paths."
    },
    {
      "issue": "Semgrep download/install hangs during first hook execution",
      "solution": "Hook waits for semgrep auto-install timing out. Pre-install: 'pip install semgrep' or 'brew install semgrep'. Add timeout: 'timeout 30 semgrep --config=auto' preventing indefinite hangs."
    },
    {
      "issue": "npm audit returns non-zero exit code failing hook on dev dependencies",
      "solution": "Audit treats dev warnings as errors. Filter severity: 'npm audit --audit-level=high --production' ignoring dev deps. Or suppress exit: 'npm audit || echo \"Vulnerabilities logged\"'."
    },
    {
      "issue": "Bandit scans entire project instead of modified FILE_PATH",
      "solution": "Command targets single file but imports scan. Add --skip-imports: 'bandit \"$FILE_PATH\" -ll --skip B404' focusing on direct code. Or scope: 'bandit -r $(dirname \"$FILE_PATH\")' directory-level."
    },
    {
      "issue": "Security scans add 30+ seconds to every file save operation",
      "solution": "Sequential scans without caching. Run async: append '&' to each scan, wait at end. Or cache: 'if [ \"$(stat -c %Y \"$FILE_PATH\")\" -lt 60 ]; then exit; fi' skipping recent scans."
    }
  ],
  "source": "community"
}
