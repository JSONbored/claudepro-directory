{
  "title": "Security Scanner Hook",
  "description": "Automated security vulnerability scanning that integrates with development workflow to detect and prevent security issues before deployment",
  "category": "hooks",
  "author": "shadowbook",
  "dateAdded": "2025-09-16",
  "tags": [
    "security",
    "vulnerability",
    "scanning",
    "automation",
    "compliance"
  ],
  "content": "The Security Scanner Hook provides comprehensive automated security analysis with real-time vulnerability detection and remediation suggestions.\n\n## Core Security Features\n\n### Vulnerability Scanning\n- **Static Code Analysis** - Detect security flaws in source code\n- **Dependency Scanning** - Check for vulnerable dependencies\n- **Container Scanning** - Analyze Docker images for security issues\n- **Infrastructure Scanning** - Validate cloud and infrastructure configurations\n- **Secrets Detection** - Find hardcoded secrets and credentials\n\n### Compliance Checking\n- **OWASP Top 10** - Validate against common web vulnerabilities\n- **CIS Benchmarks** - Check against security configuration standards\n- **PCI DSS** - Payment card industry compliance validation\n- **SOC 2** - Service organization control requirements\n- **GDPR** - Data privacy and protection compliance\n\n### Security Tools Integration\n- **SAST Tools**: SonarQube, CodeQL, Semgrep, Bandit\n- **DAST Tools**: OWASP ZAP, Burp Suite, Nikto\n- **SCA Tools**: Snyk, WhiteSource, Black Duck\n- **Container Security**: Trivy, Clair, Aqua Security\n- **Cloud Security**: Prowler, Scout Suite, CloudSploit\n\n## Configuration\n\n### Basic Setup\n```json\n{\n  \"securityScanner\": {\n    \"enabled\": true,\n    \"scanLevel\": \"medium\",\n    \"blockOnCritical\": true,\n    \"blockOnHigh\": false,\n    \"autoFix\": false\n  },\n  \"triggers\": {\n    \"onCommit\": true,\n    \"onPullRequest\": true,\n    \"onDeploy\": true,\n    \"scheduled\": \"daily\"\n  },\n  \"scanTypes\": {\n    \"static\": true,\n    \"dependencies\": true,\n    \"secrets\": true,\n    \"containers\": true,\n    \"infrastructure\": false\n  }\n}\n```\n\n### Advanced Configuration\n```json\n{\n  \"securityScanner\": {\n    \"tools\": {\n      \"semgrep\": {\n        \"enabled\": true,\n        \"configPath\": \".semgrep.yml\",\n        \"rules\": [\"auto\", \"security\", \"owasp-top-10\"]\n      },\n      \"snyk\": {\n        \"enabled\": true,\n        \"severity\": [\"high\", \"critical\"],\n        \"ignoreFile\": \".snyk\"\n      },\n      \"trivy\": {\n        \"enabled\": true,\n        \"scanners\": [\"vuln\", \"secret\", \"config\"]\n      }\n    },\n    \"reporting\": {\n      \"format\": [\"json\", \"sarif\", \"html\"],\n      \"outputDir\": \"security-reports\",\n      \"uploadToDefectDojo\": true\n    },\n    \"compliance\": {\n      \"frameworks\": [\"owasp-top-10\", \"cis\", \"pci-dss\"],\n      \"severity\": \"medium\",\n      \"generateReport\": true\n    }\n  }\n}\n```\n\n## Security Scan Types\n\n### Static Application Security Testing (SAST)\n```javascript\n// Example security issues detected\n\n// SQL Injection vulnerability\nfunction getUserData(userId) {\n  // ❌ Vulnerable code\n  const query = `SELECT * FROM users WHERE id = ${userId}`;\n  return database.query(query);\n  \n  // ✅ Secure alternative\n  const query = 'SELECT * FROM users WHERE id = ?';\n  return database.query(query, [userId]);\n}\n\n// XSS vulnerability\nfunction renderUserContent(content) {\n  // ❌ Vulnerable code\n  document.innerHTML = content;\n  \n  // ✅ Secure alternative\n  document.textContent = content;\n  // or use a sanitization library\n  document.innerHTML = DOMPurify.sanitize(content);\n}\n\n// Insecure cryptography\nfunction hashPassword(password) {\n  // ❌ Vulnerable code\n  return crypto.createHash('md5').update(password).digest('hex');\n  \n  // ✅ Secure alternative\n  const salt = crypto.randomBytes(16);\n  return crypto.pbkdf2Sync(password, salt, 100000, 64, 'sha512');\n}\n```\n\n### Dependency Vulnerability Scanning\n```json\n// Example vulnerability report\n{\n  \"vulnerabilities\": [\n    {\n      \"package\": \"lodash\",\n      \"version\": \"4.17.15\",\n      \"severity\": \"high\",\n      \"cve\": \"CVE-2020-8203\",\n      \"title\": \"Prototype Pollution\",\n      \"description\": \"lodash is vulnerable to prototype pollution\",\n      \"patchedVersions\": [\">=4.17.19\"],\n      \"recommendation\": \"Upgrade to lodash@4.17.19 or later\"\n    },\n    {\n      \"package\": \"express\",\n      \"version\": \"4.16.0\",\n      \"severity\": \"medium\",\n      \"cve\": \"CVE-2022-24999\",\n      \"title\": \"qs Prototype Pollution\",\n      \"description\": \"Express.js is vulnerable via qs dependency\",\n      \"patchedVersions\": [\">=4.17.3\"],\n      \"recommendation\": \"Upgrade to express@4.17.3 or later\"\n    }\n  ]\n}\n```\n\n### Secrets Detection\n```bash\n# Example secrets detected in code\n\n# ❌ Hardcoded API keys\nconst API_KEY = \"sk-1234567890abcdef\";\nconst DATABASE_URL = \"mongodb://admin:password123@localhost:27017/db\";\n\n# ❌ AWS credentials\nAWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n\n# ❌ JWT secrets\nJWT_SECRET=\"my-super-secret-key-123\"\n\n# ✅ Secure alternatives\nconst API_KEY = process.env.API_KEY;\nconst DATABASE_URL = process.env.DATABASE_URL;\nconst JWT_SECRET = process.env.JWT_SECRET;\n```\n\n### Container Security Scanning\n```dockerfile\n# Dockerfile security issues detected\n\n# ❌ Security issues\nFROM ubuntu:latest\nRUN apt-get update\nUSER root\nEXPOSE 22\nCOPY --chown=root:root app.js /app/\n\n# ✅ Secure version\nFROM ubuntu:22.04\nRUN apt-get update && apt-get upgrade -y && apt-get clean\nRUN useradd -m appuser\nUSER appuser\nEXPOSE 3000\nCOPY --chown=appuser:appuser app.js /app/\nHEALTHCHECK --interval=30s --timeout=3s CMD curl -f http://localhost:3000/health\n```\n\n## Security Scanning Workflow\n\n### Pre-commit Scanning\n```bash\n#!/bin/bash\n# .git/hooks/pre-commit\n\necho \"🔒 Running security scans...\"\n\n# Secrets detection\necho \"Scanning for secrets...\"\ntruffleHog --regex --entropy=False .\nif [ $? -ne 0 ]; then\n  echo \"❌ Secrets detected! Please remove before committing.\"\n  exit 1\nfi\n\n# Static analysis\necho \"Running static security analysis...\"\nsemgrep --config=auto --error\nif [ $? -ne 0 ]; then\n  echo \"❌ Security vulnerabilities detected!\"\n  exit 1\nfi\n\n# Dependency check\necho \"Checking dependencies...\"\nnpm audit --audit-level=high\nif [ $? -ne 0 ]; then\n  echo \"❌ High-severity vulnerabilities in dependencies!\"\n  echo \"Run 'npm audit fix' to resolve.\"\n  exit 1\nfi\n\necho \"✅ Security scans passed!\"\n```\n\n### CI/CD Pipeline Integration\n```yaml\n# GitHub Actions example\nname: Security Scan\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Run Semgrep\n      uses: returntocorp/semgrep-action@v1\n      with:\n        config: auto\n        \n    - name: Run Snyk\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n        \n    - name: Run Trivy\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n        \n    - name: Upload results to GitHub Security\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n```\n\n## Automated Remediation\n\n### Dependency Updates\n```javascript\n// Automated dependency update script\nconst { exec } = require('child_process');\nconst semver = require('semver');\n\nclass SecurityAutoFixer {\n  async fixVulnerabilities() {\n    const auditResult = await this.runAudit();\n    const fixableVulns = this.getFixableVulnerabilities(auditResult);\n    \n    for (const vuln of fixableVulns) {\n      if (vuln.severity === 'critical' || vuln.severity === 'high') {\n        await this.applyFix(vuln);\n      }\n    }\n  }\n  \n  async applyFix(vulnerability) {\n    const { package, currentVersion, patchedVersion } = vulnerability;\n    \n    // Check if update is safe (no breaking changes)\n    if (semver.satisfies(patchedVersion, `^${currentVersion}`)) {\n      console.log(`Updating ${package} from ${currentVersion} to ${patchedVersion}`);\n      await this.updatePackage(package, patchedVersion);\n    } else {\n      console.log(`Manual review required for ${package} update`);\n      await this.createPullRequest(vulnerability);\n    }\n  }\n}\n```\n\n### Code Fixes\n```javascript\n// Automated code security fixes\nconst fixes = {\n  // Fix SQL injection\n  'sql-injection': (code) => {\n    return code.replace(\n      /database\\.query\\(`(.+?)\\$\\{(.+?)\\}`\\)/g,\n      \"database.query('$1?', [$2])\"\n    );\n  },\n  \n  // Fix XSS vulnerabilities\n  'xss-vulnerability': (code) => {\n    return code.replace(\n      /\\.innerHTML\\s*=\\s*(.+)/g,\n      '.textContent = $1'\n    );\n  },\n  \n  // Fix insecure random\n  'insecure-random': (code) => {\n    return code.replace(\n      /Math\\.random\\(\\)/g,\n      'crypto.randomBytes(4).readUInt32BE(0) / 0x100000000'\n    );\n  }\n};\n```\n\n## Reporting & Monitoring\n\n### Security Dashboard\n```javascript\nconst securityMetrics = {\n  vulnerabilities: {\n    critical: 0,\n    high: 2,\n    medium: 5,\n    low: 12\n  },\n  compliance: {\n    'owasp-top-10': 'passing',\n    'cis-benchmarks': 'warning',\n    'pci-dss': 'passing'\n  },\n  trends: {\n    vulnerabilitiesFixed: 15,\n    newVulnerabilities: 3,\n    securityScore: 8.7\n  }\n};\n```\n\n### Integration with Security Tools\n```javascript\n// DefectDojo integration\nconst defectDojoClient = {\n  async uploadResults(scanResults) {\n    const formData = new FormData();\n    formData.append('file', scanResults);\n    formData.append('scan_type', 'Semgrep JSON Report');\n    formData.append('engagement', this.engagementId);\n    \n    return fetch(`${this.baseUrl}/api/v2/import-scan/`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Token ${this.apiKey}`\n      },\n      body: formData\n    });\n  }\n};\n\n// Slack notifications\nconst securityAlert = {\n  channel: '#security-alerts',\n  text: '🚨 Critical Security Vulnerability Detected',\n  blocks: [\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: '*SQL Injection vulnerability found in user authentication*'\n      }\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: '*Severity:* Critical'\n        },\n        {\n          type: 'mrkdwn',\n          text: '*File:* auth/login.js:42'\n        }\n      ]\n    },\n    {\n      type: 'actions',\n      elements: [\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: 'View Details'\n          },\n          url: 'https://security-dashboard.example.com/vuln/123'\n        }\n      ]\n    }\n  ]\n};\n```",
  "configuration": {
    "temperature": 0.2,
    "maxTokens": 8000,
    "systemPrompt": "You are a security expert focused on automated vulnerability detection and remediation in software development"
  },
  "githubUrl": "https://github.com/claudepro/security-scanner-hook",
  "documentationUrl": "https://docs.claude.ai/hooks/security-scanner",
  "source": "community"
}
