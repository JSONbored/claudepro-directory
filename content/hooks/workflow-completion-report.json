{
  "slug": "workflow-completion-report",
  "description": "Generates a comprehensive report when Claude Code workflow stops, including files modified, tests run, and git status",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["reporting", "workflow", "analytics", "summary", "stop-hook"],
  "hookType": "Stop",
  "features": [
    "Comprehensive workflow completion summary",
    "Detailed file modification tracking",
    "Git status and change analysis",
    "Test execution and coverage reporting",
    "Performance metrics and timing analysis",
    "Session archival and historical tracking"
  ],
  "useCases": [
    "Generate detailed session completion reports",
    "Track development productivity and progress",
    "Document code changes and modifications",
    "Analyze test coverage and quality metrics",
    "Create historical record of workflow sessions",
    "Monitor development velocity and patterns",
    "Generate reports for team review and analysis",
    "Archive session data for project documentation"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "stop": {
          "script": "./.claude/hooks/workflow-completion-report.sh",
          "matchers": ["*"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\necho \"📊 ═══════════════════════════════════════════════════\"\necho \"🎯 WORKFLOW COMPLETION REPORT\"\necho \"📅 Session Completed: $(date)\"\necho \"═══════════════════════════════════════════════════\"\n\n# Session metadata\nSESSION_ID=\"session-$(date +%Y%m%d_%H%M%S)\"\nCOMPLETION_TIME=$(date)\nSTART_TIME=\"unknown\"\nUSER=$(whoami 2>/dev/null || echo \"developer\")\nHOST=$(hostname 2>/dev/null || echo \"unknown\")\nWORKDIR=$(pwd)\nPROJECT_NAME=$(basename \"$WORKDIR\" 2>/dev/null || echo \"project\")\n\necho \"🏷️ Session Info:\"\necho \"  • Session ID: $SESSION_ID\"\necho \"  • Project: $PROJECT_NAME\"\necho \"  • User: $USER@$HOST\"\necho \"  • Directory: $WORKDIR\"\n\n# Attempt to determine session duration\nif [ -d \".claude\" ] && [ \"$(find .claude -type f 2>/dev/null | wc -l)\" -gt 0 ]; then\n    START_TIMESTAMP=$(stat -f %B .claude/*.log 2>/dev/null | sort | head -1 || date +%s)\n    END_TIMESTAMP=$(date +%s)\n    DURATION=$((END_TIMESTAMP - START_TIMESTAMP))\n    HOURS=$((DURATION / 3600))\n    MINUTES=$(((DURATION % 3600) / 60))\n    echo \"  • Duration: ${HOURS}h ${MINUTES}m\"\nelse\n    echo \"  • Duration: Unknown (no .claude directory)\"\nfi\n\necho \"\"\necho \"📁 File System Analysis:\"\necho \"═══════════════════════════\"\n\n# Git analysis\nif git rev-parse --git-dir >/dev/null 2>&1; then\n    echo \"📊 Git Repository Status:\"\n    \n    BRANCH=$(git branch --show-current 2>/dev/null || echo \"unknown\")\n    echo \"  • Current branch: $BRANCH\"\n    \n    # Count modified files\n    MODIFIED_FILES=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')\n    echo \"  • Modified files: $MODIFIED_FILES\"\n    \n    # Show file status breakdown\n    if [ \"$MODIFIED_FILES\" -gt 0 ]; then\n        echo \"  • File status breakdown:\"\n        git status --porcelain 2>/dev/null | cut -c1-2 | sort | uniq -c | while read -r count status; do\n            case \"$status\" in\n                \"M \"*) echo \"    - Modified: $count files\" ;;\n                \"A \"*) echo \"    - Added: $count files\" ;;\n                \"D \"*) echo \"    - Deleted: $count files\" ;;\n                \"??\"*) echo \"    - Untracked: $count files\" ;;\n                *) echo \"    - Other ($status): $count files\" ;;\n            esac\n        done\n    fi\n    \n    # Diff statistics\n    DIFF_STATS=$(git diff --stat 2>/dev/null)\n    if [ -n \"$DIFF_STATS\" ]; then\n        echo \"  • Changes summary:\"\n        echo \"$DIFF_STATS\" | tail -1 | sed 's/^/    /' 2>/dev/null || echo \"    No statistics available\"\n    fi\n    \n    # List modified files (top 10)\n    if [ \"$MODIFIED_FILES\" -gt 0 ]; then\n        echo \"  • Modified files (top 10):\"\n        git status --porcelain 2>/dev/null | head -10 | while read -r status file; do\n            echo \"    - $file ($status)\"\n        done\n    fi\n    \n    # Recent commits\n    echo \"  • Recent commits:\"\n    git log --oneline -3 2>/dev/null | sed 's/^/    /' || echo \"    No recent commits\"\n    \nelse\n    echo \"❓ Not a git repository\"\n    echo \"  • Analyzing file system changes...\"\n    \n    # Alternative: look for recently modified files\n    echo \"  • Recently modified files (last 2 hours):\"\n    find . -type f -newermt '2 hours ago' 2>/dev/null | head -10 | while read -r file; do\n        echo \"    - $file\"\n    done\nfi\n\necho \"\"\necho \"🧪 Testing & Quality Analysis:\"\necho \"═══════════════════════════════\"\n\n# Test framework detection and analysis\nTEST_FRAMEWORK=\"none\"\nTEST_COUNT=0\n\nif [ -f \"package.json\" ]; then\n    echo \"📦 Node.js Project Analysis:\"\n    \n    # Detect test framework\n    if grep -q '\"jest\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"jest\"\n        echo \"  • Testing framework: Jest\"\n    elif grep -q '\"vitest\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"vitest\"\n        echo \"  • Testing framework: Vitest\"\n    elif grep -q '\"mocha\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"mocha\"\n        echo \"  • Testing framework: Mocha\"\n    else\n        echo \"  • Testing framework: Not detected\"\n    fi\n    \n    # Count test files\n    TEST_COUNT=$(find . -name \"*.test.*\" -o -name \"*.spec.*\" | grep -v node_modules | wc -l | tr -d ' ')\n    echo \"  • Test files found: $TEST_COUNT\"\n    \n    # Dependencies analysis\n    DEPS_COUNT=$(jq -r '.dependencies // {} | keys | length' package.json 2>/dev/null || echo \"unknown\")\n    DEV_DEPS_COUNT=$(jq -r '.devDependencies // {} | keys | length' package.json 2>/dev/null || echo \"unknown\")\n    echo \"  • Dependencies: $DEPS_COUNT production, $DEV_DEPS_COUNT development\"\n    \n    # Check for outdated packages\n    echo \"  • Checking for outdated packages...\"\n    OUTDATED_COUNT=$(npm outdated 2>/dev/null | tail -n +2 | wc -l | tr -d ' ')\n    if [ \"$OUTDATED_COUNT\" -gt 0 ]; then\n        echo \"    - $OUTDATED_COUNT packages have updates available\"\n    else\n        echo \"    - All packages are up to date\"\n    fi\n    \nelif [ -f \"requirements.txt\" ] || [ -f \"setup.py\" ] || [ -f \"pyproject.toml\" ]; then\n    echo \"🐍 Python Project Analysis:\"\n    \n    if command -v pytest >/dev/null 2>&1; then\n        TEST_FRAMEWORK=\"pytest\"\n        echo \"  • Testing framework: pytest\"\n        TEST_COUNT=$(find . -name \"test_*.py\" -o -name \"*_test.py\" | wc -l | tr -d ' ')\n    else\n        echo \"  • Testing framework: unittest (built-in)\"\n        TEST_COUNT=$(find . -name \"test*.py\" | wc -l | tr -d ' ')\n    fi\n    echo \"  • Test files found: $TEST_COUNT\"\n    \nelif [ -f \"Cargo.toml\" ]; then\n    echo \"🦀 Rust Project Analysis:\"\n    echo \"  • Testing framework: Built-in (cargo test)\"\n    TEST_COUNT=$(find . -name \"*.rs\" -exec grep -l \"#\\[test\\]\" {} \\; | wc -l | tr -d ' ')\n    echo \"  • Files with tests: $TEST_COUNT\"\n    \nelse\n    echo \"❓ Project type not recognized\"\nfi\n\n# Performance and metrics\necho \"\"\necho \"📈 Performance & Metrics:\"\necho \"═══════════════════════════\"\n\n# Code complexity analysis (basic)\nif [ \"$TEST_COUNT\" -gt 0 ]; then\n    echo \"✅ Test Coverage Status:\"\n    echo \"  • Test files available: $TEST_COUNT\"\n    echo \"  • Testing framework: $TEST_FRAMEWORK\"\nelse\n    echo \"⚠️ No test files detected\"\nfi\n\n# File type analysis\necho \"📊 Codebase Composition:\"\nfor ext in js ts jsx tsx py rs go java c cpp; do\n    count=$(find . -name \"*.$ext\" | grep -v node_modules | wc -l | tr -d ' ')\n    if [ \"$count\" -gt 0 ]; then\n        echo \"  • .$ext files: $count\"\n    fi\ndone\n\n# Lines of code estimation\nTOTAL_LOC=$(find . -type f \\( -name \"*.js\" -o -name \"*.ts\" -o -name \"*.jsx\" -o -name \"*.tsx\" -o -name \"*.py\" -o -name \"*.rs\" -o -name \"*.go\" \\) | grep -v node_modules | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo \"unknown\")\necho \"  • Estimated lines of code: $TOTAL_LOC\"\n\n# Session archival\necho \"\"\necho \"💾 Session Archival:\"\necho \"═══════════════════\"\n\n# Create session report file\nREPORT_FILE=\".claude-reports/$SESSION_ID.log\"\nmkdir -p .claude-reports\n\ncat > \"$REPORT_FILE\" << EOF\nCLAUDE CODE WORKFLOW COMPLETION REPORT\n======================================\n\nSession ID: $SESSION_ID\nCompleted: $COMPLETION_TIME\nProject: $PROJECT_NAME\nUser: $USER@$HOST\nDirectory: $WORKDIR\n\nFILE CHANGES:\n$(git status --porcelain 2>/dev/null || echo \"Not a git repository\")\n\nDIFF STATISTICS:\n$(git diff --stat 2>/dev/null || echo \"No git changes\")\n\nTEST STATUS:\n- Framework: $TEST_FRAMEWORK\n- Test files: $TEST_COUNT\n\nPROJECT METRICS:\n- Total LOC (estimated): $TOTAL_LOC\n- Modified files: $MODIFIED_FILES\n\nEOF\n\necho \"📄 Session report saved: $REPORT_FILE\"\necho \"📁 Report directory: .claude-reports/\"\n\n# Cleanup old reports (keep last 30)\nfind .claude-reports -name \"session-*.log\" | sort | head -n -30 | xargs rm -f 2>/dev/null\n\necho \"\"\necho \"💡 Workflow Summary:\"\necho \"═══════════════════\"\necho \"  • Session completed successfully\"\necho \"  • Files modified: $MODIFIED_FILES\"\necho \"  • Test files available: $TEST_COUNT\"\necho \"  • Project type: $([ -f package.json ] && echo 'Node.js' || [ -f requirements.txt ] && echo 'Python' || [ -f Cargo.toml ] && echo 'Rust' || echo 'Unknown')\"\necho \"  • Git repository: $([ -d .git ] && echo 'Yes' || echo 'No')\"\n\necho \"\"\necho \"🎯 Next Steps:\"\necho \"  • Review all changes before committing\"\necho \"  • Run tests to ensure code quality\"\necho \"  • Update documentation if needed\"\necho \"  • Consider code review for significant changes\"\n\necho \"\"\necho \"📊 ═══════════════════════════════════════════════════\"\necho \"🎉 Workflow completion report generated successfully!\"\necho \"📋 Full report available at: $REPORT_FILE\"\necho \"═══════════════════════════════════════════════════\"\n\nexit 0"
  },
  "source": "community"
}
