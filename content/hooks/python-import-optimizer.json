{
  "slug": "python-import-optimizer",
  "description": "Automatically sorts and optimizes Python imports using isort when Python files are modified",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["python", "imports", "formatting", "optimization", "isort"],
  "hookType": "PostToolUse",
  "features": [
    "Automatic import sorting with isort",
    "PEP 8 compliant import organization",
    "Unused import removal",
    "Black profile compatibility",
    "Import grouping by type",
    "Code formatting integration"
  ],
  "useCases": [
    "Organize Python imports according to PEP 8 standards",
    "Remove unused imports automatically",
    "Group imports by type (standard library, third-party, local)",
    "Maintain consistent import formatting across projects",
    "Integrate with Black code formatter",
    "Clean up import statements in Python files",
    "Ensure import consistency in team projects",
    "Optimize Python file organization"
  ],
  "configuration": {
    "hookConfig": {
      "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Python file\nif [[ \"$FILE_PATH\" == *.py ]]; then\n    echo \"üêç Python Import Optimizer - Processing Python file...\"\n    echo \"üìÑ File: $FILE_PATH\"\n    \n    # Check if file exists\n    if [ ! -f \"$FILE_PATH\" ]; then\n        echo \"‚ö†Ô∏è File not found: $FILE_PATH\"\n        exit 1\n    fi\n    \n    # Step 1: Sort imports with isort\n    echo \"üìã Sorting imports with isort...\"\n    if command -v isort >/dev/null 2>&1; then\n        if isort \"$FILE_PATH\" --profile black --line-length 88 --check-only --diff; then\n            echo \"‚úÖ Imports are already sorted\"\n        else\n            echo \"üîÑ Sorting imports...\"\n            isort \"$FILE_PATH\" --profile black --line-length 88\n            echo \"‚úÖ Imports sorted successfully\"\n        fi\n    else\n        echo \"‚ö†Ô∏è isort not found. Install with: pip install isort\"\n    fi\n    \n    # Step 2: Remove unused imports with autoflake (optional)\n    echo \"üßπ Removing unused imports...\"\n    if command -v autoflake >/dev/null 2>&1; then\n        # Check for unused imports first\n        if autoflake --check \"$FILE_PATH\" --remove-unused-variables --remove-all-unused-imports; then\n            echo \"‚úÖ No unused imports found\"\n        else\n            echo \"üîÑ Removing unused imports...\"\n            autoflake --in-place \"$FILE_PATH\" --remove-unused-variables --remove-all-unused-imports\n            echo \"‚úÖ Unused imports removed\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è autoflake not found (optional). Install with: pip install autoflake\"\n    fi\n    \n    # Step 3: Additional import analysis\n    echo \"üîç Analyzing import structure...\"\n    \n    # Count different types of imports\n    STDLIB_IMPORTS=$(grep -c \"^import \\(os\\|sys\\|re\\|json\\|datetime\\|collections\\|itertools\\|functools\\|pathlib\\)\" \"$FILE_PATH\" 2>/dev/null || echo 0)\n    THIRD_PARTY_IMPORTS=$(grep -c \"^\\(import\\|from\\) \\(numpy\\|pandas\\|requests\\|flask\\|django\\|fastapi\\)\" \"$FILE_PATH\" 2>/dev/null || echo 0)\n    RELATIVE_IMPORTS=$(grep -c \"^from \\.[.]*\" \"$FILE_PATH\" 2>/dev/null || echo 0)\n    \n    echo \"üìä Import Summary:\"\n    echo \"  ‚Ä¢ Standard Library: $STDLIB_IMPORTS\"\n    echo \"  ‚Ä¢ Third Party: $THIRD_PARTY_IMPORTS\"\n    echo \"  ‚Ä¢ Relative: $RELATIVE_IMPORTS\"\n    \n    # Check for potential issues\n    if grep -q \"^import \\*\" \"$FILE_PATH\" 2>/dev/null; then\n        echo \"‚ö†Ô∏è Warning: Star imports detected (import *) - consider specific imports\"\n    fi\n    \n    if [ \"$(grep -c '^import\\|^from' \"$FILE_PATH\" 2>/dev/null || echo 0)\" -gt 20 ]; then\n        echo \"üí° Tip: Consider grouping related imports or using a package structure\"\n    fi\n    \n    echo \"\"\n    echo \"üí° Python Import Tips:\"\n    echo \"  ‚Ä¢ Use absolute imports when possible\"\n    echo \"  ‚Ä¢ Group imports: stdlib, third-party, local\"\n    echo \"  ‚Ä¢ Avoid star imports (import *)\"\n    echo \"  ‚Ä¢ Use 'from module import specific_function' for clarity\"\n    \n    echo \"\"\n    echo \"üéØ Python import optimization complete!\"\n    \nelse\n    echo \"‚ÑπÔ∏è File is not a Python file: $FILE_PATH\"\nfi\n\nexit 0",
      "hooks": {
        "PostToolUse": [
          {
            "matchers": ["write", "edit"],
            "description": "Sort and optimize Python imports when Python files are modified"
          }
        ]
      }
    }
  },
  "source": "community"
}
