{
  "slug": "vue-composition-api-linter",
  "description": "Lints Vue 3 components for Composition API best practices and common issues",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "vue",
    "vue3",
    "composition-api",
    "linting",
    "best-practices"
  ],
  "hookType": "PostToolUse",
  "features": [
    "Vue 3 Composition API best practices validation",
    "Script setup syntax analysis and optimization",
    "Reactivity pattern checking (ref, reactive, computed)",
    "Lifecycle hook usage validation",
    "TypeScript support with vue-tsc integration",
    "Performance optimization suggestions"
  ],
  "useCases": [
    "Ensure proper Composition API usage in Vue 3 components",
    "Validate reactivity patterns and data flow",
    "Check for performance issues and optimization opportunities",
    "Enforce consistent component structure and practices",
    "Detect common Vue 3 migration issues",
    "Validate TypeScript usage in Vue components",
    "Ensure proper lifecycle hook implementation",
    "Maintain code quality across Vue application"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/vue-composition-api-linter.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Vue component file\nif [[ \"$FILE_PATH\" == *.vue ]]; then\n    echo \"‚ú® Vue Composition API Linter - Analyzing Vue component...\"\n    echo \"üìÑ Component: $FILE_PATH\"\n    \n    # Check if file exists\n    if [ ! -f \"$FILE_PATH\" ]; then\n        echo \"‚ö†Ô∏è Vue component file not found: $FILE_PATH\"\n        exit 1\n    fi\n    \n    # Detect Vue version and project setup\n    VUE_VERSION=\"unknown\"\n    PROJECT_TYPE=\"vue\"\n    \n    if [ -f \"package.json\" ]; then\n        if grep -q '\"vue\".*\"^3\\.' package.json 2>/dev/null; then\n            VUE_VERSION=\"3\"\n            echo \"üéØ Vue 3 project detected\"\n        elif grep -q '\"vue\".*\"^2\\.' package.json 2>/dev/null; then\n            VUE_VERSION=\"2\"\n            echo \"‚ö†Ô∏è Vue 2 project detected - Composition API available with @vue/composition-api\"\n        fi\n        \n        # Check for Nuxt\n        if grep -q '\"nuxt\"' package.json 2>/dev/null; then\n            PROJECT_TYPE=\"nuxt\"\n            echo \"üöÄ Nuxt project detected\"\n        fi\n        \n        # Check for Vite\n        if grep -q '\"vite\"' package.json 2>/dev/null; then\n            echo \"‚ö° Vite build system detected\"\n        fi\n    fi\n    \n    # Component structure analysis\n    echo \"\"\n    echo \"üîç Analyzing component structure...\"\n    \n    # Check for script setup\n    SCRIPT_SETUP=false\n    if grep -q '<script setup' \"$FILE_PATH\" 2>/dev/null; then\n        SCRIPT_SETUP=true\n        echo \"‚úÖ Script setup syntax detected\"\n        \n        # Check for TypeScript\n        if grep -q '<script setup lang=\"ts\">' \"$FILE_PATH\" 2>/dev/null; then\n            echo \"üìò TypeScript script setup detected\"\n        fi\n    elif grep -q '<script>' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"‚ÑπÔ∏è Traditional script syntax detected\"\n        echo \"üí° Consider migrating to <script setup> for better performance\"\n    fi\n    \n    # Check for template\n    if grep -q '<template>' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"‚úÖ Template block found\"\n    fi\n    \n    # Check for styles\n    if grep -q '<style' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"‚úÖ Style block found\"\n        \n        if grep -q '<style scoped' \"$FILE_PATH\" 2>/dev/null; then\n            echo \"üéØ Scoped styles detected\"\n        fi\n        \n        if grep -q 'lang=\"scss\"\\|lang=\"sass\"\\|lang=\"less\"' \"$FILE_PATH\" 2>/dev/null; then\n            echo \"üé® CSS preprocessor detected\"\n        fi\n    fi\n    \n    # Composition API analysis\n    echo \"\"\n    echo \"üîç Composition API Analysis:\"\n    \n    # Check for Composition API imports and usage\n    COMPOSABLES_USED=()\n    \n    if grep -q 'ref(' \"$FILE_PATH\" 2>/dev/null; then\n        REF_COUNT=$(grep -c 'ref(' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        echo \"  ‚Ä¢ ref() usage: $REF_COUNT instances\"\n        COMPOSABLES_USED+=(\"ref\")\n    fi\n    \n    if grep -q 'reactive(' \"$FILE_PATH\" 2>/dev/null; then\n        REACTIVE_COUNT=$(grep -c 'reactive(' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        echo \"  ‚Ä¢ reactive() usage: $REACTIVE_COUNT instances\"\n        COMPOSABLES_USED+=(\"reactive\")\n    fi\n    \n    if grep -q 'computed(' \"$FILE_PATH\" 2>/dev/null; then\n        COMPUTED_COUNT=$(grep -c 'computed(' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        echo \"  ‚Ä¢ computed() usage: $COMPUTED_COUNT instances\"\n        COMPOSABLES_USED+=(\"computed\")\n    fi\n    \n    if grep -q 'watch(' \"$FILE_PATH\" 2>/dev/null; then\n        WATCH_COUNT=$(grep -c 'watch(' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        echo \"  ‚Ä¢ watch() usage: $WATCH_COUNT instances\"\n        COMPOSABLES_USED+=(\"watch\")\n    fi\n    \n    if grep -q 'watchEffect(' \"$FILE_PATH\" 2>/dev/null; then\n        WATCH_EFFECT_COUNT=$(grep -c 'watchEffect(' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        echo \"  ‚Ä¢ watchEffect() usage: $WATCH_EFFECT_COUNT instances\"\n        COMPOSABLES_USED+=(\"watchEffect\")\n    fi\n    \n    # Lifecycle hooks\n    LIFECYCLE_HOOKS=(\"onMounted\" \"onUpdated\" \"onUnmounted\" \"onBeforeMount\" \"onBeforeUpdate\" \"onBeforeUnmount\")\n    for hook in \"${LIFECYCLE_HOOKS[@]}\"; do\n        if grep -q \"$hook(\" \"$FILE_PATH\" 2>/dev/null; then\n            echo \"  ‚Ä¢ üîÑ $hook lifecycle hook detected\"\n        fi\n    done\n    \n    # Props and emits analysis\n    if grep -q 'defineProps' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ üì• defineProps() detected\"\n    fi\n    \n    if grep -q 'defineEmits' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ üì§ defineEmits() detected\"\n    fi\n    \n    if grep -q 'defineExpose' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ üîó defineExpose() detected\"\n    fi\n    \n    # ESLint analysis\n    echo \"\"\n    echo \"üîç Running ESLint analysis...\"\n    \n    ESLINT_AVAILABLE=false\n    if command -v npx >/dev/null 2>&1 && npx eslint --version >/dev/null 2>&1; then\n        ESLINT_AVAILABLE=true\n        \n        # Try Vue-specific ESLint config first\n        if [ -f \".eslintrc.vue.js\" ] || [ -f \".eslintrc.js\" ] && grep -q 'vue' .eslintrc.js 2>/dev/null; then\n            echo \"üìã Running ESLint with Vue configuration...\"\n            if npx eslint \"$FILE_PATH\" --ext .vue 2>/dev/null; then\n                echo \"‚úÖ ESLint analysis passed\"\n            else\n                echo \"‚ö†Ô∏è ESLint found issues - review output above\"\n            fi\n        else\n            echo \"‚ö†Ô∏è No Vue-specific ESLint configuration found\"\n            echo \"üí° Install: npm install --save-dev eslint @vue/eslint-config-typescript\"\n        fi\n    else\n        echo \"‚ö†Ô∏è ESLint not available - install with: npm install --save-dev eslint\"\n    fi\n    \n    # Type checking with vue-tsc\n    echo \"\"\n    echo \"üìò TypeScript Analysis:\"\n    \n    if grep -q 'lang=\"ts\"' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"üîç TypeScript component detected\"\n        \n        if command -v npx >/dev/null 2>&1 && npx vue-tsc --version >/dev/null 2>&1; then\n            echo \"üîç Running vue-tsc type checking...\"\n            if npx vue-tsc --noEmit 2>/dev/null; then\n                echo \"‚úÖ TypeScript type checking passed\"\n            else\n                echo \"‚ö†Ô∏è TypeScript type errors detected\"\n            fi\n        else\n            echo \"‚ö†Ô∏è vue-tsc not available - install with: npm install --save-dev vue-tsc\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è JavaScript component - consider TypeScript for better type safety\"\n    fi\n    \n    # Best practices analysis\n    echo \"\"\n    echo \"üí° Best Practices Analysis:\"\n    \n    # Check for common issues\n    ISSUES_FOUND=0\n    \n    if grep -q 'this\\.' \"$FILE_PATH\" 2>/dev/null && [ \"$SCRIPT_SETUP\" = true ]; then\n        echo \"  ‚Ä¢ ‚ö†Ô∏è 'this' usage detected in script setup - use direct variable access\"\n        ISSUES_FOUND=$((ISSUES_FOUND + 1))\n    fi\n    \n    if grep -q 'reactive(' \"$FILE_PATH\" 2>/dev/null && grep -q 'ref(' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ üí° Both ref() and reactive() used - ensure consistent patterns\"\n    fi\n    \n    if ! grep -q 'const.*=' \"$FILE_PATH\" 2>/dev/null && [ \"${#COMPOSABLES_USED[@]}\" -gt 0 ]; then\n        echo \"  ‚Ä¢ üí° Consider using const for reactive declarations\"\n    fi\n    \n    if grep -q 'v-for.*:key' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ ‚úÖ v-for with :key detected - good practice\"\n    elif grep -q 'v-for' \"$FILE_PATH\" 2>/dev/null; then\n        echo \"  ‚Ä¢ ‚ö†Ô∏è v-for without :key detected - add unique keys\"\n        ISSUES_FOUND=$((ISSUES_FOUND + 1))\n    fi\n    \n    if [ \"$ISSUES_FOUND\" -eq 0 ]; then\n        echo \"  ‚Ä¢ ‚úÖ No common issues detected\"\n    fi\n    \n    echo \"\"\n    echo \"üí° Vue 3 Composition API Best Practices:\"\n    echo \"  ‚Ä¢ Use <script setup> for better performance and DX\"\n    echo \"  ‚Ä¢ Prefer ref() for primitive values, reactive() for objects\"\n    echo \"  ‚Ä¢ Use computed() for derived state\"\n    echo \"  ‚Ä¢ Implement proper TypeScript typing for better IntelliSense\"\n    echo \"  ‚Ä¢ Use defineProps/defineEmits for component interface\"\n    echo \"  ‚Ä¢ Organize composables into separate files for reusability\"\n    echo \"  ‚Ä¢ Use shallowRef/shallowReactive for performance optimization\"\n    \n    echo \"\"\n    echo \"üéØ Vue component analysis complete!\"\n    \nelse\n    echo \"‚ÑπÔ∏è File is not a Vue component: $FILE_PATH\"\nfi\n\nexit 0"
  },
  "source": "community"
}
