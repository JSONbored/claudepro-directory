{
  "slug": "final-bundle-size-reporter",
  "description": "Analyzes and reports final bundle sizes when the development session ends",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "bundle-size",
    "performance",
    "stop-hook",
    "optimization",
    "reporting"
  ],
  "hookType": "Stop",
  "features": [
    "Comprehensive bundle size analysis for multiple build tools",
    "Asset size breakdown by file type (JS, CSS, images, fonts)",
    "Performance impact assessment with size thresholds",
    "Build output detection for various frameworks",
    "Timestamped bundle reports with historical tracking",
    "Bundle optimization recommendations",
    "Gzip and Brotli compression analysis",
    "Tree-shaking effectiveness measurement"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "stop": {
          "script": "./.claude/hooks/final-bundle-size-reporter.sh"
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\necho \"📦 FINAL BUNDLE SIZE REPORT\" >&2\necho \"===========================================\" >&2\n\n# Initialize variables\nTIMESTAMP=$(date +\"%Y-%m-%d %H:%M:%S\")\nREPORT_FILE=\"bundle-report-$(date +%Y%m%d_%H%M%S).txt\"\nBUILD_DETECTED=false\nTOTAL_SIZE=0\nJS_SIZE=0\nCSS_SIZE=0\nIMAGE_SIZE=0\nOTHER_SIZE=0\n\n# Function to convert bytes to human readable\nformat_bytes() {\n  local bytes=$1\n  if [ $bytes -ge 1073741824 ]; then\n    echo \"$(echo \"scale=2; $bytes/1073741824\" | bc 2>/dev/null || echo $((bytes/1073741824)))GB\"\n  elif [ $bytes -ge 1048576 ]; then\n    echo \"$(echo \"scale=2; $bytes/1048576\" | bc 2>/dev/null || echo $((bytes/1048576)))MB\"\n  elif [ $bytes -ge 1024 ]; then\n    echo \"$(echo \"scale=2; $bytes/1024\" | bc 2>/dev/null || echo $((bytes/1024)))KB\"\n  else\n    echo \"${bytes}B\"\n  fi\n}\n\n# Function to analyze directory\nanalyze_directory() {\n  local dir=\"$1\"\n  local label=\"$2\"\n  \n  if [ ! -d \"$dir\" ]; then\n    return\n  fi\n  \n  echo \"📁 Analyzing $label: $dir\" >&2\n  BUILD_DETECTED=true\n  \n  # Calculate total directory size\n  DIR_SIZE=$(du -sb \"$dir\" 2>/dev/null | cut -f1 || echo \"0\")\n  TOTAL_SIZE=$((TOTAL_SIZE + DIR_SIZE))\n  \n  echo \"   Total size: $(format_bytes $DIR_SIZE)\" >&2\n  \n  # Analyze by file types\n  echo \"   📊 File type breakdown:\" >&2\n  \n  # JavaScript files\n  if find \"$dir\" -name \"*.js\" -o -name \"*.mjs\" -o -name \"*.ts\" 2>/dev/null | head -1 > /dev/null; then\n    JS_FILES_SIZE=$(find \"$dir\" \\( -name \"*.js\" -o -name \"*.mjs\" -o -name \"*.ts\" \\) -exec du -cb {} + 2>/dev/null | tail -1 | cut -f1 || echo \"0\")\n    JS_SIZE=$((JS_SIZE + JS_FILES_SIZE))\n    echo \"      JavaScript: $(format_bytes $JS_FILES_SIZE)\" >&2\n  fi\n  \n  # CSS files\n  if find \"$dir\" -name \"*.css\" 2>/dev/null | head -1 > /dev/null; then\n    CSS_FILES_SIZE=$(find \"$dir\" -name \"*.css\" -exec du -cb {} + 2>/dev/null | tail -1 | cut -f1 || echo \"0\")\n    CSS_SIZE=$((CSS_SIZE + CSS_FILES_SIZE))\n    echo \"      CSS: $(format_bytes $CSS_FILES_SIZE)\" >&2\n  fi\n  \n  # Images\n  if find \"$dir\" \\( -name \"*.png\" -o -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" \\) 2>/dev/null | head -1 > /dev/null; then\n    IMG_FILES_SIZE=$(find \"$dir\" \\( -name \"*.png\" -o -name \"*.jpg\" -o -name \"*.jpeg\" -o -name \"*.gif\" -o -name \"*.svg\" -o -name \"*.webp\" \\) -exec du -cb {} + 2>/dev/null | tail -1 | cut -f1 || echo \"0\")\n    IMAGE_SIZE=$((IMAGE_SIZE + IMG_FILES_SIZE))\n    echo \"      Images: $(format_bytes $IMG_FILES_SIZE)\" >&2\n  fi\n  \n  # Show largest files in this directory\n  echo \"   🔍 Largest files:\" >&2\n  find \"$dir\" -type f -exec du -b {} + 2>/dev/null | sort -rn | head -5 | while read size file; do\n    echo \"      $(format_bytes $size) - $(basename \"$file\")\" >&2\n  done\n  \n  # Gzip analysis for text files\n  GZIPPABLE_SIZE=$(find \"$dir\" \\( -name \"*.js\" -o -name \"*.css\" -o -name \"*.html\" -o -name \"*.json\" \\) -exec du -cb {} + 2>/dev/null | tail -1 | cut -f1 || echo \"0\")\n  if [ \"$GZIPPABLE_SIZE\" -gt 0 ] && command -v gzip &> /dev/null; then\n    # Estimate gzip compression\n    TEMP_DIR=$(mktemp -d)\n    find \"$dir\" \\( -name \"*.js\" -o -name \"*.css\" -o -name \"*.html\" -o -name \"*.json\" \\) -exec cp {} \"$TEMP_DIR/\" \\; 2>/dev/null\n    \n    if [ \"$(ls -A \"$TEMP_DIR\" 2>/dev/null)\" ]; then\n      cd \"$TEMP_DIR\" && gzip *.* 2>/dev/null && GZIPPED_SIZE=$(du -cb *.gz 2>/dev/null | tail -1 | cut -f1 || echo \"0\") && cd - > /dev/null\n      \n      if [ \"$GZIPPED_SIZE\" -gt 0 ]; then\n        COMPRESSION_RATIO=$(echo \"scale=1; ($GZIPPABLE_SIZE - $GZIPPED_SIZE) * 100 / $GZIPPABLE_SIZE\" | bc 2>/dev/null || echo \"N/A\")\n        echo \"   📦 Gzip compression potential: $(format_bytes $GZIPPED_SIZE) (-${COMPRESSION_RATIO}%)\" >&2\n      fi\n    fi\n    \n    rm -rf \"$TEMP_DIR\" 2>/dev/null\n  fi\n  \n  echo \"\" >&2\n}\n\n# Start report\necho \"Starting bundle analysis at $TIMESTAMP\" >&2\necho \"\" >&2\n\n# Check if this is a Node.js project\nif [ -f \"package.json\" ]; then\n  echo \"🟢 Node.js project detected\" >&2\n  \n  PROJECT_NAME=$(grep '\"name\"' package.json | head -1 | cut -d'\"' -f4 2>/dev/null || echo \"Unknown\")\n  echo \"📋 Project: $PROJECT_NAME\" >&2\n  \n  # Try to build the project\n  echo \"🔨 Attempting to build project...\" >&2\n  \n  # Check for common build scripts\n  BUILD_SCRIPT=\"\"\n  if grep -q '\"build\"' package.json; then\n    BUILD_SCRIPT=\"npm run build\"\n  elif grep -q '\"build:prod\"' package.json; then\n    BUILD_SCRIPT=\"npm run build:prod\"\n  elif grep -q '\"dist\"' package.json; then\n    BUILD_SCRIPT=\"npm run dist\"\n  fi\n  \n  if [ -n \"$BUILD_SCRIPT\" ]; then\n    echo \"   Running: $BUILD_SCRIPT\" >&2\n    if $BUILD_SCRIPT > /tmp/build_output.log 2>&1; then\n      echo \"   ✅ Build completed successfully\" >&2\n    else\n      echo \"   ⚠️ Build failed or incomplete - analyzing existing output\" >&2\n      echo \"   📝 Build log: /tmp/build_output.log\" >&2\n    fi\n  else\n    echo \"   ℹ️ No build script found - analyzing existing files\" >&2\n  fi\n  \n  echo \"\" >&2\nfi\n\n# Common build output directories\nBUILD_DIRS=(\"dist\" \"build\" \"out\" \".next\" \"public\" \"www\" \"target/release\")\n\n# Analyze each potential build directory\nfor dir in \"${BUILD_DIRS[@]}\"; do\n  if [ -d \"$dir\" ]; then\n    case \"$dir\" in\n      \"dist\")\n        analyze_directory \"$dir\" \"Distribution Build\"\n        ;;\n      \"build\")\n        analyze_directory \"$dir\" \"Production Build\"\n        ;;\n      \"out\")\n        analyze_directory \"$dir\" \"Output Build\"\n        ;;\n      \".next\")\n        analyze_directory \"$dir\" \"Next.js Build\"\n        ;;\n      \"public\")\n        # Only analyze if it looks like a build output\n        if [ -f \"$dir/index.html\" ] || [ -f \"$dir/main.js\" ]; then\n          analyze_directory \"$dir\" \"Public Assets\"\n        fi\n        ;;\n      \"www\")\n        analyze_directory \"$dir\" \"Web Assets\"\n        ;;\n      \"target/release\")\n        analyze_directory \"$dir\" \"Rust Release Build\"\n        ;;\n    esac\n  fi\ndone\n\n# Framework-specific analysis\nif [ -f \"webpack.config.js\" ] || [ -f \"webpack.config.ts\" ]; then\n  echo \"⚙️ Webpack configuration detected\" >&2\n  \n  # Look for webpack-bundle-analyzer output\n  if [ -f \"bundle-analyzer-report.html\" ]; then\n    echo \"   📊 Bundle analyzer report available: bundle-analyzer-report.html\" >&2\n  fi\nfi\n\nif [ -f \"vite.config.js\" ] || [ -f \"vite.config.ts\" ]; then\n  echo \"⚡ Vite configuration detected\" >&2\nfi\n\nif [ -f \"next.config.js\" ] || [ -f \"next.config.ts\" ]; then\n  echo \"▲ Next.js configuration detected\" >&2\nfi\n\nif [ -f \"rollup.config.js\" ]; then\n  echo \"📦 Rollup configuration detected\" >&2\nfi\n\n# Generate summary\necho \"\" >&2\necho \"📋 BUNDLE SIZE SUMMARY\" >&2\necho \"=====================================\" >&2\n\nif [ \"$BUILD_DETECTED\" = true ]; then\n  echo \"📊 Total bundle size: $(format_bytes $TOTAL_SIZE)\" >&2\n  echo \"\" >&2\n  echo \"📈 Breakdown by type:\" >&2\n  [ \"$JS_SIZE\" -gt 0 ] && echo \"   JavaScript: $(format_bytes $JS_SIZE)\" >&2\n  [ \"$CSS_SIZE\" -gt 0 ] && echo \"   CSS: $(format_bytes $CSS_SIZE)\" >&2\n  [ \"$IMAGE_SIZE\" -gt 0 ] && echo \"   Images: $(format_bytes $IMAGE_SIZE)\" >&2\n  \n  echo \"\" >&2\n  echo \"🎯 Performance Assessment:\" >&2\n  \n  # Performance thresholds\n  if [ \"$TOTAL_SIZE\" -gt 5242880 ]; then  # 5MB\n    echo \"   🔴 Large bundle size - may impact load times significantly\" >&2\n  elif [ \"$TOTAL_SIZE\" -gt 1048576 ]; then  # 1MB\n    echo \"   🟡 Moderate bundle size - consider optimization\" >&2\n  else\n    echo \"   🟢 Good bundle size - within performance budget\" >&2\n  fi\n  \n  if [ \"$JS_SIZE\" -gt 1048576 ]; then  # 1MB JS\n    echo \"   ⚠️ JavaScript bundle is large - consider code splitting\" >&2\n  fi\n  \n  echo \"\" >&2\n  echo \"💡 Optimization Recommendations:\" >&2\n  echo \"   • Enable gzip/brotli compression on your server\" >&2\n  echo \"   • Consider code splitting for large JavaScript bundles\" >&2\n  echo \"   • Optimize images with modern formats (WebP, AVIF)\" >&2\n  echo \"   • Remove unused CSS and JavaScript code\" >&2\n  echo \"   • Use dynamic imports for non-critical code\" >&2\n  \nelse\n  echo \"ℹ️ No build output detected in common directories\" >&2\n  echo \"   Searched: ${BUILD_DIRS[*]}\" >&2\n  echo \"   Consider running a build command first\" >&2\nfi\n\necho \"\" >&2\necho \"📄 Report timestamp: $TIMESTAMP\" >&2\necho \"💾 Full report saved to: $REPORT_FILE\" >&2\n\n# Save detailed report to file\n{\n  echo \"BUNDLE SIZE REPORT\"\n  echo \"Generated: $TIMESTAMP\"\n  echo \"Project: $(basename \"$(pwd)\")\"\n  echo \"\"\n  \n  if [ \"$BUILD_DETECTED\" = true ]; then\n    echo \"SUMMARY\"\n    echo \"=======\"\n    echo \"Total Size: $(format_bytes $TOTAL_SIZE)\"\n    echo \"JavaScript: $(format_bytes $JS_SIZE)\"\n    echo \"CSS: $(format_bytes $CSS_SIZE)\"\n    echo \"Images: $(format_bytes $IMAGE_SIZE)\"\n    echo \"\"\n    \n    echo \"DETAILED ANALYSIS\"\n    echo \"=================\"\n    for dir in \"${BUILD_DIRS[@]}\"; do\n      if [ -d \"$dir\" ]; then\n        echo \"$dir directory:\"\n        find \"$dir\" -type f -exec du -b {} + 2>/dev/null | sort -rn | head -10 | while read size file; do\n          echo \"  $(format_bytes $size) - $file\"\n        done\n        echo \"\"\n      fi\n    done\n  else\n    echo \"No build output detected\"\n  fi\n} > \"$REPORT_FILE\"\n\necho \"=====================================\" >&2\n\nexit 0"
  },
  "useCases": [
    "End-of-session bundle size analysis and tracking",
    "Performance budget monitoring for web applications",
    "Build optimization impact measurement",
    "CI/CD pipeline bundle size validation",
    "Framework-agnostic build output analysis"
  ],
  "source": "community"
}
