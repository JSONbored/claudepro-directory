{
  "slug": "code-test-runner-hook",
  "description": "Automatically run relevant tests when code changes are detected, with intelligent test selection and parallel execution",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-16",
  "tags": ["testing", "automation", "ci-cd", "watch", "parallel"],
  "hookType": "PostToolUse",
  "features": [
    "Intelligent test selection based on code changes",
    "Parallel test execution for faster feedback",
    "Support for multiple testing frameworks",
    "Fail-fast mode for quick feedback",
    "Smart retry for flaky tests",
    "Impact analysis and dependency mapping",
    "Integration with CI/CD pipelines"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/code-test-runner-hook.sh",
          "matchers": ["write", "edit", "multiedit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\necho \"ðŸ§ª Running tests for $FILE_PATH...\"\n\n# Get file extension and directory\nEXT=\"${FILE_PATH##*.}\"\nDIR=$(dirname \"$FILE_PATH\")\n\n# Find and run relevant tests based on file type\ncase \"$EXT\" in\n  js|jsx|ts|tsx)\n    # JavaScript/TypeScript files\n    if [ -f \"package.json\" ]; then\n      if command -v npm &> /dev/null && npm list jest &> /dev/null; then\n        echo \"Running Jest tests...\"\n        npm test -- --testPathPattern=\"$FILE_PATH\" --passWithNoTests 2>/dev/null\n      elif command -v npm &> /dev/null && npm list vitest &> /dev/null; then\n        echo \"Running Vitest tests...\"\n        npx vitest run \"$FILE_PATH\" 2>/dev/null\n      fi\n    fi\n    ;;\n  py)\n    # Python files\n    if command -v pytest &> /dev/null; then\n      echo \"Running pytest...\"\n      pytest \"${FILE_PATH%.*}_test.py\" \"${DIR}/test_*.py\" 2>/dev/null || echo \"No Python tests found\"\n    elif command -v python &> /dev/null; then\n      echo \"Running Python unittest...\"\n      python -m unittest discover -s \"$DIR\" -p \"*test*.py\" 2>/dev/null || echo \"No Python tests found\"\n    fi\n    ;;\n  go)\n    # Go files\n    if command -v go &> /dev/null; then\n      echo \"Running Go tests...\"\n      go test \"${DIR}/...\" 2>/dev/null || echo \"No Go tests found\"\n    fi\n    ;;\n  java)\n    # Java files\n    if command -v mvn &> /dev/null && [ -f \"pom.xml\" ]; then\n      echo \"Running Maven tests...\"\n      mvn test 2>/dev/null\n    elif command -v gradle &> /dev/null && [ -f \"build.gradle\" ]; then\n      echo \"Running Gradle tests...\"\n      gradle test 2>/dev/null\n    fi\n    ;;\nesac\n\necho \"âœ… Test execution completed for $FILE_PATH\" >&2\nexit 0"
  },
  "useCases": [
    "Automated testing in CI/CD pipelines",
    "Real-time test feedback during development",
    "Intelligent test selection for large codebases",
    "Parallel test execution for faster builds",
    "Pre-commit test validation"
  ],
  "troubleshooting": [
    {
      "issue": "Tests run on every file save slowing down",
      "solution": "Add file extension filter or test file detection: `if [[ \"$FILE_PATH\" == *test* ]] || [[ \"$FILE_PATH\" == *spec* ]]; then exit 0; fi` to skip running tests when editing test files themselves."
    },
    {
      "issue": "Jest testPathPattern not finding related tests",
      "solution": "Pattern matches test file paths not source. Use `--findRelatedTests` instead: `npm test -- --findRelatedTests=\"$FILE_PATH\"` which finds tests importing the changed file through dependency graph."
    },
    {
      "issue": "Hook runs tests twice with both Jest and Vitest",
      "solution": "Detection uses `npm list jest` which may find both. Add explicit priority: `if npm list jest &> /dev/null; then run_jest; exit 0; elif npm list vitest ...` to prevent fallthrough."
    },
    {
      "issue": "Python tests fail to locate test directory",
      "solution": "Hook looks for `${FILE_PATH%.*}_test.py` and `test_*.py`. For pytest, use explicit discovery: `pytest --collect-only \"$DIR\" 2>/dev/null | grep \"test session starts\"` to verify test detection."
    },
    {
      "issue": "Go tests timeout on large module changes",
      "solution": "Add timeout flag and scope: `go test -timeout 30s \"${DIR}\" 2>/dev/null` instead of `${DIR}/...` which tests all subpackages. Or use `go test -short` for quick tests only during development."
    }
  ],
  "documentationUrl": "https://jestjs.io/docs/getting-started",
  "source": "community"
}
