{
  "slug": "rust-cargo-check",
  "description": "Automatically runs cargo check and clippy when Rust files are modified",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["rust", "cargo", "clippy", "linting", "compilation"],
  "hookType": "PostToolUse",
  "features": [
    "Fast compilation checking with cargo check",
    "Code linting with clippy",
    "Rust best practices enforcement",
    "Dependency validation",
    "Performance optimization suggestions",
    "Security vulnerability detection"
  ],
  "useCases": [
    "Validate Rust code compilation before commits",
    "Catch common Rust programming errors early",
    "Enforce Rust coding standards with clippy",
    "Check dependency compatibility",
    "Identify performance improvement opportunities",
    "Ensure code follows Rust best practices",
    "Run security analysis on Rust code",
    "Validate Cargo.toml configuration changes"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/rust-cargo-check.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Rust file or Cargo configuration\nif [[ \"$FILE_PATH\" == *.rs ]] || [[ \"$FILE_PATH\" == *Cargo.toml ]] || [[ \"$FILE_PATH\" == *Cargo.lock ]]; then\n    echo \"ü¶Ä Rust Cargo Check - Analyzing Rust code...\"\n    echo \"üìÑ File: $FILE_PATH\"\n    \n    # Check if cargo is available\n    if ! command -v cargo >/dev/null 2>&1; then\n        echo \"‚ö†Ô∏è Cargo not found - please install Rust toolchain\"\n        echo \"üí° Install from: https://rustup.rs/\"\n        exit 1\n    fi\n    \n    # Check if we're in a Rust project\n    if [ ! -f \"Cargo.toml\" ]; then\n        echo \"‚ö†Ô∏è No Cargo.toml found - not a Rust project\"\n        exit 0\n    fi\n    \n    echo \"üîç Running Rust toolchain checks...\"\n    \n    # Step 1: Run cargo check for fast compilation validation\n    echo \"‚ö° Running cargo check (fast compilation check)...\"\n    if cargo check --message-format=short; then\n        echo \"‚úÖ Cargo check passed - code compiles successfully\"\n    else\n        echo \"‚ùå Cargo check failed - compilation errors found\"\n        echo \"üí° Fix compilation errors before proceeding\"\n        exit 1\n    fi\n    \n    # Step 2: Run clippy for linting (if available)\n    echo \"\"\n    echo \"üìã Running clippy (Rust linter)...\"\n    if command -v cargo-clippy >/dev/null 2>&1 || cargo clippy --version >/dev/null 2>&1; then\n        if cargo clippy --message-format=short -- -W clippy::pedantic -W clippy::nursery; then\n            echo \"‚úÖ Clippy analysis passed - no linting issues\"\n        else\n            echo \"‚ö†Ô∏è Clippy found linting issues (non-blocking)\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è Clippy not available - install with: rustup component add clippy\"\n    fi\n    \n    # Step 3: Check formatting (if rustfmt is available)\n    echo \"\"\n    echo \"üé® Checking code formatting...\"\n    if command -v rustfmt >/dev/null 2>&1; then\n        if cargo fmt -- --check; then\n            echo \"‚úÖ Code formatting is correct\"\n        else\n            echo \"‚ö†Ô∏è Code formatting issues found\"\n            echo \"üí° Run 'cargo fmt' to fix formatting\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è rustfmt not available - install with: rustup component add rustfmt\"\n    fi\n    \n    # Step 4: Security audit (if cargo-audit is available)\n    echo \"\"\n    echo \"üîí Running security audit...\"\n    if command -v cargo-audit >/dev/null 2>&1; then\n        if cargo audit; then\n            echo \"‚úÖ No known security vulnerabilities found\"\n        else\n            echo \"‚ö†Ô∏è Security vulnerabilities detected - review dependencies\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è cargo-audit not available - install with: cargo install cargo-audit\"\n    fi\n    \n    # Step 5: Project analysis\n    echo \"\"\n    echo \"üìä Project Analysis:\"\n    \n    # Count Rust files\n    RUST_FILES=$(find . -name \"*.rs\" -not -path \"./target/*\" | wc -l)\n    echo \"  ‚Ä¢ Rust files: $RUST_FILES\"\n    \n    # Check for tests\n    TEST_FILES=$(find . -name \"*.rs\" -not -path \"./target/*\" -exec grep -l \"#\\[test\\]\\|#\\[cfg(test)\\]\" {} \\; | wc -l)\n    echo \"  ‚Ä¢ Files with tests: $TEST_FILES\"\n    \n    # Check dependencies\n    DEPENDENCIES=$(grep -c '^[a-zA-Z].*=' Cargo.toml 2>/dev/null || echo 0)\n    echo \"  ‚Ä¢ Dependencies: $DEPENDENCIES\"\n    \n    # Check for unsafe blocks\n    if find . -name \"*.rs\" -not -path \"./target/*\" -exec grep -l \"unsafe\" {} \\; | head -1 >/dev/null 2>&1; then\n        UNSAFE_COUNT=$(find . -name \"*.rs\" -not -path \"./target/*\" -exec grep -c \"unsafe\" {} \\; | awk '{sum+=$1} END {print sum}')\n        echo \"  ‚Ä¢ ‚ö†Ô∏è Unsafe blocks found: $UNSAFE_COUNT\"\n    fi\n    \n    echo \"\"\n    echo \"üí° Rust Development Tips:\"\n    echo \"  ‚Ä¢ Use 'cargo test' to run all tests\"\n    echo \"  ‚Ä¢ Use 'cargo build --release' for optimized builds\"\n    echo \"  ‚Ä¢ Use 'cargo doc --open' to generate and view documentation\"\n    echo \"  ‚Ä¢ Use 'cargo bench' for benchmarking (if available)\"\n    echo \"  ‚Ä¢ Consider using 'cargo watch' for continuous testing\"\n    \n    echo \"\"\n    echo \"üéØ Rust code analysis complete!\"\n    \nelse\n    echo \"‚ÑπÔ∏è File is not a Rust file: $FILE_PATH\"\nfi\n\nexit 0"
  },
  "source": "community"
}
