{
  "slug": "test-coverage-final-report",
  "description": "Generates a comprehensive test coverage report when the coding session ends",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "testing",
    "coverage",
    "stop-hook",
    "reporting",
    "quality"
  ],
  "hookType": "Stop",
  "features": [
    "Comprehensive test coverage analysis",
    "Multi-language testing framework support",
    "HTML and terminal coverage reports",
    "Coverage threshold validation",
    "Uncovered code identification",
    "Historical coverage tracking"
  ],
  "useCases": [
    "Generate final coverage report at session end",
    "Identify untested code areas requiring attention",
    "Track testing progress and coverage improvements",
    "Validate coverage meets project standards",
    "Generate coverage reports for team review",
    "Monitor test quality and completeness",
    "Document testing status for project stakeholders",
    "Ensure adequate testing before deployment"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "stop": {
          "script": "./.claude/hooks/test-coverage-final-report.sh",
          "matchers": [
            "*"
          ]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\necho \"🧪 Test Coverage Final Report - Analyzing test coverage...\"\necho \"⏰ Session ended: $(date)\"\necho \"═══════════════════════════════════════════════════\"\n\n# Detect project type and testing framework\nPROJECT_TYPE=\"unknown\"\nTEST_FRAMEWORK=\"unknown\"\nCOVERAGE_AVAILABLE=false\n\necho \"🔍 Detecting project type and testing framework...\"\n\n# JavaScript/Node.js project detection\nif [ -f \"package.json\" ]; then\n    PROJECT_TYPE=\"node\"\n    echo \"📦 Node.js project detected\"\n    \n    # Detect testing framework\n    if grep -q '\"jest\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"jest\"\n        echo \"🃏 Jest testing framework detected\"\n    elif grep -q '\"vitest\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"vitest\"\n        echo \"⚡ Vitest testing framework detected\"\n    elif grep -q '\"mocha\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"mocha\"\n        echo \"☕ Mocha testing framework detected\"\n    elif grep -q '\"karma\"' package.json 2>/dev/null; then\n        TEST_FRAMEWORK=\"karma\"\n        echo \"🔄 Karma testing framework detected\"\n    fi\n    \n# Python project detection\nelif [ -f \"requirements.txt\" ] || [ -f \"setup.py\" ] || [ -f \"pyproject.toml\" ]; then\n    PROJECT_TYPE=\"python\"\n    echo \"🐍 Python project detected\"\n    \n    if command -v pytest >/dev/null 2>&1; then\n        TEST_FRAMEWORK=\"pytest\"\n        echo \"🧪 Pytest testing framework available\"\n    elif python -c \"import unittest\" 2>/dev/null; then\n        TEST_FRAMEWORK=\"unittest\"\n        echo \"🔬 Unittest framework available\"\n    fi\n    \n# Rust project detection\nelif [ -f \"Cargo.toml\" ]; then\n    PROJECT_TYPE=\"rust\"\n    TEST_FRAMEWORK=\"cargo\"\n    echo \"🦀 Rust project detected\"\n    \n# Go project detection\nelif [ -f \"go.mod\" ]; then\n    PROJECT_TYPE=\"go\"\n    TEST_FRAMEWORK=\"go_test\"\n    echo \"🐹 Go project detected\"\n    \n# Java project detection\nelif [ -f \"pom.xml\" ] || [ -f \"build.gradle\" ]; then\n    PROJECT_TYPE=\"java\"\n    echo \"☕ Java project detected\"\n    \n    if [ -f \"pom.xml\" ]; then\n        TEST_FRAMEWORK=\"maven\"\n        echo \"🏗️ Maven build system detected\"\n    else\n        TEST_FRAMEWORK=\"gradle\"\n        echo \"🐘 Gradle build system detected\"\n    fi\nfi\n\necho \"\"\necho \"📊 Running coverage analysis for $PROJECT_TYPE project...\"\n\n# Run coverage based on project type\ncase \"$PROJECT_TYPE\" in\n    \"node\")\n        case \"$TEST_FRAMEWORK\" in\n            \"jest\")\n                echo \"🃏 Running Jest with coverage...\"\n                if npm test -- --coverage --silent 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Jest coverage completed successfully\"\n                elif npm run test:coverage 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Coverage script completed successfully\"\n                else\n                    echo \"⚠️ Jest coverage command failed - check test configuration\"\n                fi\n                ;;\n            \"vitest\")\n                echo \"⚡ Running Vitest with coverage...\"\n                if npx vitest run --coverage 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Vitest coverage completed successfully\"\n                else\n                    echo \"⚠️ Vitest coverage command failed\"\n                fi\n                ;;\n            \"mocha\")\n                echo \"☕ Running Mocha with nyc coverage...\"\n                if npx nyc mocha 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Mocha coverage completed successfully\"\n                else\n                    echo \"⚠️ Mocha coverage requires nyc - install with: npm install --save-dev nyc\"\n                fi\n                ;;\n            *)\n                echo \"⚠️ No recognized testing framework - attempting generic npm test\"\n                if npm test 2>/dev/null; then\n                    echo \"✅ Tests completed (coverage unknown)\"\n                else\n                    echo \"❌ Tests failed or not configured\"\n                fi\n                ;;\n        esac\n        ;;\n    \"python\")\n        case \"$TEST_FRAMEWORK\" in\n            \"pytest\")\n                echo \"🧪 Running pytest with coverage...\"\n                if pytest --cov=. --cov-report=term-missing --cov-report=html 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Pytest coverage completed successfully\"\n                else\n                    echo \"⚠️ Pytest coverage failed - install with: pip install pytest-cov\"\n                fi\n                ;;\n            \"unittest\")\n                echo \"🔬 Running unittest with coverage...\"\n                if python -m coverage run -m unittest discover 2>/dev/null; then\n                    python -m coverage report 2>/dev/null\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Unittest coverage completed successfully\"\n                else\n                    echo \"⚠️ Coverage.py not available - install with: pip install coverage\"\n                fi\n                ;;\n            *)\n                echo \"⚠️ No Python testing framework detected\"\n                ;;\n        esac\n        ;;\n    \"rust\")\n        echo \"🦀 Running Cargo test with coverage...\"\n        if command -v cargo-tarpaulin >/dev/null 2>&1; then\n            if cargo tarpaulin --out Html 2>/dev/null; then\n                COVERAGE_AVAILABLE=true\n                echo \"✅ Cargo tarpaulin coverage completed successfully\"\n            else\n                echo \"⚠️ Cargo tarpaulin failed\"\n            fi\n        else\n            echo \"⚠️ cargo-tarpaulin not installed - install with: cargo install cargo-tarpaulin\"\n            echo \"🔄 Running basic cargo test...\"\n            cargo test 2>/dev/null && echo \"✅ Tests completed (coverage unavailable)\"\n        fi\n        ;;\n    \"go\")\n        echo \"🐹 Running Go test with coverage...\"\n        if go test -coverprofile=coverage.out ./... 2>/dev/null; then\n            go tool cover -html=coverage.out -o coverage.html 2>/dev/null\n            COVERAGE_AVAILABLE=true\n            echo \"✅ Go coverage completed successfully\"\n        else\n            echo \"⚠️ Go test coverage failed\"\n        fi\n        ;;\n    \"java\")\n        case \"$TEST_FRAMEWORK\" in\n            \"maven\")\n                echo \"🏗️ Running Maven test with JaCoCo coverage...\"\n                if mvn test jacoco:report 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Maven JaCoCo coverage completed successfully\"\n                else\n                    echo \"⚠️ Maven coverage failed - ensure JaCoCo plugin is configured\"\n                fi\n                ;;\n            \"gradle\")\n                echo \"🐘 Running Gradle test with JaCoCo coverage...\"\n                if ./gradlew test jacocoTestReport 2>/dev/null; then\n                    COVERAGE_AVAILABLE=true\n                    echo \"✅ Gradle JaCoCo coverage completed successfully\"\n                else\n                    echo \"⚠️ Gradle coverage failed - ensure JaCoCo plugin is configured\"\n                fi\n                ;;\n        esac\n        ;;\n    *)\n        echo \"❓ Unknown project type - cannot generate coverage report\"\n        echo \"💡 Supported: Node.js, Python, Rust, Go, Java\"\n        ;;\nesac\n\necho \"\"\necho \"📈 Coverage Report Summary:\"\necho \"═══════════════════════════\"\n\n# Display coverage results based on available formats\nif [ \"$COVERAGE_AVAILABLE\" = true ]; then\n    case \"$PROJECT_TYPE\" in\n        \"node\")\n            if [ -d \"coverage\" ]; then\n                echo \"📊 Coverage files found in coverage/ directory\"\n                \n                # Try to parse coverage summary\n                if [ -f \"coverage/coverage-summary.json\" ]; then\n                    echo \"📋 Coverage Summary:\"\n                    cat coverage/coverage-summary.json 2>/dev/null | jq -r '.total | \"Lines: \" + (.lines.pct|tostring) + \"% (\" + (.lines.covered|tostring) + \"/\" + (.lines.total|tostring) + \")\", \"Branches: \" + (.branches.pct|tostring) + \"% (\" + (.branches.covered|tostring) + \"/\" + (.branches.total|tostring) + \")\", \"Functions: \" + (.functions.pct|tostring) + \"% (\" + (.functions.covered|tostring) + \"/\" + (.functions.total|tostring) + \")\", \"Statements: \" + (.statements.pct|tostring) + \"% (\" + (.statements.covered|tostring) + \"/\" + (.statements.total|tostring) + \")\"' 2>/dev/null || echo \"Coverage summary parsing failed\"\n                fi\n                \n                echo \"🌐 HTML Report: file://$(pwd)/coverage/index.html\"\n            fi\n            ;;\n        \"python\")\n            if [ -d \"htmlcov\" ]; then\n                echo \"🌐 HTML Report: file://$(pwd)/htmlcov/index.html\"\n            fi\n            ;;\n        \"rust\")\n            if [ -f \"tarpaulin-report.html\" ]; then\n                echo \"🌐 HTML Report: file://$(pwd)/tarpaulin-report.html\"\n            fi\n            ;;\n        \"go\")\n            if [ -f \"coverage.html\" ]; then\n                echo \"🌐 HTML Report: file://$(pwd)/coverage.html\"\n            fi\n            ;;\n        \"java\")\n            if [ -d \"target/site/jacoco\" ]; then\n                echo \"🌐 HTML Report: file://$(pwd)/target/site/jacoco/index.html\"\n            elif [ -d \"build/reports/jacoco/test/html\" ]; then\n                echo \"🌐 HTML Report: file://$(pwd)/build/reports/jacoco/test/html/index.html\"\n            fi\n            ;;\n    esac\nelse\n    echo \"❌ No coverage data available\"\n    echo \"💡 Coverage Setup Tips:\"\n    case \"$PROJECT_TYPE\" in\n        \"node\")\n            echo \"  • For Jest: Add 'collectCoverage: true' to jest.config.js\"\n            echo \"  • For Vitest: Add 'coverage' provider to vite.config.js\"\n            echo \"  • Run: npm install --save-dev @vitest/coverage-c8\"\n            ;;\n        \"python\")\n            echo \"  • Install: pip install pytest-cov coverage\"\n            echo \"  • Run: pytest --cov=your_package\"\n            ;;\n        \"rust\")\n            echo \"  • Install: cargo install cargo-tarpaulin\"\n            echo \"  • Run: cargo tarpaulin --out Html\"\n            ;;\n        \"go\")\n            echo \"  • Built-in: go test -coverprofile=coverage.out\"\n            echo \"  • View: go tool cover -html=coverage.out\"\n            ;;\n        \"java\")\n            echo \"  • Add JaCoCo plugin to Maven/Gradle configuration\"\n            echo \"  • Maven: mvn test jacoco:report\"\n            echo \"  • Gradle: ./gradlew test jacocoTestReport\"\n            ;;\n    esac\nfi\n\necho \"\"\necho \"💡 Coverage Best Practices:\"\necho \"  • Aim for 80%+ line coverage on critical code\"\necho \"  • Focus on testing business logic and edge cases\"\necho \"  • Use coverage to identify untested code, not as a quality metric\"\necho \"  • Write meaningful tests, not just coverage-driven tests\"\necho \"  • Exclude generated code and vendor dependencies\"\necho \"  • Set up coverage thresholds in CI/CD pipelines\"\n\necho \"\"\necho \"🎯 Test coverage analysis complete!\"\necho \"═══════════════════════════════════════════════════\"\n\nexit 0"
  },
  "source": "community"
}
