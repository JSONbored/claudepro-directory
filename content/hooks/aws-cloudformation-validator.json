{
  "slug": "aws-cloudformation-validator",
  "description": "Validates AWS CloudFormation templates for syntax errors and best practices",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["aws", "cloudformation", "infrastructure", "validation", "cloud"],
  "hookType": "PostToolUse",
  "features": [
    "Advanced CloudFormation template validation with cfn-lint",
    "Syntax error detection and reporting",
    "AWS best practices compliance checking",
    "Type mismatch validation",
    "Fallback to AWS CLI validation when cfn-lint unavailable",
    "Support for JSON and YAML template formats"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/aws-cloudformation-validator.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if it's a CloudFormation template\nif [[ \"$FILE_PATH\" == *.cf.json ]] || [[ \"$FILE_PATH\" == *.cf.yaml ]] || [[ \"$FILE_PATH\" == *cloudformation*.yaml ]] || [[ \"$FILE_PATH\" == *cloudformation*.json ]]; then\n  echo \"☁️ Validating CloudFormation template $FILE_PATH...\" >&2\n  \n  # Try cfn-lint first (preferred)\n  if command -v cfn-lint &> /dev/null; then\n    echo \"Running cfn-lint validation...\" >&2\n    if cfn-lint \"$FILE_PATH\" 2>&1; then\n      echo \"✅ CloudFormation template validation passed\" >&2\n    else\n      echo \"❌ CloudFormation template validation failed\" >&2\n    fi\n  elif command -v aws &> /dev/null; then\n    echo \"⚠️ cfn-lint not installed, using AWS CLI validation...\" >&2\n    if aws cloudformation validate-template --template-body \"file://$FILE_PATH\" 2>/dev/null; then\n      echo \"✅ Basic CloudFormation validation passed\" >&2\n    else\n      echo \"❌ CloudFormation template validation failed\" >&2\n    fi\n  else\n    echo \"⚠️ Neither cfn-lint nor AWS CLI available for validation\" >&2\n  fi\nelse\n  echo \"File $FILE_PATH is not a CloudFormation template, skipping validation\" >&2\nfi\n\nexit 0"
  },
  "useCases": [
    "Pre-deployment CloudFormation template validation",
    "Infrastructure as Code quality assurance",
    "CI/CD pipeline integration for AWS deployments",
    "Development workflow validation for cloud resources",
    "Compliance checking against AWS best practices"
  ],
  "troubleshooting": [
    {
      "issue": "Hook recognizes CloudFormation file but cfn-lint fails",
      "solution": "Install cfn-lint: pip install cfn-lint. Verify Python environment active: which python. Check template syntax with: cfn-lint --version. Review cfn-lint logs without 2>&1."
    },
    {
      "issue": "AWS CLI validation requires credentials unexpectedly",
      "solution": "Use cfn-lint for offline validation instead. Or configure AWS credentials: aws configure. Use IAM role with minimal permissions. Skip AWS CLI fallback if credentials unavailable."
    },
    {
      "issue": "Template passes validation but hook shows failure message",
      "solution": "Check exit code handling in script. Capture command output: OUTPUT=$(cfn-lint file) && echo success. Review conditional logic for success detection. Debug with: set -x in script."
    },
    {
      "issue": "Hook processes YAML files that aren't CloudFormation",
      "solution": "Strengthen template detection regex. Check file content for AWSTemplateFormatVersion key: grep -q AWSTemplateFormatVersion file. Add explicit template marker in filename convention."
    },
    {
      "issue": "PostToolUse timing causes validation on incomplete writes",
      "solution": "Verify file write completed before validation. Add small sleep: sleep 0.5 before validation. Check file size: [ -s \"$FILE_PATH\" ]. Use file lock detection if available."
    }
  ],
  "documentationUrl": "https://aws.amazon.com/cloudformation/",
  "source": "community"
}
