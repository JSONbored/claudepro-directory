{
  "slug": "team-summary-email-generator",
  "description": "Generates and sends a comprehensive summary email to the team when session ends",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["email", "team", "stop-hook", "summary", "communication"],
  "hookType": "Stop",
  "features": [
    "Comprehensive session summary generation",
    "HTML-formatted email reports",
    "Multiple email service integrations (SendGrid, SMTP)",
    "Git change analysis and statistics",
    "Test results and build status inclusion",
    "Automatic team communication"
  ],
  "useCases": [
    "Send detailed session summaries to development team",
    "Create automated progress reports after work sessions",
    "Document code changes and accomplishments",
    "Notify team of test results and build status",
    "Maintain project communication and transparency",
    "Generate historical record of development activities",
    "Alert team to significant changes or milestones",
    "Coordinate team awareness of automated changes"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "stop": {
          "script": "./.claude/hooks/team-summary-email-generator.sh",
          "matchers": ["*"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\necho \"üìß Team Summary Email Generator - Preparing session summary...\"\necho \"‚è∞ Session ended: $(date)\"\n\n# Check if email configuration is available\nif [ -z \"$TEAM_EMAIL\" ]; then\n    echo \"‚ÑπÔ∏è TEAM_EMAIL not configured - skipping email summary\"\n    echo \"üí° Set TEAM_EMAIL environment variable to enable team notifications\"\n    exit 0\nfi\n\necho \"üì¨ Team email configured: $TEAM_EMAIL\"\n\n# Check for email service configuration\nEMAIL_METHOD=\"none\"\nif [ -n \"$SENDGRID_API_KEY\" ]; then\n    EMAIL_METHOD=\"sendgrid\"\n    echo \"üì® Using SendGrid API for email delivery\"\nelif command -v mail >/dev/null 2>&1; then\n    EMAIL_METHOD=\"mail\"\n    echo \"üìÆ Using system mail command for email delivery\"\nelif command -v sendmail >/dev/null 2>&1; then\n    EMAIL_METHOD=\"sendmail\"\n    echo \"üì´ Using sendmail for email delivery\"\nelse\n    echo \"‚ö†Ô∏è No email service available - install mail command or configure SendGrid\"\n    echo \"üí° Install: apt-get install mailutils (Ubuntu) or brew install mailutils (macOS)\"\n    exit 0\nfi\n\necho \"üîç Analyzing session data...\"\n\n# Session metadata\nSESSION_END=$(date)\nSESSION_ID=$(date +%Y%m%d_%H%M%S)\nUSER=$(whoami 2>/dev/null || echo \"developer\")\nHOST=$(hostname 2>/dev/null || echo \"unknown\")\nWORKDIR=$(pwd)\nPROJECT_NAME=$(basename \"$WORKDIR\" 2>/dev/null || echo \"project\")\n\n# Git analysis\nif git rev-parse --git-dir >/dev/null 2>&1; then\n    echo \"üìä Analyzing git changes...\"\n    \n    BRANCH=$(git branch --show-current 2>/dev/null || echo \"unknown\")\n    FILES_CHANGED=$(git diff --name-only 2>/dev/null | wc -l | tr -d ' ')\n    FILES_LIST=$(git diff --name-only 2>/dev/null | head -10)\n    \n    # Get detailed diff stats\n    DIFF_STATS=$(git diff --stat 2>/dev/null)\n    INSERTIONS=$(echo \"$DIFF_STATS\" | tail -1 | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo \"0\")\n    DELETIONS=$(echo \"$DIFF_STATS\" | tail -1 | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo \"0\")\n    \n    # Recent commits\n    RECENT_COMMITS=$(git log --oneline -5 2>/dev/null || echo \"No recent commits\")\nelse\n    echo \"‚ÑπÔ∏è Not a git repository - skipping git analysis\"\n    BRANCH=\"N/A\"\n    FILES_CHANGED=\"0\"\n    FILES_LIST=\"No git repository\"\n    INSERTIONS=\"0\"\n    DELETIONS=\"0\"\n    RECENT_COMMITS=\"No git repository\"\nfi\n\n# Test results analysis\necho \"üß™ Checking test results...\"\nTEST_RESULTS=\"No test results available\"\nif [ -f \"package.json\" ] && grep -q '\"test\"' package.json 2>/dev/null; then\n    echo \"  ‚Ä¢ Running npm test...\"\n    if timeout 30 npm test -- --silent --passWithNoTests 2>/dev/null; then\n        TEST_RESULTS=\"‚úÖ All tests passed\"\n    else\n        TEST_RESULTS=\"‚ùå Some tests failed - check logs\"\n    fi\nelif command -v pytest >/dev/null 2>&1; then\n    echo \"  ‚Ä¢ Running pytest...\"\n    if timeout 30 pytest --tb=no -q 2>/dev/null; then\n        TEST_RESULTS=\"‚úÖ All Python tests passed\"\n    else\n        TEST_RESULTS=\"‚ùå Some Python tests failed\"\n    fi\nelif [ -f \"Cargo.toml\" ]; then\n    echo \"  ‚Ä¢ Running cargo test...\"\n    if timeout 30 cargo test --quiet 2>/dev/null; then\n        TEST_RESULTS=\"‚úÖ All Rust tests passed\"\n    else\n        TEST_RESULTS=\"‚ùå Some Rust tests failed\"\n    fi\nfi\n\n# Build status analysis\necho \"üèóÔ∏è Checking build status...\"\nBUILD_STATUS=\"No build configuration found\"\nif [ -f \"package.json\" ] && grep -q '\"build\"' package.json 2>/dev/null; then\n    echo \"  ‚Ä¢ Running npm build...\"\n    if timeout 60 npm run build >/dev/null 2>&1; then\n        BUILD_STATUS=\"‚úÖ Build successful\"\n    else\n        BUILD_STATUS=\"‚ùå Build failed\"\n    fi\nelif [ -f \"Cargo.toml\" ]; then\n    echo \"  ‚Ä¢ Running cargo build...\"\n    if timeout 60 cargo build --quiet 2>/dev/null; then\n        BUILD_STATUS=\"‚úÖ Cargo build successful\"\n    else\n        BUILD_STATUS=\"‚ùå Cargo build failed\"\n    fi\nfi\n\n# Generate HTML email content\necho \"üìù Generating email content...\"\n\nHTML_CONTENT=$(cat <<EOF\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background: #f4f4f4; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #007cba; }\n        .stats { background: #f9f9f9; padding: 10px; border-radius: 3px; }\n        pre { background: #f5f5f5; padding: 10px; border-radius: 3px; overflow-x: auto; }\n        .success { color: #28a745; }\n        .error { color: #dc3545; }\n        .info { color: #17a2b8; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>ü§ñ Claude Code Session Summary</h1>\n        <p><strong>Project:</strong> $PROJECT_NAME</p>\n        <p><strong>Session ID:</strong> $SESSION_ID</p>\n        <p><strong>Completed:</strong> $SESSION_END</p>\n        <p><strong>User:</strong> $USER@$HOST</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>üìä Development Statistics</h2>\n        <div class=\"stats\">\n            <ul>\n                <li><strong>Branch:</strong> $BRANCH</li>\n                <li><strong>Files Modified:</strong> $FILES_CHANGED</li>\n                <li><strong>Lines Added:</strong> $INSERTIONS</li>\n                <li><strong>Lines Removed:</strong> $DELETIONS</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>üìÅ Modified Files</h2>\n        <pre>$FILES_LIST</pre>\n    </div>\n\n    <div class=\"section\">\n        <h2>üß™ Test Results</h2>\n        <p>$TEST_RESULTS</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>üèóÔ∏è Build Status</h2>\n        <p>$BUILD_STATUS</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>üìù Recent Commits</h2>\n        <pre>$RECENT_COMMITS</pre>\n    </div>\n\n    <div class=\"section\">\n        <h2>üí° Next Steps</h2>\n        <ul>\n            <li>Review changes and test thoroughly</li>\n            <li>Update documentation if needed</li>\n            <li>Consider code review for significant changes</li>\n            <li>Merge changes when ready</li>\n        </ul>\n    </div>\n\n    <hr>\n    <p><small>Generated automatically by Claude Code Team Summary Hook</small></p>\n</body>\n</html>\nEOF\n)\n\n# Send email based on available method\nSUBJECT=\"Claude Code Session Summary - $PROJECT_NAME ($SESSION_END)\"\n\necho \"üì§ Sending email via $EMAIL_METHOD...\"\n\ncase \"$EMAIL_METHOD\" in\n    \"sendgrid\")\n        SENDGRID_PAYLOAD=$(cat <<EOF\n{\n  \"personalizations\": [{\n    \"to\": [{\"email\": \"$TEAM_EMAIL\"}]\n  }],\n  \"from\": {\"email\": \"claude@yourdomain.com\", \"name\": \"Claude Code\"},\n  \"subject\": \"$SUBJECT\",\n  \"content\": [{\n    \"type\": \"text/html\",\n    \"value\": \"$(echo \"$HTML_CONTENT\" | sed 's/\"/\\\\\"'/g')\"\n  }]\n}\nEOF\n        )\n        \n        if curl -X POST \\\n             -H \"Authorization: Bearer $SENDGRID_API_KEY\" \\\n             -H \"Content-Type: application/json\" \\\n             -d \"$SENDGRID_PAYLOAD\" \\\n             \"https://api.sendgrid.com/v3/mail/send\" \\\n             --silent --show-error 2>/dev/null; then\n            echo \"‚úÖ Email sent successfully via SendGrid\"\n        else\n            echo \"‚ùå Failed to send email via SendGrid\"\n        fi\n        ;;\n    \"mail\")\n        echo \"$HTML_CONTENT\" | mail -s \"$SUBJECT\" -a \"Content-Type: text/html\" \"$TEAM_EMAIL\"\n        echo \"‚úÖ Email sent via system mail command\"\n        ;;\n    \"sendmail\")\n        {\n            echo \"To: $TEAM_EMAIL\"\n            echo \"Subject: $SUBJECT\"\n            echo \"Content-Type: text/html\"\n            echo \"\"\n            echo \"$HTML_CONTENT\"\n        } | sendmail \"$TEAM_EMAIL\"\n        echo \"‚úÖ Email sent via sendmail\"\n        ;;\nesac\n\necho \"\"\necho \"üí° Email Configuration Tips:\"\necho \"  ‚Ä¢ Set TEAM_EMAIL environment variable\"\necho \"  ‚Ä¢ For SendGrid: Set SENDGRID_API_KEY\"\necho \"  ‚Ä¢ For system mail: Install mailutils package\"\necho \"  ‚Ä¢ Configure SMTP settings in your system\"\n\necho \"\"\necho \"üéØ Team summary email generation complete!\"\n\nexit 0"
  },
  "troubleshooting": [
    {
      "issue": "Hook skips email sending with TEAM_EMAIL not configured",
      "solution": "Set the TEAM_EMAIL environment variable before starting Claude Code: 'export TEAM_EMAIL=team@example.com'. Add to .bashrc or .zshrc for persistence across sessions."
    },
    {
      "issue": "SendGrid API returns 401 unauthorized error",
      "solution": "Verify SENDGRID_API_KEY is valid and has Mail Send permissions. Create API keys at SendGrid dashboard. Test with 'curl' command before troubleshooting hook. Check key isn't expired or revoked."
    },
    {
      "issue": "Email content shows HTML markup instead of formatted text",
      "solution": "Your email client may not support HTML rendering. The hook sends multipart emails with HTML content. Check spam folder, or configure email client to render HTML. Use plain text fallback in email settings."
    },
    {
      "issue": "Test and build checks timeout causing incomplete reports",
      "solution": "The hook uses 30-60 second timeouts to prevent hanging. For slower builds, adjust timeout values in the script or disable build checks. Results show 'No test results available' on timeout."
    },
    {
      "issue": "Git statistics show zero changes despite file modifications",
      "solution": "The hook analyzes uncommitted changes using 'git diff'. Stage or commit changes to see them in git analysis. For committed work, check recent commits section which shows last 5 commits regardless of current diff."
    }
  ],
  "source": "community"
}
