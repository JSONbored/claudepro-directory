{
  "slug": "go-module-tidy",
  "description": "Automatically runs go mod tidy when Go files or go.mod are modified to keep dependencies clean",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["go", "golang", "modules", "dependencies", "cleanup"],
  "hookType": "PostToolUse",
  "features": [
    "Automatic go mod tidy execution for Go file and go.mod changes",
    "Go vet integration for static analysis and error detection",
    "Module dependency validation and inconsistency detection",
    "Unused dependency cleanup and missing import resolution",
    "Go workspace and multi-module project support",
    "Dependency vulnerability scanning with go list",
    "Module cache optimization and cleanup suggestions",
    "Build constraint and Go version compatibility checking"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/go-module-tidy.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Go-related file\nif [[ \"$FILE_PATH\" == *.go ]] || [[ \"$FILE_PATH\" == *go.mod ]] || [[ \"$FILE_PATH\" == *go.sum ]] || [[ \"$FILE_PATH\" == *go.work* ]]; then\n  echo \"🔧 Go Module Maintenance for: $(basename \"$FILE_PATH\")\" >&2\n  \n  # Find the Go module root\n  MODULE_DIR=\"$(dirname \"$FILE_PATH\")\"\n  \n  # Walk up the directory tree to find go.mod\n  while [ \"$MODULE_DIR\" != \"/\" ] && [ ! -f \"$MODULE_DIR/go.mod\" ]; do\n    MODULE_DIR=\"$(dirname \"$MODULE_DIR\")\"\n  done\n  \n  if [ ! -f \"$MODULE_DIR/go.mod\" ]; then\n    echo \"⚠️ No go.mod found - not a Go module\" >&2\n    exit 0\n  fi\n  \n  echo \"📁 Go module root: $MODULE_DIR\" >&2\n  cd \"$MODULE_DIR\"\n  \n  # Check if Go is installed\n  if ! command -v go &> /dev/null; then\n    echo \"❌ Go is not installed or not in PATH\" >&2\n    exit 1\n  fi\n  \n  GO_VERSION=$(go version | cut -d' ' -f3 2>/dev/null || echo \"unknown\")\n  echo \"🐹 Go version: $GO_VERSION\" >&2\n  \n  # Initialize maintenance counters\n  ERRORS=0\n  WARNINGS=0\n  FIXED=0\n  \n  # Function to report issues\n  report_issue() {\n    local level=\"$1\"\n    local message=\"$2\"\n    \n    case \"$level\" in\n      \"ERROR\")\n        echo \"❌ ERROR: $message\" >&2\n        ERRORS=$((ERRORS + 1))\n        ;;\n      \"WARNING\")\n        echo \"⚠️ WARNING: $message\" >&2\n        WARNINGS=$((WARNINGS + 1))\n        ;;\n      \"FIXED\")\n        echo \"✅ FIXED: $message\" >&2\n        FIXED=$((FIXED + 1))\n        ;;\n      \"INFO\")\n        echo \"ℹ️ INFO: $message\" >&2\n        ;;\n    esac\n  }\n  \n  # 1. Pre-tidy Module Analysis\n  echo \"📊 Analyzing module state...\" >&2\n  \n  # Check go.mod syntax\n  if ! go mod edit -json > /dev/null 2>&1; then\n    report_issue \"ERROR\" \"go.mod has syntax errors\"\n    exit 1\n  else\n    echo \"   ✅ go.mod syntax is valid\" >&2\n  fi\n  \n  # Get current dependencies before tidy\n  DEPS_BEFORE=$(go list -m all 2>/dev/null | wc -l | xargs || echo \"0\")\n  echo \"   📦 Dependencies before tidy: $DEPS_BEFORE\" >&2\n  \n  # Check for any build errors\n  if go list ./... > /dev/null 2>&1; then\n    echo \"   ✅ Module builds successfully\" >&2\n  else\n    report_issue \"WARNING\" \"Module has build issues that may affect dependency resolution\"\n  fi\n  \n  # 2. Run go mod tidy\n  echo \"🧹 Running go mod tidy...\" >&2\n  \n  if go mod tidy; then\n    report_issue \"FIXED\" \"go mod tidy completed successfully\"\n    \n    # Check dependencies after tidy\n    DEPS_AFTER=$(go list -m all 2>/dev/null | wc -l | xargs || echo \"0\")\n    DEPS_CHANGE=$((DEPS_AFTER - DEPS_BEFORE))\n    \n    if [ \"$DEPS_CHANGE\" -gt 0 ]; then\n      echo \"   📈 Added $DEPS_CHANGE dependencies\" >&2\n    elif [ \"$DEPS_CHANGE\" -lt 0 ]; then\n      echo \"   📉 Removed $((DEPS_CHANGE * -1)) dependencies\" >&2\n    else\n      echo \"   📦 No dependency changes\" >&2\n    fi\n    \n  else\n    report_issue \"ERROR\" \"go mod tidy failed\"\n  fi\n  \n  # 3. Verify go.sum integrity\n  echo \"🔐 Verifying module checksums...\" >&2\n  \n  if go mod verify; then\n    echo \"   ✅ All module checksums verified\" >&2\n  else\n    report_issue \"ERROR\" \"Module checksum verification failed\"\n  fi\n  \n  # 4. Check for vulnerabilities (if govulncheck is available)\n  if command -v govulncheck &> /dev/null; then\n    echo \"🛡️ Scanning for vulnerabilities...\" >&2\n    \n    if govulncheck ./... 2>/dev/null; then\n      echo \"   ✅ No known vulnerabilities found\" >&2\n    else\n      report_issue \"WARNING\" \"Potential vulnerabilities detected - run 'govulncheck ./...' for details\"\n    fi\n  else\n    echo \"   💡 Install govulncheck for vulnerability scanning: go install golang.org/x/vuln/cmd/govulncheck@latest\" >&2\n  fi\n  \n  # 5. Run go vet for Go source files\n  if [[ \"$FILE_PATH\" == *.go ]]; then\n    echo \"🔍 Running go vet...\" >&2\n    \n    if go vet ./...; then\n      echo \"   ✅ go vet passed - no issues found\" >&2\n    else\n      report_issue \"WARNING\" \"go vet found potential issues\"\n    fi\n    \n    # Check for common Go issues\n    echo \"🔍 Additional Go code analysis...\" >&2\n    \n    # Check for gofmt issues\n    UNFORMATTED=$(find . -name '*.go' -not -path './vendor/*' -exec gofmt -l {} \\; 2>/dev/null)\n    if [ -n \"$UNFORMATTED\" ]; then\n      report_issue \"WARNING\" \"Some files are not gofmt formatted\"\n      echo \"$UNFORMATTED\" | head -5 | while read file; do\n        echo \"     $file\" >&2\n      done\n    else\n      echo \"   ✅ All Go files are properly formatted\" >&2\n    fi\n    \n    # Check imports with goimports if available\n    if command -v goimports &> /dev/null; then\n      IMPORT_ISSUES=$(find . -name '*.go' -not -path './vendor/*' -exec goimports -l {} \\; 2>/dev/null)\n      if [ -n \"$IMPORT_ISSUES\" ]; then\n        report_issue \"WARNING\" \"Some files have import formatting issues\"\n      else\n        echo \"   ✅ All imports are properly formatted\" >&2\n      fi\n    fi\n  fi\n  \n  # 6. Module cleanup suggestions\n  echo \"🧹 Module optimization check...\" >&2\n  \n  # Check for indirect dependencies that could be direct\n  INDIRECT_COUNT=$(go list -m all | grep -c '// indirect' || echo \"0\")\n  if [ \"$INDIRECT_COUNT\" -gt 0 ]; then\n    echo \"   📊 Indirect dependencies: $INDIRECT_COUNT\" >&2\n    echo \"   💡 Review if any indirect deps should be direct\" >&2\n  fi\n  \n  # Check for replace directives\n  REPLACE_COUNT=$(grep -c '^replace ' go.mod 2>/dev/null || echo \"0\")\n  if [ \"$REPLACE_COUNT\" -gt 0 ]; then\n    echo \"   🔄 Replace directives: $REPLACE_COUNT\" >&2\n    echo \"   💡 Review replace directives for production readiness\" >&2\n  fi\n  \n  # 7. Workspace support\n  if [ -f \"go.work\" ]; then\n    echo \"🏢 Go workspace detected\" >&2\n    \n    if go work sync; then\n      echo \"   ✅ Workspace synced successfully\" >&2\n    else\n      report_issue \"WARNING\" \"Workspace sync issues detected\"\n    fi\n  fi\n  \n  # 8. Module cache suggestions\n  if [ \"$DEPS_AFTER\" -gt 50 ]; then\n    echo \"💡 Large dependency count - consider 'go clean -modcache' if disk space is low\" >&2\n  fi\n  \n  # 9. Generate Summary Report\n  echo \"\" >&2\n  echo \"📋 Go Module Maintenance Summary:\" >&2\n  echo \"================================\" >&2\n  echo \"   📄 Module: $(basename \"$(pwd)\")\" >&2\n  echo \"   🐹 Go: $GO_VERSION\" >&2\n  echo \"   📦 Dependencies: $DEPS_AFTER\" >&2\n  echo \"   ✅ Fixed: $FIXED\" >&2\n  echo \"   ⚠️ Warnings: $WARNINGS\" >&2\n  echo \"   ❌ Errors: $ERRORS\" >&2\n  \n  if [ \"$ERRORS\" -eq 0 ] && [ \"$WARNINGS\" -eq 0 ]; then\n    echo \"   🎉 Status: EXCELLENT - Module is clean and optimized\" >&2\n  elif [ \"$ERRORS\" -eq 0 ]; then\n    echo \"   ✅ Status: GOOD - Minor warnings to review\" >&2\n  else\n    echo \"   ❌ Status: NEEDS ATTENTION - Errors require fixing\" >&2\n  fi\n  \n  echo \"\" >&2\n  echo \"💡 Go Module Best Practices:\" >&2\n  echo \"   • Run 'go mod tidy' regularly to keep dependencies clean\" >&2\n  echo \"   • Use 'go mod why <module>' to understand dependency reasons\" >&2\n  echo \"   • Update dependencies with 'go get -u ./...' carefully\" >&2\n  echo \"   • Consider using 'go mod graph' for dependency visualization\" >&2\n  echo \"   • Pin important dependencies to specific versions\" >&2\n  \n  # Exit with error if there are critical issues\n  if [ \"$ERRORS\" -gt 0 ]; then\n    echo \"⚠️ Go module maintenance completed with errors\" >&2\n    exit 1\n  fi\n  \nelse\n  # Not a Go file, exit silently\n  exit 0\nfi\n\nexit 0"
  },
  "useCases": [
    "Automated Go dependency management in development workflows",
    "Go module cleanup and optimization in CI/CD pipelines",
    "Multi-module workspace maintenance and synchronization",
    "Go codebase quality assurance with integrated static analysis",
    "Dependency security and vulnerability management"
  ],
  "source": "community"
}
