{
  "slug": "typescript-compilation-checker",
  "seoTitle": "TypeScript Checker",
  "description": "Automatically runs TypeScript compiler checks after editing .ts or .tsx files to catch type errors early",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["typescript", "validation", "type-safety", "compilation"],
  "hookType": "PostToolUse",
  "features": [
    "Real-time TypeScript compilation checking",
    "Type error detection and reporting",
    "No-emit mode for fast validation",
    "TSX and TS file support",
    "Clear error messaging and feedback",
    "Integration with project tsconfig.json"
  ],
  "useCases": [
    "Catch TypeScript errors immediately after editing",
    "Validate type safety before commits",
    "Ensure code compiles without errors",
    "Prevent broken TypeScript from entering codebase",
    "Quick feedback on type-related issues",
    "Maintain code quality standards",
    "Support both .ts and .tsx files",
    "Integration with existing TypeScript projects"
  ],
  "faqTroubleshooting": [
    {
      "issue": "tsc --noEmit checks entire project instead of single file",
      "solution": "TypeScript follows imports checking dependencies. Add --skipLibCheck: 'tsc --noEmit --skipLibCheck \"$FILE_PATH\"' or use --isolatedModules for single-file validation without imports."
    },
    {
      "issue": "Compilation fails with module resolution errors for node_modules",
      "solution": "Missing @types packages or wrong moduleResolution. Install types: 'npm install --save-dev @types/node @types/react'. Set tsconfig: '\"moduleResolution\": \"node\"' or \"bundler\"."
    },
    {
      "issue": "Hook shows success but VSCode still displays type errors",
      "solution": "Different TS versions between CLI and editor. Check: 'npx tsc --version' vs VSCode version. Sync: install workspace TS: 'npm install --save-dev typescript@latest'. Restart VSCode."
    },
    {
      "issue": "'any' type detection misses implicit any from missing type annotations",
      "solution": "grep pattern only finds explicit ': any'. Enable noImplicitAny in tsconfig.json. Or check tsc output: parse 'implicitly has an any type' from compilation errors for complete detection."
    },
    {
      "issue": "Project-wide health check freezes on large monorepos",
      "solution": "Full tsc scans thousands of files. Skip or timeout: 'timeout 10 npx tsc --noEmit >/dev/null 2>&1' with exit code check. Or remove: comment out project compilation section."
    }
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/typescript-compilation-checker.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a TypeScript file\nif [[ \"$FILE_PATH\" == *.ts ]] || [[ \"$FILE_PATH\" == *.tsx ]]; then\n    echo \"üîç TypeScript Compilation Checker - Validating TypeScript code...\"\n    echo \"üìÑ File: $FILE_PATH\"\n    \n    # Check if file exists\n    if [ ! -f \"$FILE_PATH\" ]; then\n        echo \"‚ö†Ô∏è File not found: $FILE_PATH\"\n        exit 1\n    fi\n    \n    # Check if TypeScript is available\n    if ! command -v npx >/dev/null 2>&1; then\n        echo \"‚ö†Ô∏è npx not found - please install Node.js\"\n        exit 1\n    fi\n    \n    if ! npx tsc --version >/dev/null 2>&1; then\n        echo \"‚ö†Ô∏è TypeScript not found - install with: npm install -g typescript\"\n        exit 1\n    fi\n    \n    # Get TypeScript version\n    TS_VERSION=$(npx tsc --version 2>/dev/null | grep -o '[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+')\n    echo \"üì¶ TypeScript version: $TS_VERSION\"\n    \n    # Check for tsconfig.json\n    if [ -f \"tsconfig.json\" ]; then\n        echo \"‚öôÔ∏è Using project tsconfig.json\"\n        CONFIG_FLAG=\"\"\n    else\n        echo \"‚ö†Ô∏è No tsconfig.json found - using default configuration\"\n        CONFIG_FLAG=\"--strict --target es2020 --module esnext --moduleResolution node\"\n    fi\n    \n    echo \"üîç Running TypeScript compilation check...\"\n    \n    # Run TypeScript compiler in no-emit mode\n    if npx tsc --noEmit $CONFIG_FLAG \"$FILE_PATH\" 2>&1; then\n        echo \"‚úÖ TypeScript compilation successful - no type errors found\"\n        \n        # Additional file analysis\n        echo \"\"\n        echo \"üìä File Analysis:\"\n        \n        # Count interfaces, types, classes\n        INTERFACES=$(grep -c '^interface\\\\|^export interface' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        TYPES=$(grep -c '^type\\\\|^export type' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        CLASSES=$(grep -c '^class\\\\|^export class' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        FUNCTIONS=$(grep -c '^function\\\\|^export function' \"$FILE_PATH\" 2>/dev/null || echo 0)\n        \n        echo \"  ‚Ä¢ Interfaces: $INTERFACES\"\n        echo \"  ‚Ä¢ Type aliases: $TYPES\"\n        echo \"  ‚Ä¢ Classes: $CLASSES\"\n        echo \"  ‚Ä¢ Functions: $FUNCTIONS\"\n        \n        # Check for any usage\n        if grep -q ': any' \"$FILE_PATH\" 2>/dev/null; then\n            ANY_COUNT=$(grep -c ': any' \"$FILE_PATH\" 2>/dev/null || echo 0)\n            echo \"  ‚Ä¢ ‚ö†Ô∏è 'any' types found: $ANY_COUNT (consider more specific types)\"\n        fi\n        \n        # Check for strict mode compliance\n        if grep -q '\"use strict\"' \"$FILE_PATH\" 2>/dev/null; then\n            echo \"  ‚Ä¢ ‚úÖ Strict mode enabled\"\n        fi\n        \n    else\n        echo \"‚ùå TypeScript compilation failed - type errors detected\"\n        echo \"\"\n        echo \"üí° Common fixes:\"\n        echo \"  ‚Ä¢ Check for missing type annotations\"\n        echo \"  ‚Ä¢ Verify import statements are correct\"\n        echo \"  ‚Ä¢ Ensure all variables are properly typed\"\n        echo \"  ‚Ä¢ Check for undefined/null value handling\"\n        echo \"  ‚Ä¢ Verify function return types match implementation\"\n        exit 1\n    fi\n    \n    # Project-wide TypeScript health check\n    echo \"\"\n    echo \"üèóÔ∏è Project TypeScript Health:\"\n    \n    # Count total TypeScript files\n    TS_FILES=$(find . -name \"*.ts\" -o -name \"*.tsx\" | grep -v node_modules | wc -l)\n    echo \"  ‚Ä¢ Total TS/TSX files: $TS_FILES\"\n    \n    # Check if project compiles\n    if [ -f \"tsconfig.json\" ]; then\n        echo \"  ‚Ä¢ üîç Checking project compilation...\"\n        if npx tsc --noEmit >/dev/null 2>&1; then\n            echo \"  ‚Ä¢ ‚úÖ Project compiles successfully\"\n        else\n            echo \"  ‚Ä¢ ‚ö†Ô∏è Project has compilation errors - run 'npx tsc --noEmit' for details\"\n        fi\n    fi\n    \n    echo \"\"\n    echo \"üí° TypeScript Best Practices:\"\n    echo \"  ‚Ä¢ Use strict TypeScript configuration\"\n    echo \"  ‚Ä¢ Avoid 'any' types when possible\"\n    echo \"  ‚Ä¢ Use union types for multiple possibilities\"\n    echo \"  ‚Ä¢ Implement proper error handling with typed exceptions\"\n    echo \"  ‚Ä¢ Use interface segregation principle\"\n    \n    echo \"\"\n    echo \"üéØ TypeScript validation complete!\"\n    \nelse\n    echo \"‚ÑπÔ∏è File is not a TypeScript file: $FILE_PATH\"\nfi\n\nexit 0"
  },
  "source": "community"
}
