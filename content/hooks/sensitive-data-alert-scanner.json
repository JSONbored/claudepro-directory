{
  "slug": "sensitive-data-alert-scanner",
  "description": "Scans for potential sensitive data exposure and alerts immediately",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "security",
    "sensitive-data",
    "notification",
    "scanning",
    "privacy"
  ],
  "hookType": "Notification",
  "features": [
    "Real-time sensitive data detection",
    "API key and token scanning",
    "Password exposure prevention",
    "Email address detection",
    "Personal information monitoring",
    "Immediate security alerts"
  ],
  "useCases": [
    "Prevent accidental commits of API keys and secrets",
    "Detect exposed passwords in code files",
    "Monitor for personal information leaks",
    "Alert on potential security vulnerabilities",
    "Scan for hardcoded credentials",
    "Identify email addresses in code",
    "Prevent sensitive data exposure in repositories",
    "Maintain security compliance standards"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "notification": {
          "script": "./.claude/hooks/sensitive-data-alert-scanner.sh",
          "matchers": [
            "*"
          ]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Only scan for Write and Edit operations\nif [[ \"$TOOL_NAME\" != \"Write\" && \"$TOOL_NAME\" != \"Edit\" ]]; then\n  exit 0\nfi\n\necho \"üîí Sensitive Data Alert Scanner - Analyzing file for security risks...\"\necho \"üìÑ File: $FILE_PATH\"\n\n# Check if file exists and is readable\nif [ ! -f \"$FILE_PATH\" ]; then\n    echo \"‚ö†Ô∏è File not found: $FILE_PATH\"\n    exit 0\nfi\n\n# Skip binary files\nif file \"$FILE_PATH\" | grep -q binary; then\n    echo \"‚ÑπÔ∏è Skipping binary file\"\n    exit 0\nfi\n\nSECURITY_ISSUES=0\nWARNINGS=0\n\necho \"üîç Scanning for sensitive data patterns...\"\n\n# 1. API Keys and Secrets\necho \"üîë Checking for API keys and secrets...\"\nAPI_PATTERNS=(\n    \"api[_-]?key\\s*[:=]\\s*[\\\"'][^\\\"']{8,}[\\\"']\"\n    \"secret[_-]?key\\s*[:=]\\s*[\\\"'][^\\\"']{8,}[\\\"']\"\n    \"access[_-]?token\\s*[:=]\\s*[\\\"'][^\\\"']{10,}[\\\"']\"\n    \"private[_-]?key\\s*[:=]\\s*[\\\"'][^\\\"']{20,}[\\\"']\"\n    \"client[_-]?secret\\s*[:=]\\s*[\\\"'][^\\\"']{8,}[\\\"']\"\n)\n\nfor pattern in \"${API_PATTERNS[@]}\"; do\n    if grep -iE \"$pattern\" \"$FILE_PATH\" 2>/dev/null | grep -v -iE \"(\\*\\*\\*|example|placeholder|your[_-]|demo|test|fake|dummy)\"; then\n        echo \"üö® SECURITY ALERT: Potential API key/secret detected!\"\n        SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\n    fi\ndone\n\n# 2. Password patterns\necho \"üîê Checking for password exposure...\"\nPASSWORD_PATTERNS=(\n    \"password\\s*[:=]\\s*[\\\"'][^\\\"']{6,}[\\\"']\"\n    \"passwd\\s*[:=]\\s*[\\\"'][^\\\"']{6,}[\\\"']\"\n    \"pwd\\s*[:=]\\s*[\\\"'][^\\\"']{6,}[\\\"']\"\n)\n\nfor pattern in \"${PASSWORD_PATTERNS[@]}\"; do\n    if grep -iE \"$pattern\" \"$FILE_PATH\" 2>/dev/null | grep -v -iE \"(\\*\\*\\*|example|placeholder|your[_-]|demo|test|123456|password)\"; then\n        echo \"üö® SECURITY ALERT: Potential password detected!\"\n        SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\n    fi\ndone\n\n# 3. Database connection strings\necho \"üóÑÔ∏è Checking for database credentials...\"\nif grep -iE \"(mysql://|postgresql://|mongodb://|redis://).*:.*@\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"üö® SECURITY ALERT: Database connection string with credentials detected!\"\n    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\nfi\n\n# 4. JWT tokens\necho \"üé´ Checking for JWT tokens...\"\nif grep -E \"eyJ[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"üö® SECURITY ALERT: JWT token detected!\"\n    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\nfi\n\n# 5. SSH private keys\necho \"üîë Checking for SSH private keys...\"\nif grep -q \"BEGIN.*PRIVATE KEY\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"üö® SECURITY ALERT: SSH private key detected!\"\n    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\nfi\n\n# 6. Email addresses (warning, not critical)\necho \"üìß Checking for email addresses...\"\nif grep -E \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\" \"$FILE_PATH\" 2>/dev/null | head -3; then\n    echo \"‚ö†Ô∏è Email addresses detected - ensure this is intentional\"\n    WARNINGS=$((WARNINGS + 1))\nfi\n\n# 7. Credit card patterns (basic check)\necho \"üí≥ Checking for credit card numbers...\"\nif grep -E \"[0-9]{4}[\\s-]?[0-9]{4}[\\s-]?[0-9]{4}[\\s-]?[0-9]{4}\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"üö® SECURITY ALERT: Potential credit card number detected!\"\n    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\nfi\n\n# 8. Social Security Numbers (US format)\necho \"üÜî Checking for SSN patterns...\"\nif grep -E \"[0-9]{3}-[0-9]{2}-[0-9]{4}\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"üö® SECURITY ALERT: Potential SSN detected!\"\n    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))\nfi\n\n# 9. Phone numbers\necho \"üìû Checking for phone numbers...\"\nif grep -E \"\\+?[1-9][0-9]{1,3}[\\s-]?\\(?[0-9]{3}\\)?[\\s-]?[0-9]{3}[\\s-]?[0-9]{4}\" \"$FILE_PATH\" 2>/dev/null; then\n    echo \"‚ö†Ô∏è Phone numbers detected - verify if intentional\"\n    WARNINGS=$((WARNINGS + 1))\nfi\n\n# Summary\necho \"\"\necho \"üìä Security Scan Results:\"\necho \"  ‚Ä¢ Critical Issues: $SECURITY_ISSUES\"\necho \"  ‚Ä¢ Warnings: $WARNINGS\"\n\nif [ $SECURITY_ISSUES -gt 0 ]; then\n    echo \"\"\n    echo \"üö® CRITICAL SECURITY ALERT!\"\n    echo \"üõ°Ô∏è Action Required:\"\n    echo \"  ‚Ä¢ Review detected sensitive data immediately\"\n    echo \"  ‚Ä¢ Remove or mask sensitive information\"\n    echo \"  ‚Ä¢ Use environment variables for secrets\"\n    echo \"  ‚Ä¢ Consider using a secrets management service\"\n    echo \"  ‚Ä¢ Check if file should be added to .gitignore\"\nfi\n\nif [ $WARNINGS -gt 0 ]; then\n    echo \"\"\n    echo \"‚ö†Ô∏è Security Warnings:\"\n    echo \"  ‚Ä¢ Review detected information for necessity\"\n    echo \"  ‚Ä¢ Consider data privacy implications\"\n    echo \"  ‚Ä¢ Verify compliance with data protection regulations\"\nfi\n\necho \"\"\necho \"üí° Security Best Practices:\"\necho \"  ‚Ä¢ Use environment variables for sensitive data\"\necho \"  ‚Ä¢ Implement proper secrets management\"\necho \"  ‚Ä¢ Add sensitive files to .gitignore\"\necho \"  ‚Ä¢ Regular security audits of codebase\"\necho \"  ‚Ä¢ Use code scanning tools in CI/CD\"\n\necho \"\"\necho \"üéØ Security scan complete!\"\n\nexit 0"
  },
  "source": "community"
}
