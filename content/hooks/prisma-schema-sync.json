{
  "slug": "prisma-schema-sync",
  "description": "Automatically generates Prisma client and creates migrations when schema.prisma is modified",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": ["prisma", "database", "orm", "schema", "migrations"],
  "hookType": "PostToolUse",
  "features": [
    "Automatic Prisma client generation",
    "Database migration creation",
    "Schema validation and formatting",
    "TypeScript type generation",
    "Database synchronization",
    "Migration safety checks"
  ],
  "useCases": [
    "Keep Prisma client in sync with schema changes",
    "Automatically create database migrations",
    "Validate Prisma schema syntax on changes",
    "Generate TypeScript types for database models",
    "Format Prisma schema files consistently",
    "Ensure database schema consistency",
    "Streamline database development workflow",
    "Catch schema errors early in development"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/prisma-schema-sync.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Prisma schema file\nif [[ \"$FILE_PATH\" == *schema.prisma ]]; then\n    echo \"üîÑ Prisma Schema Sync - Processing schema changes...\"\n    echo \"üìÑ Schema file: $FILE_PATH\"\n    \n    # Check if Prisma is available\n    if ! command -v npx >/dev/null 2>&1; then\n        echo \"‚ö†Ô∏è npx not found. Please install Node.js and npm\"\n        exit 1\n    fi\n    \n    # Step 1: Validate schema\n    echo \"üîç Validating Prisma schema...\"\n    if npx prisma validate; then\n        echo \"‚úÖ Schema validation passed\"\n    else\n        echo \"‚ùå Schema validation failed - Please fix errors before proceeding\"\n        exit 1\n    fi\n    \n    # Step 2: Format schema\n    echo \"üìù Formatting Prisma schema...\"\n    if npx prisma format; then\n        echo \"‚úÖ Schema formatted successfully\"\n    else\n        echo \"‚ö†Ô∏è Schema formatting failed\"\n    fi\n    \n    # Step 3: Generate Prisma client\n    echo \"üèóÔ∏è Generating Prisma client...\"\n    if npx prisma generate; then\n        echo \"‚úÖ Prisma client generated successfully\"\n    else\n        echo \"‚ùå Prisma client generation failed\"\n        exit 1\n    fi\n    \n    # Step 4: Create migration (dev mode only)\n    if [ \"$NODE_ENV\" != \"production\" ]; then\n        echo \"üóÑÔ∏è Creating database migration...\"\n        MIGRATION_NAME=\"auto_migration_$(date +%Y%m%d_%H%M%S)\"\n        \n        if npx prisma migrate dev --name \"$MIGRATION_NAME\" --create-only; then\n            echo \"‚úÖ Migration created: $MIGRATION_NAME\"\n            echo \"‚ö†Ô∏è Please review the migration before applying it to your database\"\n            echo \"üí° Apply with: npx prisma migrate dev\"\n        else\n            echo \"‚ö†Ô∏è Migration creation skipped or failed\"\n        fi\n    else\n        echo \"‚ÑπÔ∏è Production environment - skipping migration creation\"\n    fi\n    \n    echo \"\"\n    echo \"üí° Prisma Sync Tips:\"\n    echo \"  ‚Ä¢ Review generated migrations before applying\"\n    echo \"  ‚Ä¢ Use 'npx prisma studio' to explore your database\"\n    echo \"  ‚Ä¢ Run 'npx prisma db push' for prototyping\"\n    echo \"  ‚Ä¢ Use 'npx prisma migrate reset' to reset development database\"\n    \n    echo \"\"\n    echo \"üéØ Prisma schema sync complete!\"\n    \nelse\n    echo \"‚ÑπÔ∏è File is not a Prisma schema file: $FILE_PATH\"\nfi\n\nexit 0"
  },
  "troubleshooting": [
    {
      "issue": "npx prisma generate fails with 'generator not found' error",
      "solution": "Prisma client not installed or wrong version. Run: 'npm install @prisma/client' matching schema generator. Verify: 'npx prisma version' showing versions. Re-generate with full schema path."
    },
    {
      "issue": "Migration creation hangs waiting for database connection that fails",
      "solution": "DATABASE_URL missing or incorrect in .env. Verify: 'echo $DATABASE_URL' showing connection. Test: 'npx prisma db pull' for connectivity. Or use '--skip-generate' flag bypassing DB."
    },
    {
      "issue": "Auto-migration creates duplicate migrations for identical schema changes",
      "solution": "Timestamp-based naming always creates new migration. Add check: 'git diff prisma/schema.prisma | grep \"^+model\"' detecting real changes. Or use 'npx prisma migrate diff' to compare first."
    },
    {
      "issue": "prisma format changes schema but hook shows no modifications",
      "solution": "Formatting occurs after file write completing hook execution. Move format before validation: reorder script or use: 'npx prisma format && npx prisma validate' ensuring formatted state checked."
    },
    {
      "issue": "Hook runs in production despite NODE_ENV check skipping migrations",
      "solution": "NODE_ENV not set in deployment defaulting to undefined. Export: 'export NODE_ENV=production' in shell profile. Or check: 'if [ \"$NODE_ENV\" = \"production\" ] || [ -z \"$NODE_ENV\" ]'."
    }
  ],
  "documentationUrl": "https://www.prisma.io/docs",
  "source": "community"
}
