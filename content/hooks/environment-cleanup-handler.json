{
  "slug": "environment-cleanup-handler",
  "description": "Cleans up temporary files, caches, and resources when Claude session ends",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "cleanup",
    "stop-hook",
    "maintenance",
    "resources",
    "optimization"
  ],
  "hookType": "Stop",
  "features": [
    "Automatic temporary file cleanup (*.tmp, *.log, .DS_Store, Thumbs.db)",
    "NPM cache verification and cleanup",
    "Python bytecode and __pycache__ directory removal",
    "Development build artifacts cleanup",
    "Disk space usage reporting and optimization",
    "Multi-platform support (macOS, Linux, Windows)",
    "Safe cleanup with error handling and logging",
    "Cache invalidation for faster future builds"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "stop": {
          "script": "./.claude/hooks/environment-cleanup-handler.sh"
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\necho \"🧹 Starting environment cleanup...\" >&2\n\n# Initialize cleanup counters\nFILES_REMOVED=0\nSPACE_FREED=0\nERRORS=0\n\n# Function to safely remove files and count them\nsafe_remove() {\n  local pattern=\"$1\"\n  local description=\"$2\"\n  \n  echo \"📁 Cleaning $description...\" >&2\n  \n  if [ \"$pattern\" = \"__pycache__\" ]; then\n    # Special handling for __pycache__ directories\n    FOUND=$(find . -type d -name \"__pycache__\" 2>/dev/null | wc -l | xargs)\n    if [ \"$FOUND\" -gt 0 ]; then\n      find . -type d -name \"__pycache__\" -exec rm -rf {} + 2>/dev/null && echo \"  ✅ Removed $FOUND __pycache__ directories\" >&2\n      FILES_REMOVED=$((FILES_REMOVED + FOUND))\n    else\n      echo \"  ℹ️ No __pycache__ directories found\" >&2\n    fi\n  else\n    # Handle file patterns\n    FOUND=$(find . -name \"$pattern\" 2>/dev/null | wc -l | xargs)\n    if [ \"$FOUND\" -gt 0 ]; then\n      find . -name \"$pattern\" -delete 2>/dev/null && echo \"  ✅ Removed $FOUND $description files\" >&2\n      FILES_REMOVED=$((FILES_REMOVED + FOUND))\n    else\n      echo \"  ℹ️ No $description files found\" >&2\n    fi\n  fi\n}\n\n# Clean temporary files\nsafe_remove \"*.tmp\" \"temporary\"\nsafe_remove \"*.log\" \"log\"\nsafe_remove \"*.bak\" \"backup\"\nsafe_remove \"*~\" \"editor backup\"\n\n# Clean system-specific files\ncase \"$(uname)\" in\n  Darwin)\n    safe_remove \".DS_Store\" \"macOS metadata\"\n    safe_remove \"._*\" \"macOS resource fork\"\n    ;;\n  CYGWIN*|MINGW*|MSYS*)\n    safe_remove \"Thumbs.db\" \"Windows thumbnail cache\"\n    safe_remove \"Desktop.ini\" \"Windows desktop config\"\n    ;;\n  Linux)\n    safe_remove \".directory\" \"KDE directory config\"\n    ;;\nesac\n\n# Clean Python cache files\necho \"🐍 Cleaning Python artifacts...\" >&2\nsafe_remove \"*.pyc\" \"Python bytecode\"\nsafe_remove \"*.pyo\" \"Python optimized bytecode\"\nsafe_remove \"__pycache__\" \"Python cache directories\"\n\n# Clean Node.js related files\nif [ -f \"package.json\" ]; then\n  echo \"🟢 Node.js project detected - cleaning caches...\" >&2\n  \n  # Clean npm cache\n  if command -v npm &> /dev/null; then\n    echo \"  🗑️ Verifying npm cache...\" >&2\n    if npm cache verify 2>/dev/null; then\n      echo \"  ✅ npm cache verified and cleaned\" >&2\n    else\n      echo \"  ⚠️ npm cache verification failed\" >&2\n      ERRORS=$((ERRORS + 1))\n    fi\n  fi\n  \n  # Clean node_modules/.cache if it exists\n  if [ -d \"node_modules/.cache\" ]; then\n    CACHE_SIZE=$(du -sh node_modules/.cache 2>/dev/null | cut -f1 || echo \"unknown\")\n    rm -rf node_modules/.cache 2>/dev/null && echo \"  ✅ Removed node_modules/.cache ($CACHE_SIZE)\" >&2\n  fi\nfi\n\n# Clean build artifacts\necho \"🔧 Cleaning build artifacts...\" >&2\nsafe_remove \"*.o\" \"object files\"\nsafe_remove \"*.obj\" \"Windows object files\"\nsafe_remove \"*.so\" \"shared object files\"\nsafe_remove \"*.dll\" \"Windows library files\"\nsafe_remove \"*.dylib\" \"macOS dynamic libraries\"\n\n# Clean IDE and editor files\necho \"💻 Cleaning IDE artifacts...\" >&2\nsafe_remove \".vscode/settings.json.bak\" \"VS Code backup settings\"\nif [ -d \".vscode\" ]; then\n  find .vscode -name \"*.log\" -delete 2>/dev/null || true\nfi\n\n# Clean test artifacts\necho \"🧪 Cleaning test artifacts...\" >&2\nsafe_remove \"coverage.xml\" \"coverage report\"\nsafe_remove \".coverage\" \"Python coverage data\"\nif [ -d \"coverage\" ]; then\n  rm -rf coverage 2>/dev/null && echo \"  ✅ Removed coverage directory\" >&2\nfi\nif [ -d \".nyc_output\" ]; then\n  rm -rf .nyc_output 2>/dev/null && echo \"  ✅ Removed .nyc_output directory\" >&2\nfi\n\n# Clean Docker artifacts if Docker is available\nif command -v docker &> /dev/null && docker info &> /dev/null 2>&1; then\n  echo \"🐳 Docker detected - cleaning unused resources...\" >&2\n  \n  # Clean dangling images\n  DANGLING_IMAGES=$(docker images -f \"dangling=true\" -q 2>/dev/null | wc -l | xargs)\n  if [ \"$DANGLING_IMAGES\" -gt 0 ]; then\n    docker image prune -f &> /dev/null && echo \"  ✅ Removed $DANGLING_IMAGES dangling Docker images\" >&2\n  else\n    echo \"  ℹ️ No dangling Docker images found\" >&2\n  fi\nfi\n\n# Calculate disk space if possible\necho \"💾 Calculating disk space usage...\" >&2\nif command -v du &> /dev/null; then\n  # Check cache directories\n  for cache_dir in ~/.npm ~/.cache ~/.cargo/registry; do\n    if [ -d \"$cache_dir\" ]; then\n      CACHE_SIZE=$(du -sh \"$cache_dir\" 2>/dev/null | cut -f1 || echo \"unknown\")\n      echo \"  📊 $cache_dir: $CACHE_SIZE\" >&2\n    fi\n  done\nfi\n\n# Report cleanup summary\necho \"\" >&2\necho \"📋 Cleanup Summary:\" >&2\necho \"  🗑️ Files/directories removed: $FILES_REMOVED\" >&2\necho \"  ⚠️ Errors encountered: $ERRORS\" >&2\n\nif [ \"$ERRORS\" -eq 0 ]; then\n  echo \"✅ Environment cleanup completed successfully\" >&2\nelse\n  echo \"⚠️ Environment cleanup completed with $ERRORS errors\" >&2\nfi\n\necho \"\" >&2\necho \"💡 Cleanup Tips:\" >&2\necho \"   • Run 'docker system prune' for more aggressive Docker cleanup\" >&2\necho \"   • Use 'npm cache clean --force' for complete npm cache reset\" >&2\necho \"   • Consider 'pip cache purge' for Python package cache cleanup\" >&2\n\nexit 0"
  },
  "useCases": [
    "Automated development environment maintenance",
    "Post-session cleanup for CI/CD pipelines",
    "Disk space optimization and management",
    "Multi-language project artifact cleanup",
    "Docker container development environment cleanup"
  ],
  "source": "community"
}
