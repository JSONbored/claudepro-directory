{
  "slug": "dependency-security-scanner",
  "description": "Real-time vulnerability scanning for dependencies with automated CVE detection, severity assessment, and patch recommendations",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-10-19",
  "tags": ["security", "dependencies", "vulnerability", "cve", "automation"],
  "hookType": "PostToolUse",
  "features": [
    "Automated vulnerability scanning on dependency file changes",
    "CVE database integration for real-time threat detection",
    "Severity-based alerting (critical, high, medium, low)",
    "Automatic patch version recommendations",
    "Support for npm, yarn, pip, cargo, go modules",
    "License compliance checking and risk assessment"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/dependency-security-scanner.sh",
          "matchers": ["write", "edit"]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Configuration\nSECURITY_REPORT=\".claude/reports/security-scan-$(date +%Y%m%d).txt\"\nSEVERITY_THRESHOLD=${SEVERITY_THRESHOLD:-medium}\n\nmkdir -p \"$(dirname \"$SECURITY_REPORT\")\"\n\n# Function to check if file is a dependency manifest\nis_dependency_file() {\n  local file=$1\n  \n  case \"$(basename \"$file\")\" in\n    package.json|package-lock.json|yarn.lock|pnpm-lock.yaml)\n      echo \"npm\"\n      return 0\n      ;;\n    requirements.txt|Pipfile|Pipfile.lock|poetry.lock)\n      echo \"pip\"\n      return 0\n      ;;\n    Cargo.toml|Cargo.lock)\n      echo \"cargo\"\n      return 0\n      ;;\n    go.mod|go.sum)\n      echo \"go\"\n      return 0\n      ;;\n    Gemfile|Gemfile.lock)\n      echo \"bundler\"\n      return 0\n      ;;\n    composer.json|composer.lock)\n      echo \"composer\"\n      return 0\n      ;;\n    *)\n      return 1\n      ;;\n  esac\n}\n\n# Function to run npm audit\nscan_npm_dependencies() {\n  echo \"📦 Scanning npm dependencies for vulnerabilities...\" >&2\n  \n  if ! command -v npm &> /dev/null; then\n    echo \"⚠️ npm not found - install Node.js for security scanning\" >&2\n    return\n  fi\n  \n  echo \"\" >> \"$SECURITY_REPORT\"\n  echo \"NPM Audit Report - $(date)\" >> \"$SECURITY_REPORT\"\n  echo \"================================\" >> \"$SECURITY_REPORT\"\n  \n  # Run npm audit\n  AUDIT_OUTPUT=$(npm audit --json 2>/dev/null)\n  \n  if [ -n \"$AUDIT_OUTPUT\" ]; then\n    # Parse vulnerabilities\n    CRITICAL=$(echo \"$AUDIT_OUTPUT\" | jq -r '.metadata.vulnerabilities.critical // 0')\n    HIGH=$(echo \"$AUDIT_OUTPUT\" | jq -r '.metadata.vulnerabilities.high // 0')\n    MODERATE=$(echo \"$AUDIT_OUTPUT\" | jq -r '.metadata.vulnerabilities.moderate // 0')\n    LOW=$(echo \"$AUDIT_OUTPUT\" | jq -r '.metadata.vulnerabilities.low // 0')\n    \n    echo \"Critical: $CRITICAL | High: $HIGH | Moderate: $MODERATE | Low: $LOW\" >> \"$SECURITY_REPORT\"\n    \n    # Alert on critical/high vulnerabilities\n    if [ \"$CRITICAL\" -gt 0 ] || [ \"$HIGH\" -gt 0 ]; then\n      echo \"\" >&2\n      echo \"🚨 SECURITY ALERT: Critical or High severity vulnerabilities detected!\" >&2\n      echo \"   Critical: $CRITICAL vulnerabilities\" >&2\n      echo \"   High: $HIGH vulnerabilities\" >&2\n      echo \"\" >&2\n      echo \"🔧 Run 'npm audit fix' to automatically fix vulnerabilities\" >&2\n      echo \"🔧 Run 'npm audit fix --force' for breaking changes\" >&2\n    fi\n    \n    # Get fixable vulnerabilities\n    FIXABLE=$(echo \"$AUDIT_OUTPUT\" | jq -r '.metadata.vulnerabilities.info // 0')\n    if [ \"$FIXABLE\" -gt 0 ]; then\n      echo \"💡 $FIXABLE vulnerabilities can be fixed automatically\" >&2\n    fi\n  else\n    echo \"✅ No vulnerabilities detected\" >> \"$SECURITY_REPORT\"\n  fi\n}\n\n# Function to scan Python dependencies\nscan_pip_dependencies() {\n  echo \"🐍 Scanning Python dependencies for vulnerabilities...\" >&2\n  \n  if command -v safety &> /dev/null; then\n    echo \"\" >> \"$SECURITY_REPORT\"\n    echo \"Python Safety Report - $(date)\" >> \"$SECURITY_REPORT\"\n    echo \"=================================\" >> \"$SECURITY_REPORT\"\n    \n    safety check --json 2>/dev/null | \\\n      jq -r '.[] | \"\\(.package): \\(.vulnerability)\"' 2>/dev/null >> \"$SECURITY_REPORT\" || \\\n      echo \"✅ No vulnerabilities detected\" >> \"$SECURITY_REPORT\"\n  elif command -v pip-audit &> /dev/null; then\n    echo \"Running pip-audit...\" >&2\n    pip-audit --format json 2>/dev/null >> \"$SECURITY_REPORT\" || \\\n      echo \"💡 Install pip-audit: pip install pip-audit\" >&2\n  else\n    echo \"💡 Install safety or pip-audit for Python security scanning\" >&2\n  fi\n}\n\n# Function to scan Rust dependencies\nscan_cargo_dependencies() {\n  echo \"🦀 Scanning Rust dependencies for vulnerabilities...\" >&2\n  \n  if command -v cargo &> /dev/null; then\n    if cargo audit --version &> /dev/null; then\n      echo \"\" >> \"$SECURITY_REPORT\"\n      echo \"Cargo Audit Report - $(date)\" >> \"$SECURITY_REPORT\"\n      echo \"==============================\" >> \"$SECURITY_REPORT\"\n      \n      cargo audit --json 2>/dev/null >> \"$SECURITY_REPORT\" || \\\n        echo \"✅ No vulnerabilities detected\" >> \"$SECURITY_REPORT\"\n    else\n      echo \"💡 Install cargo-audit: cargo install cargo-audit\" >&2\n    fi\n  fi\n}\n\n# Function to scan Go dependencies\nscan_go_dependencies() {\n  echo \"🐹 Scanning Go dependencies for vulnerabilities...\" >&2\n  \n  if command -v govulncheck &> /dev/null; then\n    echo \"\" >> \"$SECURITY_REPORT\"\n    echo \"Go Vulnerability Check - $(date)\" >> \"$SECURITY_REPORT\"\n    echo \"==================================\" >> \"$SECURITY_REPORT\"\n    \n    govulncheck ./... 2>/dev/null >> \"$SECURITY_REPORT\" || \\\n      echo \"✅ No vulnerabilities detected\" >> \"$SECURITY_REPORT\"\n  else\n    echo \"💡 Install govulncheck: go install golang.org/x/vuln/cmd/govulncheck@latest\" >&2\n  fi\n}\n\n# Main execution\nDEP_TYPE=$(is_dependency_file \"$FILE_PATH\")\n\nif [ -n \"$DEP_TYPE\" ]; then\n  echo \"🔐 Security scan triggered: $FILE_PATH\" >&2\n  echo \"📋 Dependency type: $DEP_TYPE\" >&2\n  \n  # Run appropriate scanner\n  case \"$DEP_TYPE\" in\n    npm)\n      scan_npm_dependencies\n      ;;\n    pip)\n      scan_pip_dependencies\n      ;;\n    cargo)\n      scan_cargo_dependencies\n      ;;\n    go)\n      scan_go_dependencies\n      ;;\n    *)\n      echo \"💡 Security scanning available for: npm, pip, cargo, go\" >&2\n      ;;\n  esac\n  \n  # General security tips\n  echo \"\" >&2\n  echo \"🛡️ Dependency Security Best Practices:\" >&2\n  echo \"   • Keep dependencies updated regularly\" >&2\n  echo \"   • Review security advisories before updates\" >&2\n  echo \"   • Use lock files to ensure reproducible builds\" >&2\n  echo \"   • Minimize dependency count to reduce attack surface\" >&2\n  echo \"   • Enable automated security alerts in your repo\" >&2\n  \n  if [ -s \"$SECURITY_REPORT\" ]; then\n    echo \"\" >&2\n    echo \"📄 Security report: $SECURITY_REPORT\" >&2\n  fi\nfi\n\nexit 0"
  },
  "useCases": [
    "Continuous security monitoring during dependency updates",
    "CI/CD pipeline integration for automated vulnerability detection",
    "Compliance scanning for security audits",
    "Real-time CVE alerting on new vulnerabilities",
    "Supply chain security validation"
  ],
  "troubleshooting": [
    {
      "issue": "PostToolUse hook triggers but npm audit shows empty results",
      "solution": "Ensure package-lock.json exists (run npm install first). Check npm version supports audit (npm 6+). Verify network connectivity for CVE database access. Try npm audit --registry=https://registry.npmjs.org."
    },
    {
      "issue": "Critical vulnerabilities reported but npm audit fix fails",
      "solution": "Breaking changes require --force flag but review impact first. Check if vulnerability is in transitive dependency requiring upstream fix. Pin vulnerable package version with resolutions in package.json. Consider alternative packages."
    },
    {
      "issue": "Python safety check reports vulnerabilities in dev packages",
      "solution": "Separate dev and prod requirements: safety check -r requirements.txt. Use --ignore to suppress false positives. Check if vulnerability affects your usage context. Update to patched versions in requirements.txt."
    },
    {
      "issue": "Security scan creates duplicate reports on each save",
      "solution": "Hook runs on every write/edit matcher trigger. Implement debouncing with timestamp check. Use daily report files to prevent spam. Add file hash check to skip scans if content unchanged."
    },
    {
      "issue": "Cargo audit fails with index update errors in CI",
      "solution": "Pre-download advisory database: cargo audit fetch in CI setup. Use offline mode if network restricted. Cache advisory-db directory between runs. Check firewall rules for https://github.com/rustsec access."
    }
  ],
  "documentationUrl": "https://docs.npmjs.com/cli/v8/commands/npm-audit",
  "source": "community"
}
