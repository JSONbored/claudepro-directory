{
  "slug": "nextjs-route-analyzer",
  "description": "Analyzes Next.js page routes and generates a route map when pages are added or modified",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "nextjs",
    "routing",
    "pages",
    "analysis",
    "documentation"
  ],
  "hookType": "PostToolUse",
  "features": [
    "Comprehensive Next.js route analysis for both Pages and App Router",
    "Dynamic route detection with parameter mapping",
    "API endpoint discovery and documentation generation",
    "Route hierarchy visualization and structure analysis",
    "Catch-all and optional catch-all route detection",
    "Route groups and parallel routes analysis",
    "Static and dynamic route classification",
    "Route map generation with export capabilities"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "postToolUse": {
          "script": "./.claude/hooks/nextjs-route-analyzer.sh",
          "matchers": [
            "write",
            "edit"
          ]
        }
      }
    },
    "scriptContent": "#!/usr/bin/env bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\nif [ -z \"$FILE_PATH\" ]; then\n  exit 0\nfi\n\n# Check if this is a Next.js page, component, or route file\nif [[ \"$FILE_PATH\" == *pages/*.* ]] || [[ \"$FILE_PATH\" == *app/*.* ]] || [[ \"$FILE_PATH\" == *src/pages/*.* ]] || [[ \"$FILE_PATH\" == *src/app/*.* ]]; then\n  echo \"🗺️ Next.js Route Analysis for: $(basename \"$FILE_PATH\")\" >&2\n  \n  # Initialize analysis counters\n  TOTAL_ROUTES=0\n  STATIC_ROUTES=0\n  DYNAMIC_ROUTES=0\n  API_ROUTES=0\n  CATCH_ALL_ROUTES=0\n  ERRORS=0\n  WARNINGS=0\n  \n  # Function to report analysis results\n  report_analysis() {\n    local level=\"$1\"\n    local message=\"$2\"\n    \n    case \"$level\" in\n      \"ERROR\")\n        echo \"❌ ERROR: $message\" >&2\n        ERRORS=$((ERRORS + 1))\n        ;;\n      \"WARNING\")\n        echo \"⚠️ WARNING: $message\" >&2\n        WARNINGS=$((WARNINGS + 1))\n        ;;\n      \"INFO\")\n        echo \"ℹ️ INFO: $message\" >&2\n        ;;\n      \"FOUND\")\n        echo \"✅ FOUND: $message\" >&2\n        ;;\n    esac\n  }\n  \n  # Detect Next.js project structure\n  PROJECT_ROOT=\".\"\n  PAGES_DIR=\"\"\n  APP_DIR=\"\"\n  SRC_PAGES_DIR=\"\"\n  SRC_APP_DIR=\"\"\n  \n  # Find project root and routing directories\n  if [ -f \"./package.json\" ]; then\n    # Check if this is a Next.js project\n    if grep -q '\"next\"' \"./package.json\" 2>/dev/null; then\n      echo \"   📦 Next.js project detected\" >&2\n      \n      # Check for different routing structures\n      [ -d \"./pages\" ] && PAGES_DIR=\"./pages\"\n      [ -d \"./app\" ] && APP_DIR=\"./app\"\n      [ -d \"./src/pages\" ] && SRC_PAGES_DIR=\"./src/pages\"\n      [ -d \"./src/app\" ] && SRC_APP_DIR=\"./src/app\"\n      \n      if [ -n \"$APP_DIR\" ] || [ -n \"$SRC_APP_DIR\" ]; then\n        echo \"   🔧 App Router structure detected\" >&2\n      fi\n      \n      if [ -n \"$PAGES_DIR\" ] || [ -n \"$SRC_PAGES_DIR\" ]; then\n        echo \"   📄 Pages Router structure detected\" >&2\n      fi\n    else\n      report_analysis \"WARNING\" \"Not a Next.js project (no Next.js dependency found)\"\n    fi\n  else\n    report_analysis \"WARNING\" \"No package.json found - may not be in project root\"\n  fi\n  \n  # Create temporary files for route analysis\n  ROUTES_FILE=\"/tmp/nextjs_routes_$$\"\n  API_ROUTES_FILE=\"/tmp/nextjs_api_routes_$$\"\n  ROUTE_MAP_FILE=\"/tmp/nextjs_route_map_$$\"\n  \n  echo \"📊 Analyzing route structure...\" >&2\n  \n  # Function to analyze route type\n  analyze_route_type() {\n    local route_path=\"$1\"\n    local file_path=\"$2\"\n    \n    # Check if it's an API route\n    if [[ \"$file_path\" == *\"/api/\"* ]] || [[ \"$route_path\" == *\"/api/\"* ]]; then\n      API_ROUTES=$((API_ROUTES + 1))\n      echo \"api|$route_path|$file_path\" >> \"$API_ROUTES_FILE\"\n      return\n    fi\n    \n    # Check route complexity\n    if [[ \"$route_path\" == *\"[...\"* ]]; then\n      # Catch-all route\n      CATCH_ALL_ROUTES=$((CATCH_ALL_ROUTES + 1))\n      echo \"catch-all|$route_path|$file_path\" >> \"$ROUTES_FILE\"\n    elif [[ \"$route_path\" == *\"[\"* ]]; then\n      # Dynamic route\n      DYNAMIC_ROUTES=$((DYNAMIC_ROUTES + 1))\n      echo \"dynamic|$route_path|$file_path\" >> \"$ROUTES_FILE\"\n    else\n      # Static route\n      STATIC_ROUTES=$((STATIC_ROUTES + 1))\n      echo \"static|$route_path|$file_path\" >> \"$ROUTES_FILE\"\n    fi\n  }\n  \n  # Function to convert file path to route\n  file_to_route() {\n    local file_path=\"$1\"\n    local base_dir=\"$2\"\n    \n    # Remove base directory and file extension\n    local route=$(echo \"$file_path\" | sed \"s|^$base_dir||\" | sed 's|\\\\.[jt]sx\\\\?$||')\n    \n    # Handle special Next.js file names\n    route=$(echo \"$route\" | sed 's|/page$||')  # Remove /page suffix\n    route=$(echo \"$route\" | sed 's|/route$||') # Remove /route suffix\n    route=$(echo \"$route\" | sed 's|/index$||') # Remove /index suffix\n    \n    # Convert empty route to root\n    [ -z \"$route\" ] && route=\"/\"\n    \n    # Ensure route starts with /\n    [[ \"$route\" != /* ]] && route=\"/$route\"\n    \n    echo \"$route\"\n  }\n  \n  # Analyze Pages Router (if exists)\n  for pages_dir in \"$PAGES_DIR\" \"$SRC_PAGES_DIR\"; do\n    if [ -n \"$pages_dir\" ] && [ -d \"$pages_dir\" ]; then\n      echo \"   📄 Analyzing Pages Router in $pages_dir...\" >&2\n      \n      # Find all page files\n      find \"$pages_dir\" -type f \\( -name \"*.js\" -o -name \"*.jsx\" -o -name \"*.ts\" -o -name \"*.tsx\" \\) 2>/dev/null | while read -r file; do\n        if [ -f \"$file\" ]; then\n          route=$(file_to_route \"$file\" \"$pages_dir\")\n          analyze_route_type \"$route\" \"$file\"\n          echo \"     📋 $route <- $file\" >&2\n        fi\n      done\n    fi\n  done\n  \n  # Analyze App Router (if exists)\n  for app_dir in \"$APP_DIR\" \"$SRC_APP_DIR\"; do\n    if [ -n \"$app_dir\" ] && [ -d \"$app_dir\" ]; then\n      echo \"   🔧 Analyzing App Router in $app_dir...\" >&2\n      \n      # Find page.tsx/jsx and route.tsx/jsx files\n      find \"$app_dir\" -type f \\( -name \"page.js\" -o -name \"page.jsx\" -o -name \"page.ts\" -o -name \"page.tsx\" -o -name \"route.js\" -o -name \"route.jsx\" -o -name \"route.ts\" -o -name \"route.tsx\" \\) 2>/dev/null | while read -r file; do\n        if [ -f \"$file\" ]; then\n          route=$(file_to_route \"$file\" \"$app_dir\")\n          analyze_route_type \"$route\" \"$file\"\n          echo \"     📋 $route <- $file\" >&2\n        fi\n      done\n      \n      # Find layout files\n      find \"$app_dir\" -type f \\( -name \"layout.js\" -o -name \"layout.jsx\" -o -name \"layout.ts\" -o -name \"layout.tsx\" \\) 2>/dev/null | while read -r file; do\n        if [ -f \"$file\" ]; then\n          layout_path=$(echo \"$file\" | sed \"s|^$app_dir||\" | sed 's|/layout\\\\.[jt]sx\\\\?$||')\n          [ -z \"$layout_path\" ] && layout_path=\"/\"\n          [[ \"$layout_path\" != /* ]] && layout_path=\"/$layout_path\"\n          echo \"     🎨 Layout: $layout_path <- $file\" >&2\n        fi\n      done\n    fi\n  done\n  \n  # Calculate totals\n  TOTAL_ROUTES=$((STATIC_ROUTES + DYNAMIC_ROUTES + CATCH_ALL_ROUTES))\n  \n  # Generate route analysis report\n  echo \"\" >&2\n  echo \"📊 Route Analysis Results:\" >&2\n  echo \"=========================\" >&2\n  echo \"   📄 Total Routes: $TOTAL_ROUTES\" >&2\n  echo \"   📋 Static Routes: $STATIC_ROUTES\" >&2\n  echo \"   🔧 Dynamic Routes: $DYNAMIC_ROUTES\" >&2\n  echo \"   🌐 Catch-all Routes: $CATCH_ALL_ROUTES\" >&2\n  echo \"   🚀 API Routes: $API_ROUTES\" >&2\n  \n  # Route complexity analysis\n  if [ \"$TOTAL_ROUTES\" -eq 0 ]; then\n    report_analysis \"WARNING\" \"No routes found in the project\"\n  elif [ \"$TOTAL_ROUTES\" -gt 50 ]; then\n    report_analysis \"INFO\" \"Large application with $TOTAL_ROUTES routes\"\n  else\n    report_analysis \"INFO\" \"Application has $TOTAL_ROUTES routes\"\n  fi\n  \n  # API route analysis\n  if [ \"$API_ROUTES\" -gt 0 ]; then\n    report_analysis \"FOUND\" \"$API_ROUTES API endpoints detected\"\n    \n    if [ -f \"$API_ROUTES_FILE\" ]; then\n      echo \"   🚀 API Endpoints:\" >&2\n      cat \"$API_ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"     • $route\" >&2\n      done\n    fi\n  fi\n  \n  # Dynamic route analysis\n  if [ \"$DYNAMIC_ROUTES\" -gt 0 ] || [ \"$CATCH_ALL_ROUTES\" -gt 0 ]; then\n    report_analysis \"FOUND\" \"$((DYNAMIC_ROUTES + CATCH_ALL_ROUTES)) dynamic routes detected\"\n    \n    if [ -f \"$ROUTES_FILE\" ]; then\n      echo \"   🔧 Dynamic Routes:\" >&2\n      grep -E \"^(dynamic|catch-all)\" \"$ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"     • $route ($type)\" >&2\n      done\n    fi\n  fi\n  \n  # Generate route map file\n  if [ \"$TOTAL_ROUTES\" -gt 0 ] || [ \"$API_ROUTES\" -gt 0 ]; then\n    echo \"📄 Generating route map...\" >&2\n    \n    ROUTE_MAP_OUTPUT=\"nextjs-routes.json\"\n    \n    cat > \"$ROUTE_MAP_OUTPUT\" << EOF\n{\n  \"generated\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\",\n  \"project\": \"$(basename \"$(pwd)\")\",\n  \"totalRoutes\": $TOTAL_ROUTES,\n  \"apiRoutes\": $API_ROUTES,\n  \"routes\": {\n    \"static\": [\nEOF\n    \n    # Add static routes\n    if [ -f \"$ROUTES_FILE\" ]; then\n      grep \"^static\" \"$ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"      { \\\"path\\\": \\\"$route\\\", \\\"file\\\": \\\"$file\\\" },\" >> \"$ROUTE_MAP_OUTPUT\"\n      done\n      # Remove trailing comma from last entry\n      sed -i '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null || sed -i '' '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null\n    fi\n    \n    cat >> \"$ROUTE_MAP_OUTPUT\" << EOF\n    ],\n    \"dynamic\": [\nEOF\n    \n    # Add dynamic routes\n    if [ -f \"$ROUTES_FILE\" ]; then\n      grep \"^dynamic\" \"$ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"      { \\\"path\\\": \\\"$route\\\", \\\"file\\\": \\\"$file\\\", \\\"type\\\": \\\"dynamic\\\" },\" >> \"$ROUTE_MAP_OUTPUT\"\n      done\n      grep \"^catch-all\" \"$ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"      { \\\"path\\\": \\\"$route\\\", \\\"file\\\": \\\"$file\\\", \\\"type\\\": \\\"catch-all\\\" },\" >> \"$ROUTE_MAP_OUTPUT\"\n      done\n      # Remove trailing comma from last entry\n      sed -i '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null || sed -i '' '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null\n    fi\n    \n    cat >> \"$ROUTE_MAP_OUTPUT\" << EOF\n    ],\n    \"api\": [\nEOF\n    \n    # Add API routes\n    if [ -f \"$API_ROUTES_FILE\" ]; then\n      cat \"$API_ROUTES_FILE\" | while IFS='|' read -r type route file; do\n        echo \"      { \\\"path\\\": \\\"$route\\\", \\\"file\\\": \\\"$file\\\" },\" >> \"$ROUTE_MAP_OUTPUT\"\n      done\n      # Remove trailing comma from last entry\n      sed -i '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null || sed -i '' '$ s/,$//' \"$ROUTE_MAP_OUTPUT\" 2>/dev/null\n    fi\n    \n    cat >> \"$ROUTE_MAP_OUTPUT\" << EOF\n    ]\n  }\n}\nEOF\n    \n    report_analysis \"FOUND\" \"Route map generated: $ROUTE_MAP_OUTPUT\"\n  fi\n  \n  # Performance and optimization recommendations\n  echo \"💡 Route optimization recommendations...\" >&2\n  \n  if [ \"$DYNAMIC_ROUTES\" -gt 10 ]; then\n    echo \"   • Consider using ISR for frequently accessed dynamic routes\" >&2\n  fi\n  \n  if [ \"$API_ROUTES\" -gt 0 ]; then\n    echo \"   • Consider API route optimization and caching strategies\" >&2\n  fi\n  \n  if [ \"$CATCH_ALL_ROUTES\" -gt 3 ]; then\n    echo \"   • Review catch-all routes for potential over-use\" >&2\n  fi\n  \n  if [ \"$TOTAL_ROUTES\" -gt 100 ]; then\n    echo \"   • Large application - consider route-based code splitting\" >&2\n  fi\n  \n  # Clean up temporary files\n  rm -f \"$ROUTES_FILE\" \"$API_ROUTES_FILE\" \"$ROUTE_MAP_FILE\"\n  \n  echo \"\" >&2\n  echo \"📋 Next.js Route Analysis Summary:\" >&2\n  echo \"=================================\" >&2\n  echo \"   📄 File analyzed: $(basename \"$FILE_PATH\")\" >&2\n  echo \"   🗺️ Total routes found: $((TOTAL_ROUTES + API_ROUTES))\" >&2\n  echo \"   📊 Route breakdown: $STATIC_ROUTES static, $DYNAMIC_ROUTES dynamic, $API_ROUTES API\" >&2\n  echo \"   ⚠️ Warnings: $WARNINGS\" >&2\n  echo \"   ❌ Errors: $ERRORS\" >&2\n  \n  if [ \"$ERRORS\" -eq 0 ]; then\n    if [ \"$TOTAL_ROUTES\" -gt 0 ] || [ \"$API_ROUTES\" -gt 0 ]; then\n      echo \"   🎉 Status: SUCCESS - Route analysis complete\" >&2\n    else\n      echo \"   ✅ Status: INFO - No routes found to analyze\" >&2\n    fi\n  else\n    echo \"   ❌ Status: ISSUES - Route analysis completed with errors\" >&2\n  fi\n  \n  echo \"\" >&2\n  echo \"💡 Next.js Routing Best Practices:\" >&2\n  echo \"   • Use static routes when possible for better performance\" >&2\n  echo \"   • Implement proper error boundaries for dynamic routes\" >&2\n  echo \"   • Consider ISR for dynamic content that doesn't change often\" >&2\n  echo \"   • Use API routes for server-side functionality\" >&2\n  echo \"   • Organize routes logically with proper folder structure\" >&2\n  echo \"   • Document your routing strategy for team collaboration\" >&2\n  \nelse\n  # Not a Next.js file, exit silently\n  exit 0\nfi\n\nexit 0"
  },
  "useCases": [
    "Next.js application architecture documentation and route mapping",
    "Performance optimization through route analysis and recommendations",
    "Team collaboration with automated route discovery and documentation",
    "SEO optimization by understanding application route structure",
    "Migration planning and route inventory management"
  ],
  "source": "community"
}
