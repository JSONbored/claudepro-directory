{
  "slug": "slack-progress-notifier",
  "description": "Sends progress updates to Slack channel for team visibility on Claude's activities",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-19",
  "tags": [
    "slack",
    "notifications",
    "team",
    "collaboration",
    "monitoring"
  ],
  "hookType": "Notification",
  "features": [
    "Real-time Slack notifications for Claude activities",
    "Contextual emoji selection based on activity type",
    "Webhook-based integration with Slack channels",
    "Team collaboration and visibility enhancement",
    "Non-blocking notification delivery",
    "Customizable message formatting"
  ],
  "useCases": [
    "Keep team informed about automated code changes",
    "Monitor Claude Code activity in real-time",
    "Track development progress across team channels",
    "Notify team of test runs and build activities",
    "Enhance team collaboration and awareness",
    "Create audit trail of automated actions",
    "Alert team to significant file modifications",
    "Coordinate development activities across team members"
  ],
  "configuration": {
    "hookConfig": {
      "hooks": {
        "notification": {
          "script": "./.claude/hooks/slack-progress-notifier.sh",
          "matchers": [
            "*"
          ]
        }
      }
    },
    "scriptContent": "#!/bin/bash\n\n# Read the tool input from stdin\nINPUT=$(cat)\nTOOL_NAME=$(echo \"$INPUT\" | jq -r '.tool_name')\nFILE_PATH=$(echo \"$INPUT\" | jq -r '.tool_input.file_path // .tool_input.path // \"\"')\n\n# Check if Slack webhook URL is configured\nif [ -z \"$SLACK_WEBHOOK_URL\" ]; then\n    echo \"‚ÑπÔ∏è Slack webhook URL not configured - skipping notification\"\n    echo \"üí° Set SLACK_WEBHOOK_URL environment variable to enable Slack notifications\"\n    exit 0\nfi\n\necho \"üì¢ Slack Progress Notifier - Sending team notification...\"\necho \"üîß Tool: $TOOL_NAME\"\nif [ -n \"$FILE_PATH\" ]; then\n    echo \"üìÑ File: $(basename \"$FILE_PATH\")\"\nfi\n\n# Determine appropriate emoji based on tool/activity type\nEMOJI=\"üìù\"  # Default emoji\n\ncase \"$TOOL_NAME\" in\n    *test*|*Test*)\n        EMOJI=\"üß™\"\n        ACTIVITY=\"Testing\"\n        ;;\n    *build*|*Build*)\n        EMOJI=\"üèóÔ∏è\"\n        ACTIVITY=\"Building\"\n        ;;\n    *deploy*|*Deploy*)\n        EMOJI=\"üöÄ\"\n        ACTIVITY=\"Deployment\"\n        ;;\n    *commit*|*Commit*|*git*)\n        EMOJI=\"üìù\"\n        ACTIVITY=\"Version Control\"\n        ;;\n    *edit*|*Edit*|*write*|*Write*)\n        EMOJI=\"‚úèÔ∏è\"\n        ACTIVITY=\"Code Editing\"\n        ;;\n    *lint*|*Lint*|*format*|*Format*)\n        EMOJI=\"üßπ\"\n        ACTIVITY=\"Code Quality\"\n        ;;\n    *install*|*Install*|*package*)\n        EMOJI=\"üì¶\"\n        ACTIVITY=\"Package Management\"\n        ;;\n    *security*|*Security*|*audit*)\n        EMOJI=\"üîí\"\n        ACTIVITY=\"Security\"\n        ;;\n    *debug*|*Debug*|*error*)\n        EMOJI=\"üêõ\"\n        ACTIVITY=\"Debugging\"\n        ;;\n    *doc*|*Doc*|*readme*)\n        EMOJI=\"üìö\"\n        ACTIVITY=\"Documentation\"\n        ;;\n    *)\n        EMOJI=\"‚ö°\"\n        ACTIVITY=\"Development\"\n        ;;\nesac\n\n# Prepare the message\nif [ -n \"$FILE_PATH\" ]; then\n    FILENAME=$(basename \"$FILE_PATH\")\n    MESSAGE=\"$EMOJI Claude Code: $ACTIVITY - $TOOL_NAME on $FILENAME\"\nelse\n    MESSAGE=\"$EMOJI Claude Code: $ACTIVITY - $TOOL_NAME\"\nfi\n\n# Get additional context\nTIMESTAMP=$(date '+%H:%M:%S')\nUSER=$(whoami 2>/dev/null || echo \"developer\")\nBRANCH=\"unknown\"\nif git rev-parse --git-dir >/dev/null 2>&1; then\n    BRANCH=$(git branch --show-current 2>/dev/null || echo \"unknown\")\nfi\n\n# Create rich message payload\nREPO_NAME=$(basename \"$(pwd)\" 2>/dev/null || echo \"project\")\n\n# Construct JSON payload with proper escaping\nPAYLOAD=$(cat <<EOF\n{\n  \"text\": \"$MESSAGE\",\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"$EMOJI *Claude Code Activity*\\n*Action:* $TOOL_NAME\\n*Time:* $TIMESTAMP\\n*User:* $USER\\n*Branch:* $BRANCH\\n*Project:* $REPO_NAME\"\n      }\n    }\n  ]\n}\nEOF\n)\n\necho \"üì§ Sending notification to Slack...\"\n\n# Send to Slack with proper error handling\nif curl -X POST \\\n     -H 'Content-type: application/json' \\\n     --data \"$PAYLOAD\" \\\n     --max-time 5 \\\n     --retry 1 \\\n     \"$SLACK_WEBHOOK_URL\" \\\n     --silent \\\n     --show-error 2>/dev/null; then\n    echo \"‚úÖ Slack notification sent successfully\"\nelse\n    CURL_EXIT_CODE=$?\n    case $CURL_EXIT_CODE in\n        6)\n            echo \"‚ö†Ô∏è Failed to send Slack notification - couldn't resolve host\"\n            ;;\n        7)\n            echo \"‚ö†Ô∏è Failed to send Slack notification - couldn't connect to server\"\n            ;;\n        22)\n            echo \"‚ö†Ô∏è Failed to send Slack notification - HTTP error (check webhook URL)\"\n            ;;\n        28)\n            echo \"‚ö†Ô∏è Failed to send Slack notification - timeout\"\n            ;;\n        *)\n            echo \"‚ö†Ô∏è Failed to send Slack notification - error code: $CURL_EXIT_CODE\"\n            ;;\n    esac\n    echo \"üí° Verify SLACK_WEBHOOK_URL is correct and Slack service is accessible\"\nfi\n\necho \"\"\necho \"üí° Slack Integration Tips:\"\necho \"  ‚Ä¢ Get webhook URL from: https://api.slack.com/messaging/webhooks\"\necho \"  ‚Ä¢ Set SLACK_WEBHOOK_URL environment variable\"\necho \"  ‚Ä¢ Test webhook with: curl -X POST -H 'Content-type: application/json' --data '{\\\"text\\\":\\\"Test\\\"}' \\$SLACK_WEBHOOK_URL\"\necho \"  ‚Ä¢ Configure channel-specific webhooks for different notification types\"\necho \"  ‚Ä¢ Consider rate limiting for high-activity periods\"\n\necho \"\"\necho \"üéØ Slack notification complete!\"\n\nexit 0"
  },
  "source": "community"
}
