{
  "slug": "performance-monitor",
  "description": "Monitors application performance metrics, identifies bottlenecks, and provides optimization recommendations",
  "category": "hooks",
  "author": "JSONbored",
  "dateAdded": "2025-09-16",
  "tags": ["performance", "monitoring", "optimization", "metrics", "automation"],
  "hookType": "Stop",
  "features": [
    "Application performance tracking",
    "Database query optimization",
    "Frontend performance monitoring",
    "Infrastructure resource monitoring",
    "Automated performance testing",
    "Performance alerts and recommendations",
    "Web Vitals tracking",
    "Bundle size analysis",
    "Memory leak detection",
    "Response time analysis"
  ],
  "useCases": [
    "Monitor API response times and identify slow endpoints",
    "Track memory usage and detect potential memory leaks",
    "Analyze database query performance and optimization opportunities",
    "Monitor Web Vitals (LCP, FID, CLS) for frontend performance",
    "Set up automated performance testing in CI/CD pipelines",
    "Generate comprehensive performance reports with actionable insights",
    "Monitor infrastructure resources (CPU, memory, disk usage)",
    "Analyze bundle sizes and identify large dependencies",
    "Set up performance alerts for threshold breaches",
    "Track performance trends over time"
  ],
  "configuration": {
    "hookConfig": {
      "scriptContent": "#!/bin/bash\n\necho \"🔍 Performance Monitor - Analyzing system performance...\"\n\n# Performance monitoring areas\necho \"📊 Monitoring Areas:\"\necho \"  • Application Performance Metrics\"\necho \"  • Database Performance\"\necho \"  • Frontend Performance (Web Vitals)\"\necho \"  • Infrastructure Monitoring\"\necho \"  • Automated Performance Testing\"\n\n# Check if performance tools are available\ncommand -v node >/dev/null 2>&1 && echo \"✓ Node.js available for performance profiling\"\ncommand -v lighthouse >/dev/null 2>&1 && echo \"✓ Lighthouse available for web performance\"\ncommand -v artillery >/dev/null 2>&1 && echo \"✓ Artillery available for load testing\"\n\n# System performance check\necho \"\"\necho \"💻 System Performance:\"\n\n# Memory usage\nif command -v free >/dev/null 2>&1; then\n    mem_usage=$(free | grep Mem | awk '{printf \"%.2f\", $3/$2 * 100.0}')\n    echo \"  Memory Usage: ${mem_usage}%\"\n    if (( $(echo \"$mem_usage > 85\" | bc -l) 2>/dev/null )); then\n        echo \"  🚨 High memory usage detected!\"\n    fi\nfi\n\n# Disk usage\ndisk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')\necho \"  Disk Usage: ${disk_usage}%\"\nif (( disk_usage > 90 )); then\n    echo \"  🚨 High disk usage detected!\"\nfi\n\n# Load average\nif command -v uptime >/dev/null 2>&1; then\n    load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')\n    echo \"  Load Average: $load_avg\"\nfi\n\n# Performance monitoring recommendations\necho \"\"\necho \"💡 Performance Recommendations:\"\necho \"  • Implement response time tracking for API endpoints\"\necho \"  • Set up Web Vitals monitoring for frontend performance\"\necho \"  • Monitor database query performance\"\necho \"  • Set up automated performance testing\"\necho \"  • Configure performance alerts and thresholds\"\necho \"  • Use profiling tools for bottleneck identification\"\necho \"  • Implement performance budgets for builds\"\n\necho \"\"\necho \"📋 Next Steps:\"\necho \"  1. Set up performance monitoring dashboards\"\necho \"  2. Configure performance alerts\"\necho \"  3. Implement automated performance testing\"\necho \"  4. Review and optimize identified bottlenecks\"\n\necho \"\"\necho \"🎯 Performance monitor analysis complete!\"\necho \"📊 Use monitoring data to drive optimization decisions\"\n\nexit 0",
      "hooks": {
        "Stop": [
          {
            "matchers": ["*"],
            "description": "Monitor performance metrics and provide optimization insights"
          }
        ]
      }
    }
  },
  "troubleshooting": [
    {
      "issue": "Memory usage calculation fails on macOS systems",
      "solution": "Hook uses free command which is Linux-only. On macOS, install free via brew install free or modify hook to use vm_stat | grep 'Pages active' for memory statistics instead."
    },
    {
      "issue": "bc command not found error on minimal systems",
      "solution": "Install bc for floating-point arithmetic (apt-get install bc or brew install bc). Alternatively, modify memory comparison to use integer math with awk instead of bc -l for percentage checks."
    },
    {
      "issue": "Lighthouse or Artillery tools not detected",
      "solution": "Install globally with npm install -g lighthouse @artillery/core or install locally and modify hook to check npx lighthouse and npx artillery instead of direct commands."
    },
    {
      "issue": "Hook shows same performance data every run",
      "solution": "This is a stop hook providing system snapshot at session end. For continuous monitoring, integrate with dedicated APM tools or add timestamped logging to track changes over multiple sessions."
    },
    {
      "issue": "Load average shows very high values but system responsive",
      "solution": "Load average is relative to CPU core count. Value of 8 is normal for 8-core system. Divide load average by core count (sysctl -n hw.ncpu on macOS, nproc on Linux) for actual load percentage."
    }
  ],
  "documentationUrl": "https://web.dev/vitals/",
  "source": "community"
}
