{
  "slug": "mcp-server-status-monitor",
  "description": "Real-time MCP server monitoring statusline showing connected servers, active tools, and performance metrics for Claude Code MCP integration",
  "category": "statuslines",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["mcp", "monitoring", "servers", "tools", "performance"],
  "statuslineType": "custom",
  "content": "#!/usr/bin/env bash\n\n# MCP Server Status Monitor\n# Shows connected MCP servers and active tools\n\nread -r input\n\n# Extract MCP server info (if available in Claude Code context)\nmcp_servers=$(echo \"$input\" | jq -r '.mcp.servers // []' 2>/dev/null || echo \"[]\")\nserver_count=$(echo \"$mcp_servers\" | jq 'length' 2>/dev/null || echo \"0\")\n\n# Count active tools across all servers\nactive_tools=0\nfor server in $(echo \"$mcp_servers\" | jq -r '.[] | @base64'); do\n  tools=$(echo $server | base64 -d | jq '.tools | length' 2>/dev/null || echo \"0\")\n  active_tools=$((active_tools + tools))\ndone\n\n# Color based on server status\nif [ \"$server_count\" -gt 0 ]; then\n  color=\"\\033[32m\"  # Green - servers connected\n  icon=\"ðŸ”Œ\"\nelse\n  color=\"\\033[90m\"  # Gray - no servers\n  icon=\"âš«\"\nfi\n\n# List server names\nserver_names=$(echo \"$mcp_servers\" | jq -r '.[].name' 2>/dev/null | tr '\\n' ',' | sed 's/,$//')\n\n# Output\nif [ \"$server_count\" -gt 0 ]; then\n  echo -e \"${icon} MCP ${color}${server_count}${color}\\033[0m servers â”‚ ${active_tools} tools â”‚ ${server_names:0:30}\"\nelse\n  echo -e \"${icon} MCP ${color}disconnected${color}\\033[0m\"\nfi\n",
  "features": [
    "Real-time connected server count",
    "Active tools aggregation across all servers",
    "Server name display with truncation",
    "Color-coded connection status",
    "Performance-optimized JSON parsing",
    "Graceful fallback when MCP unavailable"
  ],
  "configuration": {
    "format": "bash",
    "refreshInterval": 2000,
    "position": "left"
  },
  "useCases": [
    "Monitoring MCP server connectivity during development",
    "Tracking available tools across connected servers",
    "Debugging MCP connection issues",
    "Verifying server plugin installations"
  ],
  "requirements": ["Bash shell", "jq JSON processor", "Claude Code with MCP support"],
  "preview": "ðŸ”Œ MCP 3 servers â”‚ 12 tools â”‚ filesystem,git,database",
  "troubleshooting": [
    {
      "issue": "Statusline shows 'MCP disconnected' despite configured servers",
      "solution": "Verify servers are actually connected: run 'claude mcp list' to check server status. Ensure servers are properly configured in ~/.mcp.json and restart Claude Code if needed."
    },
    {
      "issue": "Server count shows 0 but MCP servers are running in terminal",
      "solution": "Check that MCP context data is accessible. Verify Claude Code version supports MCP statusline API. Run 'claude mcp get [server-name]' to verify individual server status."
    },
    {
      "issue": "Tool count incorrect or not updating",
      "solution": "This indicates silent tool registration failure. Run '/mcp' in Claude Code to verify tool registration. Restart connected servers if tools remain unavailable despite connection."
    },
    {
      "issue": "MCP server startup failures or connection timeouts",
      "solution": "Launch with --mcp-debug flag. Check logs: ~/Library/Logs/Claude/mcp.log (macOS). Verify server.connect() is called and transport listener is active."
    },
    {
      "issue": "JSON-RPC errors like 'Method not found' or invalid JSON",
      "solution": "Server may not support prompts/list or resources/list, or writes non-JSON to stdout. Ensure JSON-RPC 2.0 compliance. Use MCP Inspector for interactive testing."
    }
  ],
  "source": "community"
}
