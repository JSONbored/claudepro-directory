{
  "metadata": {
    "slug": "build-mcp-server",
    "title": "Claude MCP Server Development: Build Custom AI Integrations",
    "seoTitle": "Build Claude MCP Servers",
    "description": "Master MCP server development from scratch. Create custom Claude Desktop integrations with TypeScript/Python in 60 minutes using production-ready patterns.",
    "keywords": [
      "Claude Code custom MCP server development",
      "Claude Desktop extension development guide",
      "Claude MCP server tutorial"
    ],
    "dateUpdated": "2025-09-22",
    "dateAdded": "2025-09-22",
    "author": "Claude Pro Directory",
    "category": "guides",
    "subcategory": "tutorials",
    "tags": [
      "mcp-development",
      "claude-desktop",
      "api-integration",
      "typescript",
      "python",
      "custom-servers"
    ],
    "readingTime": "12 min",
    "difficulty": "advanced",
    "featured": false,
    "lastReviewed": "2025-09-22",
    "aiOptimized": true,
    "citationReady": true,
    "source": "claudepro"
  },
  "content": {
    "sections": [
      {
        "type": "component",
        "component": "UnifiedContentBlock",
        "props": {
          "variant": "tldr",
          "children": "Master MCP server development for Claude Desktop. Build production-ready integrations in 60 minutes. Connect databases, APIs, and custom tools using TypeScript or Python with the Model Context Protocol."
        }
      },
      {
        "type": "component",
        "component": "UnifiedContentBox",
        "props": {
          "contentType": "callout",
          "variant": "primary",
          "children": "**What you'll achieve:** Create your first MCP server connecting Claude to external systems. Deploy production-ready integrations with proper security, testing, and state management."
        }
      },
      {
        "type": "heading",
        "level": 2,
        "text": "Prerequisites & Requirements",
        "id": "prerequisites-requirements"
      },
      {
        "type": "component",
        "component": "Checklist",
        "props": {
          "type": "prerequisites",
          "title": "Before Starting This Tutorial",
          "estimatedTime": "60 minutes",
          "skillLevel": "advanced",
          "items": "[\n    {\n      task: \"Claude Desktop installed (macOS, Windows, or Linux)\",\n      description: \"Version 1.0+ with MCP support enabled\"\n    },\n    {\n      task: \"Node.js v18+ or Python 3.11+ environment\",\n      description: \"TypeScript SDK v1.18.1 or Python MCP v1.2.0+\"\n    },\n    {\n      task: \"Familiarity with JSON-RPC and async programming\",\n      description: \"Understanding of protocol-based communication\"\n    },\n    {\n      task: \"Access to Claude Desktop config file\",\n      description: \"Located at ~/Library/Application Support/Claude/\"\n    }\n  ]",
          "children": "// Validate and sanitize inputs\n    const sanitized = parameterize(query, params);\n    \n    // Execute with connection pooling\n    const result = await pool.query(sanitized);\n    \n    return {\n      content: [{\n        type: \"text\",\n        text: JSON.stringify(result.rows, null, 2)\n      }]\n    };\n  }\n);`,\n      notes: \"Always validate inputs despite AI context. Use parameterized queries preventing injection attacks.\"\n    },\n    {\n      number: 4,\n      title: \"Configure State Management\",\n      description: \"Implement session storage for production deployments.\",\n      timeEstimate: \"12 minutes\",\n      code: `// Redis State Management\nimport Redis from 'ioredis';\n\nconst redis = new Redis({\n  host: process.env.REDIS_HOST,\n  port: 6379,\n  maxRetriesPerRequest: 3\n});\n\n// Session middleware\nserver.use(async (context, next) => {\n  const sessionId = context.headers['x-session-id'];\n  context.state = await redis.get(sessionId) || {};\n  \n  await next();\n  \n  await redis.setex(sessionId, 3600, \n    JSON.stringify(context.state));\n});`,\n      notes: \"In-memory storage works for development only. Production requires Redis, DynamoDB, or Cloudflare Durable Objects.\"\n    },\n    {\n      number: 5,\n      title: \"Add Security Layers\",\n      description: \"Implement OAuth 2.1 with PKCE for secure authentication.\",\n      timeEstimate: \"10 minutes\",\n      code: `// OAuth 2.1 Implementation with PKCE\nimport { generateCodeChallenge } from './auth';\n\nserver.tool(\"authenticate\",\n  {\n    description: \"Initiate OAuth flow with PKCE\",\n    inputSchema: { \n      client_id: z.string(),\n      scope: z.string() \n    }\n  },\n  async ({ client_id, scope }) => {\n    const verifier = generateRandomString(128);\n    const challenge = await generateCodeChallenge(verifier);\n    \n    // Store verifier securely\n    await storeVerifier(verifier);\n    \n    const authUrl = buildAuthUrl({\n      client_id,\n      challenge,\n      challenge_method: 'S256',\n      scope\n    });\n    \n    return {\n      content: [{\n        type: \"text\",\n        text: \\`Authenticate at: \\${authUrl}\\`\n      }]\n    };\n  }\n);`,\n      notes: \"Never skip PKCE even for confidential clients. Verify audience claims preventing confused deputy attacks.\"\n    },\n    {\n      number: 6,\n      title: \"Configure Claude Desktop\",\n      description: \"Register your server in Claude's configuration file.\",\n      timeEstimate: \"5 minutes\",\n      code: `// ~/Library/Application Support/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"custom-integration\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/dist/index.js\"],\n      \"env\": {\n        \"DATABASE_URL\": \"\\${DATABASE_URL}\",\n        \"REDIS_HOST\": \"localhost\",\n        \"API_KEY\": \"\\${API_KEY}\"\n      }\n    }\n  }\n}`,\n      notes: \"Restart Claude Desktop after configuration changes. Check Developer Tools for connection status.\"\n    },\n    {\n      number: 7,\n      title: \"Test with MCP Inspector\",\n      description: \"Validate server functionality using the official debugging tool.\",\n      timeEstimate: \"5 minutes\",\n      code: `# Launch MCP Inspector\nnpx @modelcontextprotocol/inspector node dist/index.js"
        }
      },
      {
        "type": "heading",
        "level": 1,
        "text": "Test specific tools",
        "id": "test-specific-tools"
      },
      {
        "type": "paragraph",
        "content": "curl -X POST http://localhost:5173/test \\\\   -H \"Content-Type: application/json\" \\\\   -d '{\"tool\": \"database_query\", \"params\": {...}}'"
      },
      {
        "type": "heading",
        "level": 1,
        "text": "Monitor real-time messages",
        "id": "monitor-real-time-messages"
      },
      {
        "type": "heading",
        "level": 1,
        "text": "Inspector UI shows all JSON-RPC communication`,",
        "id": "inspector-ui-shows-all-json-rpc-communication"
      },
      {
        "type": "paragraph",
        "content": "notes: \"Inspector supports all transport mechanisms. Enable verbose logging for debugging complex issues.\"     }   ]} />"
      },
      {
        "type": "heading",
        "level": 2,
        "text": "Common Implementation Patterns",
        "id": "common-implementation-patterns"
      },
      {
        "type": "heading",
        "level": 3,
        "text": "Database Connector Pattern",
        "id": "database-connector-pattern"
      },
      {
        "type": "paragraph",
        "content": "Database servers require connection pooling and query optimization. Postgres MCP Pro demonstrates production patterns effectively. Connection pools maintain 10-50 concurrent connections typically. Query analysis prevents expensive operations automatically. Schema introspection enables intelligent query generation consistently."
      },
      {
        "type": "paragraph",
        "content": "Health monitoring checks connection status every 30 seconds. Automatic reconnection handles network interruptions gracefully. Transaction support ensures data consistency across operations. These patterns apply to MongoDB, MySQL, and other databases. Production deployments handle thousands of queries hourly reliably."
      },
      {
        "type": "heading",
        "level": 3,
        "text": "API Integration Pattern",
        "id": "api-integration-pattern"
      },
      {
        "type": "paragraph",
        "content": "API servers implement rate limiting and retry logic. GitHub's server manages 80+ tools with authentication. Rate limiting uses token bucket algorithms effectively. Each tool respects API quotas preventing service disruption. Exponential backoff handles temporary failures automatically."
      },
      {
        "type": "paragraph",
        "content": "GraphQL servers demonstrate efficient data fetching strategies. Schema introspection maps operations to MCP tools. Batching reduces round trips improving performance significantly. Caching layers decrease API calls by 70% typically. These optimizations enable responsive AI interactions consistently."
      },
      {
        "type": "heading",
        "level": 3,
        "text": "Enterprise Deployment Pattern",
        "id": "enterprise-deployment-pattern"
      },
      {
        "type": "paragraph",
        "content": "Enterprise servers prioritize security and compliance requirements. Coinbase AgentKit demonstrates secure wallet management patterns. Multi-factor authentication protects sensitive operations effectively. Audit logging tracks all tool invocations comprehensively. Role-based access control limits tool availability appropriately."
      },
      {
        "type": "paragraph",
        "content": "Cloudflare maintains 10+ specialized servers demonstrating scalability. Each server handles specific domain responsibilities clearly. Load balancing distributes requests across server instances. Monitoring dashboards track performance metrics continuously. These patterns support thousands of concurrent users reliably."
      },
      {
        "type": "heading",
        "level": 2,
        "text": "Testing & Validation",
        "id": "testing-validation"
      },
      {
        "type": "component",
        "component": "Checklist",
        "props": {
          "type": "testing",
          "items": "[\n    {\n      task: \"Unit test individual tool handlers\",\n      description: \"npm test -- --coverage - 100% coverage for tool logic, input validation verified\"\n    },\n    {\n      task: \"Integration test transport layer\",\n      description: \"npm run test:integration - All JSON-RPC methods respond correctly within 100ms\"\n    },\n    {\n      task: \"Load test with concurrent connections\",\n      description: \"artillery run load-test.yml - Handles 100 concurrent sessions maintaining <200ms response\"\n    },\n    {\n      task: \"Security scan for vulnerabilities\",\n      description: \"npm audit && snyk test - No high/critical vulnerabilities in dependencies\"\n    },\n    {\n      task: \"Validate Claude Desktop integration\",\n      description: \"Check Claude Developer Tools - Server connected, all tools visible in Claude interface\"\n    }\n  ]"
        }
      }
    ]
  }
}
