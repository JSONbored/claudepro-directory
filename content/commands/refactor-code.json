{
  "title": "/refactor",
  "description": "Intelligent code refactoring command that analyzes code structure and applies best practices for improved maintainability and performance",
  "category": "development",
  "author": "shadowbook",
  "dateAdded": "2025-09-16",
  "tags": ["refactoring", "code-quality", "cleanup", "optimization", "patterns"],
  "content": "The `/refactor` command provides intelligent code refactoring capabilities with multiple strategies and safety checks.\n\n## Usage\n\n```\n/refactor [options] <file_or_selection>\n```\n\n## Options\n\n### Refactoring Types\n- `--extract-function` - Extract repeated code into functions\n- `--extract-variable` - Extract complex expressions into variables\n- `--extract-constant` - Move magic numbers/strings to constants\n- `--inline` - Inline simple functions/variables\n- `--rename` - Rename variables/functions for clarity\n- `--simplify` - Simplify complex conditional logic\n- `--modernize` - Update to modern language features\n- `--performance` - Apply performance optimizations\n\n### Safety Options\n- `--dry-run` - Show proposed changes without applying\n- `--interactive` - Prompt for each change\n- `--backup` - Create backup before refactoring\n- `--test-first` - Run tests before and after changes\n\n### Language-Specific Options\n- `--javascript` - Apply JS/TS specific refactoring\n- `--python` - Apply Python-specific refactoring\n- `--java` - Apply Java-specific refactoring\n- `--csharp` - Apply C#-specific refactoring\n\n## Examples\n\n### Extract Function\n```javascript\n// Before\nfunction processUsers(users) {\n  for (let user of users) {\n    if (user.email && user.email.includes('@')) {\n      user.isValid = true;\n      user.domain = user.email.split('@')[1];\n    } else {\n      user.isValid = false;\n      user.domain = null;\n    }\n  }\n}\n\n// After refactoring with --extract-function\nfunction validateEmail(email) {\n  return email && email.includes('@');\n}\n\nfunction extractDomain(email) {\n  return email.split('@')[1];\n}\n\nfunction processUsers(users) {\n  for (let user of users) {\n    if (validateEmail(user.email)) {\n      user.isValid = true;\n      user.domain = extractDomain(user.email);\n    } else {\n      user.isValid = false;\n      user.domain = null;\n    }\n  }\n}\n```\n\n### Extract Constants\n```python\n# Before\ndef calculate_discount(price, customer_type):\n    if customer_type == \"premium\":\n        return price * 0.2\n    elif customer_type == \"regular\":\n        return price * 0.1\n    else:\n        return 0\n\n# After refactoring with --extract-constant\nPREMIUM_DISCOUNT_RATE = 0.2\nREGULAR_DISCOUNT_RATE = 0.1\nPREMIUM_CUSTOMER_TYPE = \"premium\"\nREGULAR_CUSTOMER_TYPE = \"regular\"\n\ndef calculate_discount(price, customer_type):\n    if customer_type == PREMIUM_CUSTOMER_TYPE:\n        return price * PREMIUM_DISCOUNT_RATE\n    elif customer_type == REGULAR_CUSTOMER_TYPE:\n        return price * REGULAR_DISCOUNT_RATE\n    else:\n        return 0\n```\n\n### Modernize Code\n```javascript\n// Before (ES5 style)\nfunction getUserNames(users) {\n  var names = [];\n  for (var i = 0; i < users.length; i++) {\n    if (users[i].active) {\n      names.push(users[i].name);\n    }\n  }\n  return names;\n}\n\n// After refactoring with --modernize\nfunction getUserNames(users) {\n  return users\n    .filter(user => user.active)\n    .map(user => user.name);\n}\n```\n\n## Refactoring Patterns\n\n### Design Patterns\n- **Strategy Pattern** - Replace conditional logic with strategy objects\n- **Factory Pattern** - Extract object creation logic\n- **Observer Pattern** - Implement event-driven architecture\n- **Decorator Pattern** - Add functionality without inheritance\n\n### Code Smells Detection\n- **Long Method** - Break down large functions\n- **Large Class** - Split into focused classes\n- **Duplicate Code** - Extract common functionality\n- **Long Parameter List** - Use parameter objects\n- **Feature Envy** - Move methods to appropriate classes\n\n### Performance Optimizations\n- **Lazy Loading** - Load resources only when needed\n- **Memoization** - Cache expensive computations\n- **Batch Operations** - Combine multiple operations\n- **Async Optimization** - Convert synchronous to asynchronous\n\n## Safety Measures\n\n### Pre-refactoring Checks\n- Syntax validation\n- Type checking (TypeScript, etc.)\n- Lint rule compliance\n- Test coverage analysis\n\n### Post-refactoring Validation\n- Automated test execution\n- Code quality metrics comparison\n- Performance benchmarking\n- Security vulnerability scanning\n\n## Integration\n\n### IDE Integration\n- VS Code extension support\n- IntelliJ plugin compatibility\n- Vim/Neovim integration\n- Emacs package support\n\n### CI/CD Integration\n- Pre-commit hooks\n- GitHub Actions workflow\n- GitLab CI pipeline\n- Jenkins job integration\n\n## Configuration\n\nCreate a `.refactor.json` file in your project root:\n\n```json\n{\n  \"rules\": {\n    \"maxFunctionLength\": 20,\n    \"maxParameterCount\": 4,\n    \"enforceConstantExtraction\": true,\n    \"modernizeFeatures\": true\n  },\n  \"exclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"*.test.js\"\n  ],\n  \"backup\": {\n    \"enabled\": true,\n    \"directory\": \".refactor-backups\"\n  }\n}\n```",
  "configuration": {
    "temperature": 0.3,
    "maxTokens": 6000,
    "systemPrompt": "You are a code refactoring expert focused on improving code quality, maintainability, and performance while preserving functionality"
  },
  "githubUrl": "https://github.com/claudepro/refactor-command",
  "documentationUrl": "https://docs.claude.ai/commands/refactor"
}