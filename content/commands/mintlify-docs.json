{
  "description": "Generate beautiful, searchable documentation using Mintlify with AI-powered content generation, API reference automation, and MDX components",
  "category": "commands",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["mintlify", "documentation", "mdx", "api-docs", "ai"],
  "content": "The `/mintlify-docs` command generates comprehensive, production-ready documentation using Mintlify with AI-powered content creation, API reference automation, and interactive MDX components.\n\n## Usage\n\n```\n/mintlify-docs [options] <documentation_scope>\n```\n\n## Options\n\n### Documentation Types\n- `--quickstart` - Generate quickstart guide\n- `--api-reference` - Generate API reference from code\n- `--tutorial` - Generate step-by-step tutorial\n- `--guide` - Generate conceptual guide\n- `--changelog` - Generate changelog from git history\n\n### Source Analysis\n- `--from-code=<path>` - Generate docs from source code\n- `--from-openapi=<path>` - Generate API docs from OpenAPI spec\n- `--from-types=<path>` - Generate docs from TypeScript types\n- `--from-jsdoc` - Extract JSDoc comments\n\n### Output Format\n- `--mdx` - Generate MDX with components (default)\n- `--markdown` - Generate plain Markdown\n- `--with-examples` - Include code examples\n- `--with-snippets` - Include interactive snippets\n\n### Features\n- `--search` - Configure search integration\n- `--navigation` - Generate navigation structure\n- `--analytics` - Add analytics tracking\n- `--versioning` - Enable version management\n\n## Examples\n\n### API Reference from TypeScript\n\n**Command:**\n```\n/mintlify-docs --api-reference --from-types=src/api/users.ts --with-examples\n```\n\n**Input Code:**\n```typescript\n// src/api/users.ts\n/**\n * User management API client\n * @module UserAPI\n */\n\nexport interface User {\n  /** Unique user identifier */\n  id: string;\n  /** User's email address */\n  email: string;\n  /** Display name */\n  name: string;\n  /** User role */\n  role: 'admin' | 'user' | 'guest';\n  /** Account creation timestamp */\n  createdAt: Date;\n}\n\nexport interface CreateUserInput {\n  email: string;\n  name: string;\n  password: string;\n}\n\n/**\n * Retrieves a user by ID\n * @param userId - The user's unique identifier\n * @returns Promise resolving to the user object\n * @throws {NotFoundError} If user doesn't exist\n * @throws {AuthorizationError} If caller lacks permission\n * @example\n * ```typescript\n * const user = await getUser('user_123');\n * console.log(user.name);\n * ```\n */\nexport async function getUser(userId: string): Promise<User> {\n  const response = await fetch(`/api/users/${userId}`);\n  if (!response.ok) throw new Error('Failed to fetch user');\n  return response.json();\n}\n\n/**\n * Creates a new user\n * @param input - User creation data\n * @returns Promise resolving to the created user\n * @throws {ValidationError} If input is invalid\n * @throws {ConflictError} If email already exists\n * @example\n * ```typescript\n * const newUser = await createUser({\n *   email: 'user@example.com',\n *   name: 'John Doe',\n *   password: 'secure-password'\n * });\n * ```\n */\nexport async function createUser(input: CreateUserInput): Promise<User> {\n  const response = await fetch('/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(input),\n  });\n  if (!response.ok) throw new Error('Failed to create user');\n  return response.json();\n}\n```\n\n**Generated Documentation:**\n```mdx\n---\ntitle: 'User API'\ndescription: 'Manage user accounts and profiles'\nicon: 'users'\n---\n\n# User Management API\n\nThe User API provides endpoints for managing user accounts, authentication, and profiles.\n\n## User Object\n\nThe User object represents a user account in your application.\n\n<ResponseField name=\"id\" type=\"string\" required>\n  Unique user identifier\n</ResponseField>\n\n<ResponseField name=\"email\" type=\"string\" required>\n  User's email address\n</ResponseField>\n\n<ResponseField name=\"name\" type=\"string\" required>\n  Display name\n</ResponseField>\n\n<ResponseField name=\"role\" type=\"'admin' | 'user' | 'guest'\" required>\n  User role determining access permissions\n</ResponseField>\n\n<ResponseField name=\"createdAt\" type=\"Date\" required>\n  Account creation timestamp\n</ResponseField>\n\n<CodeGroup>\n\n```typescript User Object\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'admin' | 'user' | 'guest';\n  createdAt: Date;\n}\n```\n\n```json Example\n{\n  \"id\": \"user_123\",\n  \"email\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"role\": \"user\",\n  \"createdAt\": \"2025-10-16T12:00:00Z\"\n}\n```\n\n</CodeGroup>\n\n## Get User\n\n<div className=\"api-method\">\n  <div className=\"api-method-label\">GET</div>\n  <div className=\"api-method-path\">/api/users/:userId</div>\n</div>\n\nRetrieves a user by their unique identifier.\n\n### Path Parameters\n\n<ParamField path=\"userId\" type=\"string\" required>\n  The user's unique identifier\n</ParamField>\n\n### Response\n\n<ResponseField name=\"user\" type=\"User\">\n  The requested user object\n</ResponseField>\n\n### Error Codes\n\n<ResponseField name=\"404\" type=\"NotFoundError\">\n  User with the specified ID doesn't exist\n</ResponseField>\n\n<ResponseField name=\"403\" type=\"AuthorizationError\">\n  Caller lacks permission to access this user\n</ResponseField>\n\n<CodeGroup>\n\n```typescript TypeScript SDK\nimport { getUser } from '@/api/users';\n\nconst user = await getUser('user_123');\nconsole.log(user.name); // \"John Doe\"\n```\n\n```javascript JavaScript\nconst response = await fetch('/api/users/user_123');\nconst user = await response.json();\n```\n\n```python Python\nimport requests\n\nresponse = requests.get('https://api.example.com/users/user_123')\nuser = response.json()\n```\n\n```bash cURL\ncurl https://api.example.com/users/user_123 \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n```\n\n</CodeGroup>\n\n<ResponseExample>\n\n```json 200 Success\n{\n  \"id\": \"user_123\",\n  \"email\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"role\": \"user\",\n  \"createdAt\": \"2025-10-16T12:00:00Z\"\n}\n```\n\n```json 404 Not Found\n{\n  \"error\": \"User not found\",\n  \"code\": \"USER_NOT_FOUND\"\n}\n```\n\n```json 403 Forbidden\n{\n  \"error\": \"Insufficient permissions\",\n  \"code\": \"FORBIDDEN\"\n}\n```\n\n</ResponseExample>\n\n## Create User\n\n<div className=\"api-method\">\n  <div className=\"api-method-label\">POST</div>\n  <div className=\"api-method-path\">/api/users</div>\n</div>\n\nCreates a new user account.\n\n### Request Body\n\n<ParamField body=\"email\" type=\"string\" required>\n  User's email address (must be unique)\n</ParamField>\n\n<ParamField body=\"name\" type=\"string\" required>\n  Display name\n</ParamField>\n\n<ParamField body=\"password\" type=\"string\" required>\n  Account password (min 8 characters)\n</ParamField>\n\n### Response\n\n<ResponseField name=\"user\" type=\"User\">\n  The created user object\n</ResponseField>\n\n### Error Codes\n\n<ResponseField name=\"400\" type=\"ValidationError\">\n  Input validation failed\n</ResponseField>\n\n<ResponseField name=\"409\" type=\"ConflictError\">\n  Email address already exists\n</ResponseField>\n\n<CodeGroup>\n\n```typescript TypeScript SDK\nimport { createUser } from '@/api/users';\n\nconst newUser = await createUser({\n  email: 'user@example.com',\n  name: 'John Doe',\n  password: 'secure-password'\n});\n```\n\n```javascript JavaScript\nconst response = await fetch('/api/users', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    email: 'user@example.com',\n    name: 'John Doe',\n    password: 'secure-password'\n  })\n});\nconst user = await response.json();\n```\n\n</CodeGroup>\n\n<Tip>\n  Passwords are automatically hashed using Argon2 before storage. Never log or expose raw passwords.\n</Tip>\n```\n\n### Quickstart Guide Generation\n\n**Command:**\n```\n/mintlify-docs --quickstart --from-code=src/ \"Getting started with our authentication system\"\n```\n\n**Generated Documentation:**\n```mdx\n---\ntitle: 'Quickstart'\ndescription: 'Get started with authentication in 5 minutes'\nicon: 'rocket'\n---\n\n# Getting Started\n\nThis guide will help you integrate authentication into your application in under 5 minutes.\n\n<Steps>\n\n<Step title=\"Install the SDK\">\n  Install the authentication package using your preferred package manager:\n\n  <CodeGroup>\n\n  ```bash npm\n  npm install @yourapp/auth\n  ```\n\n  ```bash pnpm\n  pnpm add @yourapp/auth\n  ```\n\n  ```bash yarn\n  yarn add @yourapp/auth\n  ```\n\n  </CodeGroup>\n</Step>\n\n<Step title=\"Configure Environment Variables\">\n  Add your API credentials to your `.env` file:\n\n  ```bash .env\n  AUTH_SECRET=your-secret-key\n  AUTH_URL=https://api.yourapp.com\n  GITHUB_CLIENT_ID=your-github-client-id\n  GITHUB_CLIENT_SECRET=your-github-client-secret\n  ```\n\n  <Warning>\n    Never commit your `.env` file to version control. Add it to `.gitignore`.\n  </Warning>\n</Step>\n\n<Step title=\"Initialize the Client\">\n  Create an authentication client instance:\n\n  ```typescript lib/auth.ts\n  import { createAuthClient } from '@yourapp/auth';\n\n  export const auth = createAuthClient({\n    secret: process.env.AUTH_SECRET!,\n    baseUrl: process.env.AUTH_URL!,\n    providers: {\n      github: {\n        clientId: process.env.GITHUB_CLIENT_ID!,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n      },\n    },\n  });\n  ```\n</Step>\n\n<Step title=\"Add Authentication to Your App\">\n  Wrap your application with the authentication provider:\n\n  ```typescript app/layout.tsx\n  import { AuthProvider } from '@yourapp/auth/react';\n  import { auth } from '@/lib/auth';\n\n  export default function RootLayout({ children }) {\n    return (\n      <html>\n        <body>\n          <AuthProvider client={auth}>\n            {children}\n          </AuthProvider>\n        </body>\n      </html>\n    );\n  }\n  ```\n</Step>\n\n<Step title=\"Use Authentication Hooks\">\n  Access authentication state in your components:\n\n  ```typescript components/profile.tsx\n  'use client';\n\n  import { useAuth } from '@yourapp/auth/react';\n\n  export function UserProfile() {\n    const { user, signIn, signOut } = useAuth();\n\n    if (!user) {\n      return (\n        <button onClick={() => signIn('github')}>\n          Sign in with GitHub\n        </button>\n      );\n    }\n\n    return (\n      <div>\n        <p>Welcome, {user.name}!</p>\n        <button onClick={signOut}>Sign out</button>\n      </div>\n    );\n  }\n  ```\n</Step>\n\n</Steps>\n\n## Next Steps\n\n<CardGroup cols={2}>\n\n<Card title=\"API Reference\" icon=\"code\" href=\"/api-reference\">\n  Explore the complete API documentation\n</Card>\n\n<Card title=\"Authentication Guide\" icon=\"shield\" href=\"/guides/authentication\">\n  Learn about advanced authentication patterns\n</Card>\n\n<Card title=\"Security Best Practices\" icon=\"lock\" href=\"/guides/security\">\n  Implement security best practices\n</Card>\n\n<Card title=\"Examples\" icon=\"lightbulb\" href=\"/examples\">\n  View example implementations\n</Card>\n\n</CardGroup>\n```\n\n### OpenAPI to Documentation\n\n**Command:**\n```\n/mintlify-docs --api-reference --from-openapi=openapi.yaml\n```\n\n**Generated mint.json Configuration:**\n```json\n{\n  \"$schema\": \"https://mintlify.com/schema.json\",\n  \"name\": \"Your API Documentation\",\n  \"logo\": {\n    \"dark\": \"/logo/dark.svg\",\n    \"light\": \"/logo/light.svg\"\n  },\n  \"favicon\": \"/favicon.svg\",\n  \"colors\": {\n    \"primary\": \"#0D9373\",\n    \"light\": \"#07C983\",\n    \"dark\": \"#0D9373\",\n    \"anchors\": {\n      \"from\": \"#0D9373\",\n      \"to\": \"#07C983\"\n    }\n  },\n  \"topbarLinks\": [\n    {\n      \"name\": \"Support\",\n      \"url\": \"mailto:support@example.com\"\n    }\n  ],\n  \"topbarCtaButton\": {\n    \"name\": \"Dashboard\",\n    \"url\": \"https://dashboard.example.com\"\n  },\n  \"tabs\": [\n    {\n      \"name\": \"API Reference\",\n      \"url\": \"api-reference\"\n    },\n    {\n      \"name\": \"Guides\",\n      \"url\": \"guides\"\n    }\n  ],\n  \"anchors\": [\n    {\n      \"name\": \"Documentation\",\n      \"icon\": \"book-open-cover\",\n      \"url\": \"https://docs.example.com\"\n    },\n    {\n      \"name\": \"Community\",\n      \"icon\": \"discord\",\n      \"url\": \"https://discord.gg/example\"\n    },\n    {\n      \"name\": \"GitHub\",\n      \"icon\": \"github\",\n      \"url\": \"https://github.com/example/repo\"\n    }\n  ],\n  \"navigation\": [\n    {\n      \"group\": \"Get Started\",\n      \"pages\": [\n        \"introduction\",\n        \"quickstart\",\n        \"development\"\n      ]\n    },\n    {\n      \"group\": \"API Reference\",\n      \"pages\": [\n        \"api-reference/authentication\",\n        \"api-reference/users\",\n        \"api-reference/organizations\"\n      ]\n    }\n  ],\n  \"footerSocials\": {\n    \"twitter\": \"https://twitter.com/example\",\n    \"github\": \"https://github.com/example\",\n    \"linkedin\": \"https://www.linkedin.com/company/example\"\n  },\n  \"analytics\": {\n    \"posthog\": {\n      \"apiKey\": \"phc_xxx\"\n    }\n  },\n  \"api\": {\n    \"baseUrl\": \"https://api.example.com\",\n    \"auth\": {\n      \"method\": \"bearer\"\n    }\n  }\n}\n```\n\n## Interactive Components\n\n### Custom MDX Components\n```mdx\n<Accordion title=\"How does authentication work?\">\n  Our authentication system uses JWT tokens with automatic refresh. Sessions last 7 days by default.\n</Accordion>\n\n<Info>\n  All API requests must include a valid Bearer token in the Authorization header.\n</Info>\n\n<Warning>\n  Never expose your API secret key in client-side code.\n</Warning>\n\n<Tip>\n  Use environment variables to manage different API keys for development and production.\n</Tip>\n\n<Check>\n  Your API credentials are correctly configured!\n</Check>\n```\n\n## Best Practices\n\n1. **Clear Structure**: Organize documentation with logical navigation\n2. **Code Examples**: Include examples in multiple languages\n3. **Error Documentation**: Document all possible error codes and responses\n4. **Interactive Elements**: Use Mintlify components for better UX\n5. **Version Management**: Maintain docs for multiple API versions\n6. **Search Optimization**: Use descriptive titles and descriptions\n7. **Regular Updates**: Keep documentation in sync with code changes",
  "configuration": {
    "temperature": 0.4,
    "maxTokens": 8000,
    "systemPrompt": "You are a Mintlify documentation expert focused on creating comprehensive, beautiful, and searchable documentation with AI-powered content generation"
  },
  "githubUrl": "https://github.com/mintlify/mint",
  "documentationUrl": "https://mintlify.com/docs",
  "troubleshooting": [
    {
      "issue": "OpenAPI spec with misspelled 'openapi' field prevents API reference generation",
      "solution": "Verify 'openapi' metadata field spelling matches OpenAPI document exactly. Ensure HTTP method and path match spec. Check for trailing slash differences."
    },
    {
      "issue": "API reference pages missing from navigation after OpenAPI import",
      "solution": "Remove x-hidden: true from OpenAPI operations. Validate OpenAPI spec for errors at editor.swagger.io. Convert OpenAPI 2.0 to 3.0+ format."
    },
    {
      "issue": "MDX component syntax errors breaking documentation build process",
      "solution": "Enable AI syntax fixes in Settings > Editor. Check malformed components: proper closing tags, valid props. Use Mintlify web editor syntax validation."
    },
    {
      "issue": "Duplicate file and navigation entry causing 'operation already exists' error",
      "solution": "Delete MDX file if operation in navigation (e.g., remove get-users.mdx when 'GET /users' in mint.json). Use one source per endpoint only."
    },
    {
      "issue": "Authentication playground not showing securitySchemes from OpenAPI spec",
      "solution": "Define securitySchemes in components section. Add security field to operations. Configure bearerAuth, apiKey, or OAuth2 in OpenAPI document properly."
    }
  ],
  "source": "community",
  "slug": "mintlify-docs",
  "seoTitle": "Mintlify Documentation Generator for Claude"
}
