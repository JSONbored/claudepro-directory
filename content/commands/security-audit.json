{
  "description": "Deploy 100 specialized sub-agents for comprehensive enterprise-grade security, performance, and optimization audit of production codebase",
  "category": "commands",
  "author": "claudepro",
  "dateAdded": "2025-01-25",
  "tags": [
    "security-audit",
    "enterprise",
    "performance",
    "optimization",
    "production",
    "comprehensive-analysis",
    "sub-agents",
    "architecture",
    "scalability",
    "code-quality"
  ],
  "content": "The `/security-audit` command deploys 100 specialized virtual sub-agents to conduct a comprehensive enterprise-grade audit of your entire codebase. Each agent operates as a world-class expert in their domain, examining every line of code with the mindset that hostile actors have full visibility to your public repository.\n\n## Features\n\n- **100 Specialized Sub-Agents**: Each agent is an expert in specific security, performance, and optimization domains\n- **Enterprise-Grade Analysis**: Line-by-line examination assuming hostile actor visibility\n- **Comprehensive Scoring**: 0-100 scores across 10+ major categories with detailed justification\n- **Resource Optimization**: Maximizes free tier usage (Upstash Redis, Arcjet, Vercel) without reducing functionality\n- **Prioritized Recommendations**: Critical, High, Medium, and Low priority actionable items\n- **Implementation Roadmap**: Quick wins, short-term, medium-term, and long-term improvement plans\n\n## Usage\n\n```\n/security-audit [scope]\n```\n\n### Parameters\n\n- `scope` (optional): Specific focus area - defaults to \"all\"\n  - `all` - Full comprehensive audit (default)\n  - `security` - Focus on security specialists\n  - `performance` - Focus on performance optimization\n\n## Sub-Agent Categories\n\n### Security Specialists (15 agents)\n- Authentication Security\n- Content Security Policy\n- Input Validation\n- API Security\n- Dependency Security\n- Environment Security\n- Transport Security\n- Client-Side Security\n- Server Security\n- Third-Party Security\n- Bot Protection\n- DDoS Protection\n- Information Disclosure\n- Access Control\n- Cryptographic Security\n\n### Performance Specialists (12 agents)\n- Core Web Vitals\n- Bundle Optimization\n- Image Optimization\n- Font Optimization\n- CSS Performance\n- JavaScript Performance\n- Caching Strategy\n- Database Performance\n- Network Performance\n- Rendering Performance\n- Memory Management\n- Mobile Performance\n\n### Code Quality Specialists (10 agents)\n- TypeScript Excellence\n- React Best Practices\n- Code Architecture\n- Error Handling\n- Testing Coverage\n- Code Consistency\n- Documentation Quality\n- Maintainability\n- Accessibility Compliance\n- Refactoring Opportunities\n\n### SEO & Content Specialists (8 agents)\n- Technical SEO\n- Page Speed SEO\n- Content Structure\n- Schema Markup\n- Sitemap Optimization\n- Internal Linking\n- Mobile SEO\n- International SEO\n\n### Infrastructure Specialists (10 agents)\n- Vercel Optimization\n- Redis Utilization\n- CDN Strategy\n- Build Process\n- Environment Management\n- Monitoring & Observability\n- Backup & Recovery\n- Scalability Planning\n- Resource Allocation\n- Deployment Strategy\n\n### Business Logic Specialists (8 agents)\n- Data Flow Architecture\n- API Design\n- User Experience Flow\n- Content Management\n- Search Functionality\n- Analytics Integration\n- Third-Party Integrations\n- Feature Flag Management\n\n### Compliance & Standards Specialists (7 agents)\n- Privacy Compliance\n- Web Standards\n- Browser Compatibility\n- Progressive Web App\n- Internationalization\n- Content Security\n- Legal Compliance\n\n### Optimization Specialists (10 agents)\n- Asset Optimization\n- Database Query Optimization\n- Memory Optimization\n- Network Optimization\n- Storage Optimization\n- Computational Optimization\n- Resource Loading\n- Third-Party Optimization\n- Mobile Optimization\n- Accessibility Optimization\n\n### Maintenance & Operations Specialists (8 agents)\n- Dependency Management\n- Code Organization\n- Configuration Management\n- Logging & Debugging\n- Health Monitoring\n- Backup Strategies\n- Documentation Maintenance\n- Version Control\n\n### Specialized Audit Agents (12 agents)\n- Dead Code Detection\n- Performance Regression\n- Security Vulnerability Scanning\n- Lighthouse Audit\n- Bundle Analysis\n- Accessibility Audit\n- SEO Technical Audit\n- Mobile Audit\n- Loading Performance\n- Code Duplication\n- Configuration Audit\n- Overall Architecture Review\n\n## Examples\n\n### Full Comprehensive Audit\n\n```bash\n/security-audit\n# Deploys all 100 sub-agents for complete analysis\n```\n\n### Security-Focused Audit\n\n```bash\n/security-audit security\n# Focuses on 15 security specialists + related infrastructure agents\n```\n\n### Performance-Focused Audit\n\n```bash\n/security-audit performance\n# Focuses on 12 performance specialists + optimization agents\n```\n\n## Audit Deliverables\n\n### Executive Summary\n- Overall assessment and critical findings\n- Risk assessment and impact analysis\n- Strategic recommendations overview\n\n### Category Scores (0-100 scale)\n- **Security Score**: Vulnerability breakdown by type\n- **Performance Score**: Core Web Vitals and optimization analysis\n- **Code Quality Score**: Maintainability and technical debt metrics\n- **SEO Score**: Technical SEO compliance assessment\n- **Scalability Score**: Resource efficiency and scaling readiness\n- **Accessibility Score**: WCAG compliance level evaluation\n- **Infrastructure Score**: Cloud optimization and deployment assessment\n- **Compliance Score**: Standards adherence and regulatory compliance\n- **Maintainability Score**: Technical debt and code organization\n- **Optimization Score**: Resource utilization efficiency\n\n### Prioritized Recommendations\n\n#### Critical Issues (Immediate Action Required)\n- Security vulnerabilities with high CVSS scores\n- Performance blockers affecting Core Web Vitals\n- Compliance violations with legal implications\n\n#### High Priority (Significant Impact)\n- Architecture improvements for scalability\n- Security hardening recommendations\n- Performance optimizations with measurable impact\n\n#### Medium Priority (Notable Optimizations)\n- Code quality improvements\n- SEO enhancements\n- Resource utilization optimizations\n\n#### Low Priority (Minor Enhancements)\n- Documentation improvements\n- Code style consistency\n- Development workflow optimizations\n\n### Resource Optimization Plan\n\n#### Redis Utilization (Upstash Free Tier)\n- Caching strategies to maximize free tier\n- Memory optimization techniques\n- Connection pooling recommendations\n\n#### Arcjet Optimization (500k requests/month free)\n- Enhanced security within free limits\n- Rate limiting optimization\n- Bot protection configuration\n\n#### Vercel Efficiency (Preparation for Free Tier)\n- Build optimization for faster deployments\n- Function optimization for reduced execution time\n- Bandwidth optimization strategies\n\n### Implementation Roadmap\n\n#### Quick Wins (0-1 week)\n- Configuration adjustments\n- Security header implementations\n- Basic performance optimizations\n\n#### Short Term (1-4 weeks)\n- Code refactoring projects\n- Infrastructure improvements\n- Testing implementation\n\n#### Medium Term (1-3 months)\n- Architecture modernization\n- Advanced security implementations\n- Performance monitoring setup\n\n#### Long Term (Strategic)\n- Scalability architecture\n- Advanced compliance implementation\n- Enterprise feature development\n\n## Audit Methodology\n\n### Analysis Depth\n- **Line-by-line examination** of entire codebase\n- **Configuration review** of all deployment and build settings\n- **Dependency analysis** for security and performance implications\n- **Architecture assessment** for scalability and maintainability\n\n### Security Mindset\n- Assumes hostile actors have full repository visibility\n- Evaluates every public code line for potential exploitation\n- Tests for OWASP Top 10 and emerging threat vectors\n- Assesses supply chain security and dependency risks\n\n### Resource Optimization Focus\n- Maximizes free tier efficiency across all services\n- Identifies opportunities to reduce paid service usage\n- Optimizes for cost-effective scaling strategies\n- Maintains all existing functionality during optimization\n\n### Scoring System\n- **0-100 scale** with detailed justification for each score\n- **Industry benchmarks** comparison for context\n- **Weighted scoring** based on security and business impact\n- **Trend analysis** for performance regression detection\n\n## Technical Stack Context\n\n### Current Technology Stack\n- **Framework**: Next.js 15.5.4 with React Compiler\n- **Language**: TypeScript with strict mode\n- **Styling**: TailwindCSS with custom design system\n- **UI Library**: shadcn/ui + Radix UI components\n- **Security**: Arcjet middleware (500k requests/month free tier)\n- **Cache**: Upstash Redis (free tier via Vercel Marketplace)\n- **Hosting**: Vercel (currently paid, planning free tier migration)\n- **Content**: MDX-based content management system\n- **Database**: Static generation with optional dynamic content\n\n### Deployment Constraints\n- **Public Repository**: Every line visible to potential attackers\n- **Resource Limits**: Must optimize for free tier usage\n- **Performance Requirements**: Core Web Vitals compliance\n- **Security Standards**: Enterprise-grade for open-source project\n- **Scalability**: Prepared for traffic growth within free tiers\n\nThis comprehensive audit ensures your production codebase meets enterprise security standards while optimizing for maximum efficiency within free tier constraints.",
  "configuration": {
    "temperature": 0.1,
    "maxTokens": 32000,
    "systemPrompt": "You are deploying 100 specialized sub-agents for comprehensive enterprise audit. Each agent operates as a world-class expert examining production code with assumption that hostile actors have full visibility. Focus on security, performance, optimization, and resource efficiency while maintaining all functionality."
  },
  "githubUrl": "https://github.com/claudepro/security-audit-agents",
  "documentationUrl": "https://docs.claude.ai/commands/security-audit",
  "troubleshooting": [
    {
      "issue": "Audit reports overwhelm with 100 agents producing excessive output",
      "solution": "Use scope filters: /security-audit security for focused analysis. Request executive summary only. Filter by priority: Critical and High issues first."
    },
    {
      "issue": "Free tier resource optimization recommendations not specific enough",
      "solution": "Specify service explicitly: 'Optimize Upstash Redis within free tier limits'. Request concrete configuration changes. Include current usage metrics for context."
    },
    {
      "issue": "Audit misses project-specific security risks in public repository",
      "solution": "Provide threat context: 'Public repo with API keys in .env.example'. Specify deployment: Vercel Edge Functions. Request supply chain analysis explicitly."
    },
    {
      "issue": "CVSS scoring inconsistent with project's actual threat model",
      "solution": "Provide deployment context: 'Internal tool vs public SaaS'. Adjust scoring with --threat-model=public-repo. Request contextualized risk assessment per environment."
    },
    {
      "issue": "Audit completion time exceeds token limits for large codebases",
      "solution": "Run incremental audits by scope: security first, then performance. Use --quick for overview. Process high-risk areas separately: /security-audit src/auth."
    }
  ],
  "source": "claudepro",
  "slug": "security-audit"
}
