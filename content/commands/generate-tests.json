{
  "description": "Automatically generate comprehensive test suites including unit tests, integration tests, and edge cases with multiple testing framework support",
  "category": "commands",
  "author": "JSONbored",
  "dateAdded": "2025-09-16",
  "tags": ["testing", "automation", "unit-tests", "integration-tests", "tdd"],
  "content": "The `/test-gen` command automatically generates comprehensive test suites for your code with intelligent test case discovery and framework integration.\n\n## Usage\n\n```\n/test-gen [options] <file_or_function>\n```\n\n## Options\n\n### Test Types\n- `--unit` - Generate unit tests (default)\n- `--integration` - Generate integration tests\n- `--e2e` - Generate end-to-end tests\n- `--performance` - Generate performance tests\n- `--security` - Generate security tests\n- `--accessibility` - Generate accessibility tests\n\n### Framework Selection\n- `--jest` - Use Jest testing framework (JavaScript/TypeScript)\n- `--vitest` - Use Vitest testing framework\n- `--pytest` - Use pytest (Python)\n- `--junit` - Use JUnit (Java)\n- `--nunit` - Use NUnit (C#)\n- `--rspec` - Use RSpec (Ruby)\n- `--go-test` - Use Go testing package\n\n### Coverage Options\n- `--coverage` - Include code coverage configuration\n- `--threshold=90` - Set coverage threshold percentage\n- `--coverage-report` - Generate coverage reports\n\n### Test Strategy\n- `--tdd` - Test-driven development approach\n- `--bdd` - Behavior-driven development with scenarios\n- `--property-based` - Generate property-based tests\n- `--mutation` - Include mutation testing setup\n\n## Examples\n\n### JavaScript/TypeScript Unit Tests\n\n```javascript\n// Source function\nfunction calculateDiscount(price, discountPercentage, customerType) {\n  if (price <= 0) throw new Error('Price must be positive');\n  if (discountPercentage < 0 || discountPercentage > 100) {\n    throw new Error('Discount must be between 0 and 100');\n  }\n  \n  const baseDiscount = price * (discountPercentage / 100);\n  const multiplier = customerType === 'premium' ? 1.2 : 1;\n  \n  return Math.min(baseDiscount * multiplier, price * 0.5);\n}\n\n// Generated Jest tests\ndescribe('calculateDiscount', () => {\n  describe('valid inputs', () => {\n    test('should calculate basic discount correctly', () => {\n      const result = calculateDiscount(100, 10, 'regular');\n      expect(result).toBe(10);\n    });\n    \n    test('should apply premium multiplier', () => {\n      const result = calculateDiscount(100, 10, 'premium');\n      expect(result).toBe(12);\n    });\n    \n    test('should cap discount at 50% of price', () => {\n      const result = calculateDiscount(100, 60, 'premium');\n      expect(result).toBe(50);\n    });\n  });\n  \n  describe('edge cases', () => {\n    test('should handle zero discount', () => {\n      const result = calculateDiscount(100, 0, 'regular');\n      expect(result).toBe(0);\n    });\n    \n    test('should handle maximum discount', () => {\n      const result = calculateDiscount(100, 100, 'regular');\n      expect(result).toBe(50);\n    });\n  });\n  \n  describe('error cases', () => {\n    test('should throw error for negative price', () => {\n      expect(() => calculateDiscount(-10, 10, 'regular'))\n        .toThrow('Price must be positive');\n    });\n    \n    test('should throw error for invalid discount percentage', () => {\n      expect(() => calculateDiscount(100, -5, 'regular'))\n        .toThrow('Discount must be between 0 and 100');\n      \n      expect(() => calculateDiscount(100, 105, 'regular'))\n        .toThrow('Discount must be between 0 and 100');\n    });\n  });\n});\n```\n\n### Python Unit Tests\n\n```python\n# Source class\nclass UserValidator:\n    def __init__(self, min_age=18):\n        self.min_age = min_age\n    \n    def validate_user(self, user_data):\n        errors = []\n        \n        if not user_data.get('email') or '@' not in user_data['email']:\n            errors.append('Invalid email format')\n        \n        if user_data.get('age', 0) < self.min_age:\n            errors.append(f'Age must be at least {self.min_age}')\n        \n        return len(errors) == 0, errors\n\n# Generated pytest tests\nimport pytest\nfrom user_validator import UserValidator\n\nclass TestUserValidator:\n    @pytest.fixture\n    def validator(self):\n        return UserValidator()\n    \n    @pytest.fixture\n    def custom_validator(self):\n        return UserValidator(min_age=21)\n    \n    def test_valid_user(self, validator):\n        user_data = {'email': 'test@example.com', 'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is True\n        assert errors == []\n    \n    def test_invalid_email(self, validator):\n        user_data = {'email': 'invalid-email', 'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Invalid email format' in errors\n    \n    def test_missing_email(self, validator):\n        user_data = {'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Invalid email format' in errors\n    \n    def test_underage_user(self, validator):\n        user_data = {'email': 'test@example.com', 'age': 16}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Age must be at least 18' in errors\n    \n    def test_custom_min_age(self, custom_validator):\n        user_data = {'email': 'test@example.com', 'age': 19}\n        is_valid, errors = custom_validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Age must be at least 21' in errors\n    \n    @pytest.mark.parametrize('email,expected_valid', [\n        ('user@domain.com', True),\n        ('user.name@domain.co.uk', True),\n        ('invalid-email', False),\n        ('', False),\n        ('user@', False),\n        ('@domain.com', False),\n    ])\n    def test_email_validation_parametrized(self, validator, email, expected_valid):\n        user_data = {'email': email, 'age': 25}\n        is_valid, _ = validator.validate_user(user_data)\n        \n        assert (is_valid and 'Invalid email format' not in _) == expected_valid\n```\n\n### Integration Test Example\n\n```javascript\n// Generated API integration test\ndescribe('User API Integration', () => {\n  let app, server;\n  \n  beforeAll(async () => {\n    app = require('../app');\n    server = app.listen(0);\n  });\n  \n  afterAll(async () => {\n    await server.close();\n  });\n  \n  beforeEach(async () => {\n    await cleanupDatabase();\n    await seedTestData();\n  });\n  \n  describe('POST /api/users', () => {\n    test('should create user successfully', async () => {\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 30\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n      \n      expect(response.body).toMatchObject({\n        id: expect.any(Number),\n        name: userData.name,\n        email: userData.email,\n        age: userData.age,\n        createdAt: expect.any(String)\n      });\n    });\n    \n    test('should validate user data', async () => {\n      const invalidUserData = {\n        name: '',\n        email: 'invalid-email',\n        age: -5\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(invalidUserData)\n        .expect(400);\n      \n      expect(response.body.errors).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ field: 'name' }),\n          expect.objectContaining({ field: 'email' }),\n          expect.objectContaining({ field: 'age' })\n        ])\n      );\n    });\n  });\n});\n```\n\n## Test Configuration\n\n### Jest Configuration\n```javascript\n// Generated jest.config.js\nmodule.exports = {\n  testEnvironment: 'node',\n  collectCoverage: true,\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n  coverageThreshold: {\n    global: {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    }\n  },\n  testMatch: [\n    '**/__tests__/**/*.test.js',\n    '**/?(*.)+(spec|test).js'\n  ],\n  setupFilesAfterEnv: ['<rootDir>/src/test/setup.js']\n};\n```\n\n### Pytest Configuration\n```ini\n# Generated pytest.ini\n[tool:pytest]\naddopts = \n    --verbose\n    --cov=src\n    --cov-report=html\n    --cov-report=term\n    --cov-fail-under=90\n    --strict-markers\ntestpaths = tests\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    slow: Slow tests\n    security: Security tests\n```\n\n## Advanced Features\n\n### Property-Based Testing\n```javascript\n// Generated property-based test\nconst fc = require('fast-check');\n\ndescribe('calculateDiscount property tests', () => {\n  test('discount should never exceed 50% of price', () => {\n    fc.assert(fc.property(\n      fc.float({ min: 0.01, max: 10000 }), // price\n      fc.float({ min: 0, max: 100 }),      // discount percentage\n      fc.constantFrom('regular', 'premium'), // customer type\n      (price, discount, customerType) => {\n        const result = calculateDiscount(price, discount, customerType);\n        expect(result).toBeLessThanOrEqual(price * 0.5);\n      }\n    ));\n  });\n});\n```\n\n### Mock Generation\n```javascript\n// Generated mocks\nconst mockUserService = {\n  getUserById: jest.fn(),\n  createUser: jest.fn(),\n  updateUser: jest.fn(),\n  deleteUser: jest.fn()\n};\n\nconst mockDatabase = {\n  query: jest.fn(),\n  transaction: jest.fn(),\n  close: jest.fn()\n};\n```",
  "configuration": {
    "temperature": 0.3,
    "maxTokens": 8000,
    "systemPrompt": "You are a test generation expert focused on creating comprehensive, maintainable test suites with proper coverage and edge case handling"
  },
  "githubUrl": "https://github.com/claudepro/test-generator",
  "documentationUrl": "https://docs.claude.ai/commands/test-gen",
  "troubleshooting": [
    {
      "issue": "Generated tests don't match project testing framework or conventions",
      "solution": "Specify framework explicitly: --jest or --vitest. Provide test file example. Add: 'Follow existing test patterns in tests/example.test.ts'. Check framework version."
    },
    {
      "issue": "Test coverage threshold not met despite comprehensive test generation",
      "solution": "Run coverage report: npm run test -- --coverage. Identify uncovered branches. Add --coverage-report flag. Generate tests for edge cases and error paths."
    },
    {
      "issue": "Integration tests fail due to database or external service dependencies",
      "solution": "Use --integration with setup instructions. Mock external services: --unit for isolated tests. Provide connection strings for test environment. Add beforeEach cleanup."
    },
    {
      "issue": "Property-based tests generate invalid or nonsensical test data",
      "solution": "Constrain generators with domain rules. Add validators: fc.string().filter(isValidEmail). Specify --property-based with business logic constraints explicitly."
    },
    {
      "issue": "E2E tests timeout waiting for UI elements or API responses",
      "solution": "Increase timeout: jest.setTimeout(30000) for async operations. Add explicit waits: await waitFor(() => expect(element).toBeInTheDocument()). Use --e2e with retry logic."
    }
  ],
  "source": "community",
  "slug": "generate-tests",
  "seoTitle": "Generate Tests for Claude"
}
