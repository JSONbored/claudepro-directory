{
  "title": "/docs",
  "description": "Intelligent documentation generator with API specs, code examples, tutorials, and interactive guides",
  "category": "development",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["documentation", "api-docs", "tutorials", "guides", "markdown"],
  "content": "The `/docs` command automatically generates comprehensive documentation including API specifications, code examples, tutorials, user guides, and interactive documentation with live examples.\n\n## Usage\n\n```\n/docs [options] <file_or_project>\n```\n\n## Options\n\n### Documentation Types\n- `--api` - Generate API documentation (OpenAPI/Swagger)\n- `--code` - Code documentation with JSDoc/docstrings\n- `--user` - User guides and tutorials\n- `--developer` - Developer documentation and architecture\n- `--readme` - Project README and getting started guide\n- `--all` - Comprehensive documentation suite (default)\n\n### Output Formats\n- `--format=markdown` - Markdown documentation (default)\n- `--format=html` - Static HTML documentation\n- `--format=interactive` - Interactive documentation with examples\n- `--format=pdf` - PDF documentation for distribution\n- `--format=confluence` - Confluence wiki format\n\n### Documentation Features\n- `--examples` - Include runnable code examples\n- `--tutorials` - Generate step-by-step tutorials\n- `--diagrams` - Generate architecture and flow diagrams\n- `--interactive` - Create interactive API explorer\n- `--multilingual` - Generate documentation in multiple languages\n\n### Customization\n- `--template=default` - Use default documentation template\n- `--template=minimal` - Minimal documentation template\n- `--template=enterprise` - Enterprise documentation template\n- `--brand=company` - Apply company branding and styling\n\n## Examples\n\n### API Documentation Generation\n\n```javascript\n// Express.js API with comprehensive documentation\nconst express = require('express');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\n\nconst app = express();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       required:\n *         - name\n *         - email\n *       properties:\n *         id:\n *           type: string\n *           format: uuid\n *           description: Unique identifier for the user\n *           example: \"123e4567-e89b-12d3-a456-426614174000\"\n *         name:\n *           type: string\n *           minLength: 2\n *           maxLength: 100\n *           description: User's full name\n *           example: \"John Doe\"\n *         email:\n *           type: string\n *           format: email\n *           description: User's email address\n *           example: \"john.doe@example.com\"\n *         age:\n *           type: integer\n *           minimum: 13\n *           maximum: 120\n *           description: User's age in years\n *           example: 30\n *         role:\n *           type: string\n *           enum: [user, admin, moderator]\n *           description: User's role in the system\n *           example: \"user\"\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: User creation timestamp\n *           example: \"2025-09-16T10:30:00Z\"\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: Last update timestamp\n *           example: \"2025-09-16T14:45:00Z\"\n *       example:\n *         id: \"123e4567-e89b-12d3-a456-426614174000\"\n *         name: \"John Doe\"\n *         email: \"john.doe@example.com\"\n *         age: 30\n *         role: \"user\"\n *         createdAt: \"2025-09-16T10:30:00Z\"\n *         updatedAt: \"2025-09-16T14:45:00Z\"\n *   \n *     UserInput:\n *       type: object\n *       required:\n *         - name\n *         - email\n *       properties:\n *         name:\n *           type: string\n *           minLength: 2\n *           maxLength: 100\n *           description: User's full name\n *         email:\n *           type: string\n *           format: email\n *           description: User's email address\n *         age:\n *           type: integer\n *           minimum: 13\n *           maximum: 120\n *           description: User's age in years\n *   \n *     Error:\n *       type: object\n *       properties:\n *         error:\n *           type: string\n *           description: Error message\n *         code:\n *           type: string\n *           description: Error code\n *         details:\n *           type: object\n *           description: Additional error details\n *       example:\n *         error: \"Validation failed\"\n *         code: \"VALIDATION_ERROR\"\n *         details:\n *           field: \"email\"\n *           message: \"Invalid email format\"\n *   \n *   responses:\n *     NotFound:\n *       description: Resource not found\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *           example:\n *             error: \"User not found\"\n *             code: \"USER_NOT_FOUND\"\n *     ValidationError:\n *       description: Validation error\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *     ServerError:\n *       description: Internal server error\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *   \n *   securitySchemes:\n *     bearerAuth:\n *       type: http\n *       scheme: bearer\n *       bearerFormat: JWT\n */\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     summary: Get all users\n *     description: |\n *       Retrieve a paginated list of all users in the system.\n *       \n *       ## Features\n *       - Pagination support with configurable page size\n *       - Filtering by role, status, and creation date\n *       - Sorting by multiple fields\n *       - Search functionality across name and email\n *       \n *       ## Usage Examples\n *       \n *       ### Basic usage\n *       ```\n *       GET /api/users\n *       ```\n *       \n *       ### With pagination\n *       ```\n *       GET /api/users?page=2&limit=20\n *       ```\n *       \n *       ### With filtering\n *       ```\n *       GET /api/users?role=admin&status=active\n *       ```\n *       \n *       ### With search\n *       ```\n *       GET /api/users?search=john&sort=name:asc\n *       ```\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           minimum: 1\n *           default: 1\n *         description: Page number for pagination\n *         example: 1\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 100\n *           default: 20\n *         description: Number of users per page\n *         example: 20\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *           maxLength: 100\n *         description: Search term for name or email\n *         example: \"john\"\n *       - in: query\n *         name: role\n *         schema:\n *           type: string\n *           enum: [user, admin, moderator]\n *         description: Filter by user role\n *         example: \"user\"\n *       - in: query\n *         name: status\n *         schema:\n *           type: string\n *           enum: [active, inactive, suspended]\n *         description: Filter by user status\n *         example: \"active\"\n *       - in: query\n *         name: sort\n *         schema:\n *           type: string\n *           pattern: '^(name|email|createdAt|updatedAt):(asc|desc)$'\n *         description: Sort field and direction\n *         example: \"name:asc\"\n *     responses:\n *       200:\n *         description: List of users retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 users:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/User'\n *                 pagination:\n *                   type: object\n *                   properties:\n *                     page:\n *                       type: integer\n *                       example: 1\n *                     limit:\n *                       type: integer\n *                       example: 20\n *                     total:\n *                       type: integer\n *                       example: 150\n *                     totalPages:\n *                       type: integer\n *                       example: 8\n *                     hasNext:\n *                       type: boolean\n *                       example: true\n *                     hasPrev:\n *                       type: boolean\n *                       example: false\n *             examples:\n *               success:\n *                 summary: Successful response\n *                 value:\n *                   users:\n *                     - id: \"123e4567-e89b-12d3-a456-426614174000\"\n *                       name: \"John Doe\"\n *                       email: \"john.doe@example.com\"\n *                       age: 30\n *                       role: \"user\"\n *                       createdAt: \"2025-09-16T10:30:00Z\"\n *                       updatedAt: \"2025-09-16T14:45:00Z\"\n *                     - id: \"456e7890-e89b-12d3-a456-426614174001\"\n *                       name: \"Jane Smith\"\n *                       email: \"jane.smith@example.com\"\n *                       age: 28\n *                       role: \"admin\"\n *                       createdAt: \"2025-09-15T09:15:00Z\"\n *                       updatedAt: \"2025-09-16T11:20:00Z\"\n *                   pagination:\n *                     page: 1\n *                     limit: 20\n *                     total: 150\n *                     totalPages: 8\n *                     hasNext: true\n *                     hasPrev: false\n *       401:\n *         description: Unauthorized - Invalid or missing authentication token\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Authentication required\"\n *               code: \"UNAUTHORIZED\"\n *       403:\n *         description: Forbidden - Insufficient permissions\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Insufficient permissions\"\n *               code: \"FORBIDDEN\"\n *       500:\n *         $ref: '#/components/responses/ServerError'\n *   \n *   post:\n *     summary: Create a new user\n *     description: |\n *       Create a new user account in the system.\n *       \n *       ## Validation Rules\n *       - Name must be 2-100 characters long\n *       - Email must be unique and valid format\n *       - Age must be between 13-120 (if provided)\n *       - Password must meet complexity requirements\n *       \n *       ## Business Logic\n *       - New users are created with 'user' role by default\n *       - Email verification is sent upon creation\n *       - Account is initially inactive until email verification\n *       \n *       ## Rate Limiting\n *       - Maximum 5 user creations per hour per IP\n *       - Additional restrictions for automated requests\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UserInput'\n *           examples:\n *             basic:\n *               summary: Basic user creation\n *               value:\n *                 name: \"Alice Johnson\"\n *                 email: \"alice.johnson@example.com\"\n *                 age: 25\n *             minimal:\n *               summary: Minimal required fields\n *               value:\n *                 name: \"Bob Wilson\"\n *                 email: \"bob.wilson@example.com\"\n *     responses:\n *       201:\n *         description: User created successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *                 message:\n *                   type: string\n *                   example: \"User created successfully\"\n *             example:\n *               user:\n *                 id: \"789e0123-e89b-12d3-a456-426614174002\"\n *                 name: \"Alice Johnson\"\n *                 email: \"alice.johnson@example.com\"\n *                 age: 25\n *                 role: \"user\"\n *                 createdAt: \"2025-09-16T15:30:00Z\"\n *                 updatedAt: \"2025-09-16T15:30:00Z\"\n *               message: \"User created successfully\"\n *       400:\n *         $ref: '#/components/responses/ValidationError'\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       409:\n *         description: Conflict - Email already exists\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Email already exists\"\n *               code: \"EMAIL_EXISTS\"\n *       500:\n *         $ref: '#/components/responses/ServerError'\n */\napp.get('/api/users', async (req, res) => {\n  // Implementation here...\n});\n\napp.post('/api/users', async (req, res) => {\n  // Implementation here...\n});\n\n/**\n * @swagger\n * /api/users/{id}:\n *   get:\n *     summary: Get user by ID\n *     description: |\n *       Retrieve a specific user by their unique identifier.\n *       \n *       ## Access Control\n *       - Users can only access their own profile\n *       - Admins can access any user profile\n *       - Moderators can access non-admin user profiles\n *       \n *       ## Data Privacy\n *       - Sensitive fields are filtered based on access level\n *       - Full profile data only available to user themselves or admins\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *         example: \"123e4567-e89b-12d3-a456-426614174000\"\n *     responses:\n *       200:\n *         description: User found\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden - Cannot access this user\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *   \n *   put:\n *     summary: Update user\n *     description: |\n *       Update an existing user's information.\n *       \n *       ## Update Rules\n *       - Users can only update their own profile\n *       - Admins can update any user profile\n *       - Email changes require verification\n *       - Role changes restricted to admins\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UserInput'\n *     responses:\n *       200:\n *         description: User updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         $ref: '#/components/responses/ValidationError'\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *   \n *   delete:\n *     summary: Delete user\n *     description: |\n *       Delete a user account from the system.\n *       \n *       ## Deletion Policy\n *       - Soft delete by default (marks as inactive)\n *       - Hard delete requires admin privileges and confirmation\n *       - Associated data is anonymized or removed\n *       - Action is irreversible and logged for audit\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *       - in: query\n *         name: hard\n *         schema:\n *           type: boolean\n *           default: false\n *         description: Perform hard delete (admin only)\n *     responses:\n *       200:\n *         description: User deleted successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: \"User deleted successfully\"\n *                 deletedAt:\n *                   type: string\n *                   format: date-time\n *                   example: \"2025-09-16T16:00:00Z\"\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\napp.get('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n\napp.put('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n\napp.delete('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n```\n\n**Generated API Documentation:**\n\n```markdown\n# User Management API Documentation\n\n## Overview\n\nThe User Management API provides comprehensive functionality for managing user accounts, authentication, and user-related operations. This RESTful API follows OpenAPI 3.0 specifications and includes robust error handling, validation, and security features.\n\n### Base URL\n```\nhttps://api.example.com/v1\n```\n\n### Authentication\nAll API endpoints require authentication using JWT Bearer tokens:\n\n```bash\nAuthorization: Bearer <your-jwt-token>\n```\n\n### Rate Limiting\n- **Standard endpoints**: 100 requests per 15 minutes\n- **Authentication endpoints**: 5 requests per 15 minutes\n- **User creation**: 5 requests per hour\n\n### Response Format\nAll responses are in JSON format with consistent error handling:\n\n```json\n{\n  \"data\": {},\n  \"message\": \"Success\",\n  \"timestamp\": \"2025-09-16T10:30:00Z\"\n}\n```\n\n## Quick Start\n\n### 1. Authentication\nFirst, obtain an authentication token:\n\n```bash\ncurl -X POST https://api.example.com/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"your-password\"\n  }'\n```\n\n**Response:**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresIn\": 3600,\n  \"user\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"name\": \"John Doe\",\n    \"email\": \"user@example.com\",\n    \"role\": \"user\"\n  }\n}\n```\n\n### 2. Get All Users\nRetrieve a list of users with pagination:\n\n```bash\ncurl -X GET \"https://api.example.com/v1/api/users?page=1&limit=20\" \\\n  -H \"Authorization: Bearer <your-token>\"\n```\n\n### 3. Create a New User\n```bash\ncurl -X POST https://api.example.com/v1/api/users \\\n  -H \"Authorization: Bearer <your-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Alice Johnson\",\n    \"email\": \"alice@example.com\",\n    \"age\": 25\n  }'\n```\n\n### 4. Update User Information\n```bash\ncurl -X PUT https://api.example.com/v1/api/users/123e4567-e89b-12d3-a456-426614174000 \\\n  -H \"Authorization: Bearer <your-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Alice Johnson-Smith\",\n    \"age\": 26\n  }'\n```\n\n## Code Examples\n\n### JavaScript/Node.js\n\n```javascript\nconst axios = require('axios');\n\nclass UserAPIClient {\n  constructor(baseURL, token) {\n    this.client = axios.create({\n      baseURL,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  \n  async getUsers(params = {}) {\n    try {\n      const response = await this.client.get('/api/users', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  async createUser(userData) {\n    try {\n      const response = await this.client.post('/api/users', userData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  async getUserById(id) {\n    try {\n      const response = await this.client.get(`/api/users/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const { status, data } = error.response;\n      return new Error(`API Error ${status}: ${data.error || data.message}`);\n    } else if (error.request) {\n      // Network error\n      return new Error('Network error: Unable to reach API');\n    } else {\n      // Other error\n      return new Error(`Request error: ${error.message}`);\n    }\n  }\n}\n\n// Usage example\nconst userAPI = new UserAPIClient('https://api.example.com/v1', 'your-jwt-token');\n\n// Get paginated users\nconst users = await userAPI.getUsers({ page: 1, limit: 20, role: 'user' });\nconsole.log('Users:', users);\n\n// Create new user\nconst newUser = await userAPI.createUser({\n  name: 'Bob Wilson',\n  email: 'bob@example.com',\n  age: 30\n});\nconsole.log('Created user:', newUser);\n```\n\n### Python\n\n```python\nimport requests\nimport json\nfrom typing import Dict, List, Optional\n\nclass UserAPIClient:\n    def __init__(self, base_url: str, token: str):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'Bearer {token}',\n            'Content-Type': 'application/json'\n        })\n    \n    def get_users(self, page: int = 1, limit: int = 20, **filters) -> Dict:\n        \"\"\"Get paginated list of users with optional filters.\"\"\"\n        params = {'page': page, 'limit': limit, **filters}\n        response = self.session.get(f'{self.base_url}/api/users', params=params)\n        response.raise_for_status()\n        return response.json()\n    \n    def create_user(self, user_data: Dict) -> Dict:\n        \"\"\"Create a new user.\"\"\"\n        response = self.session.post(\n            f'{self.base_url}/api/users',\n            json=user_data\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def get_user_by_id(self, user_id: str) -> Dict:\n        \"\"\"Get user by ID.\"\"\"\n        response = self.session.get(f'{self.base_url}/api/users/{user_id}')\n        response.raise_for_status()\n        return response.json()\n    \n    def update_user(self, user_id: str, updates: Dict) -> Dict:\n        \"\"\"Update user information.\"\"\"\n        response = self.session.put(\n            f'{self.base_url}/api/users/{user_id}',\n            json=updates\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def delete_user(self, user_id: str, hard_delete: bool = False) -> Dict:\n        \"\"\"Delete user (soft delete by default).\"\"\"\n        params = {'hard': hard_delete} if hard_delete else {}\n        response = self.session.delete(\n            f'{self.base_url}/api/users/{user_id}',\n            params=params\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage example\nuser_api = UserAPIClient('https://api.example.com/v1', 'your-jwt-token')\n\n# Get users with filters\nusers = user_api.get_users(page=1, limit=10, role='admin', status='active')\nprint(f\"Found {users['pagination']['total']} users\")\n\n# Create user\nnew_user = user_api.create_user({\n    'name': 'Carol Davis',\n    'email': 'carol@example.com',\n    'age': 28\n})\nprint(f\"Created user: {new_user['user']['id']}\")\n```\n\n### curl Examples\n\n```bash\n#!/bin/bash\n\n# Set base URL and token\nBASE_URL=\"https://api.example.com/v1\"\nTOKEN=\"your-jwt-token\"\n\n# Get all users with pagination\necho \"Getting users...\"\ncurl -s -X GET \"$BASE_URL/api/users?page=1&limit=5\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.users[] | {id, name, email, role}'\n\n# Create a new user\necho \"Creating user...\"\nNEW_USER=$(curl -s -X POST \"$BASE_URL/api/users\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"David Miller\",\n    \"email\": \"david@example.com\",\n    \"age\": 35\n  }')\n\nUSER_ID=$(echo $NEW_USER | jq -r '.user.id')\necho \"Created user with ID: $USER_ID\"\n\n# Get the created user\necho \"Getting created user...\"\ncurl -s -X GET \"$BASE_URL/api/users/$USER_ID\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '{id, name, email, createdAt}'\n\n# Update the user\necho \"Updating user...\"\ncurl -s -X PUT \"$BASE_URL/api/users/$USER_ID\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"David Miller Jr.\",\n    \"age\": 36\n  }' \\\n  | jq '{id, name, age, updatedAt}'\n\n# Search users\necho \"Searching users...\"\ncurl -s -X GET \"$BASE_URL/api/users?search=david&sort=name:asc\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.users[] | {name, email}'\n```\n\n## Error Handling\n\n### Error Response Format\nAll errors follow a consistent format:\n\n```json\n{\n  \"error\": \"Human-readable error message\",\n  \"code\": \"MACHINE_READABLE_ERROR_CODE\",\n  \"details\": {\n    \"field\": \"Additional context\",\n    \"value\": \"Problematic value\"\n  },\n  \"timestamp\": \"2025-09-16T10:30:00Z\",\n  \"requestId\": \"req_123456789\"\n}\n```\n\n### Common Error Codes\n\n| Status Code | Error Code | Description | Action |\n|-------------|------------|-------------|--------|\n| 400 | `VALIDATION_ERROR` | Request validation failed | Check request format and required fields |\n| 401 | `UNAUTHORIZED` | Authentication required | Provide valid JWT token |\n| 403 | `FORBIDDEN` | Insufficient permissions | Check user role and permissions |\n| 404 | `USER_NOT_FOUND` | User does not exist | Verify user ID |\n| 409 | `EMAIL_EXISTS` | Email already registered | Use different email address |\n| 429 | `RATE_LIMIT_EXCEEDED` | Too many requests | Wait before retrying |\n| 500 | `INTERNAL_ERROR` | Server error | Contact support if persistent |\n\n### Error Handling Best Practices\n\n```javascript\n// Comprehensive error handling example\nasync function handleUserOperation(apiCall) {\n  try {\n    const result = await apiCall();\n    return { success: true, data: result };\n  } catch (error) {\n    const errorInfo = {\n      success: false,\n      error: error.message,\n      code: error.code,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Log error for debugging\n    console.error('API Error:', errorInfo);\n    \n    // Handle specific error types\n    switch (error.response?.status) {\n      case 400:\n        return { ...errorInfo, userMessage: 'Please check your input and try again.' };\n      case 401:\n        return { ...errorInfo, userMessage: 'Please log in again.', requiresAuth: true };\n      case 403:\n        return { ...errorInfo, userMessage: 'You don\\'t have permission for this action.' };\n      case 404:\n        return { ...errorInfo, userMessage: 'The requested user was not found.' };\n      case 409:\n        return { ...errorInfo, userMessage: 'This email is already registered.' };\n      case 429:\n        return { ...errorInfo, userMessage: 'Too many requests. Please try again later.', retryAfter: 60 };\n      case 500:\n        return { ...errorInfo, userMessage: 'Server error. Please try again or contact support.' };\n      default:\n        return { ...errorInfo, userMessage: 'An unexpected error occurred.' };\n    }\n  }\n}\n\n// Usage\nconst result = await handleUserOperation(() => userAPI.createUser(userData));\nif (result.success) {\n  console.log('User created:', result.data);\n} else {\n  showErrorMessage(result.userMessage);\n  if (result.requiresAuth) {\n    redirectToLogin();\n  }\n}\n```\n\n## SDKs and Libraries\n\n### Official SDKs\n- **JavaScript/TypeScript**: `npm install @example/user-api-client`\n- **Python**: `pip install example-user-api`\n- **Go**: `go get github.com/example/user-api-go`\n- **PHP**: `composer require example/user-api-php`\n\n### Community Libraries\n- **Ruby**: [user-api-ruby](https://github.com/community/user-api-ruby)\n- **Java**: [user-api-java](https://github.com/community/user-api-java)\n- **C#**: [UserApi.NET](https://github.com/community/user-api-dotnet)\n\n## Testing\n\n### Postman Collection\nDownload our [Postman collection](https://api.example.com/postman/user-api.json) with pre-configured requests and environment variables.\n\n### Test Data\nUse our test environment with sample data:\n- **Base URL**: `https://api-test.example.com/v1`\n- **Test Token**: Contact support for test credentials\n\n### Example Test Cases\n\n```javascript\n// Jest test examples\ndescribe('User API', () => {\n  let userAPI;\n  let testUserId;\n  \n  beforeAll(() => {\n    userAPI = new UserAPIClient(\n      process.env.TEST_API_URL,\n      process.env.TEST_API_TOKEN\n    );\n  });\n  \n  test('should create a new user', async () => {\n    const userData = {\n      name: 'Test User',\n      email: `test-${Date.now()}@example.com`,\n      age: 25\n    };\n    \n    const result = await userAPI.createUser(userData);\n    \n    expect(result.user).toMatchObject({\n      name: userData.name,\n      email: userData.email,\n      age: userData.age,\n      role: 'user'\n    });\n    expect(result.user.id).toBeDefined();\n    \n    testUserId = result.user.id;\n  });\n  \n  test('should get user by ID', async () => {\n    const user = await userAPI.getUserById(testUserId);\n    \n    expect(user.id).toBe(testUserId);\n    expect(user.name).toBe('Test User');\n  });\n  \n  test('should update user information', async () => {\n    const updates = { name: 'Updated Test User', age: 26 };\n    const updatedUser = await userAPI.updateUser(testUserId, updates);\n    \n    expect(updatedUser.name).toBe(updates.name);\n    expect(updatedUser.age).toBe(updates.age);\n  });\n  \n  test('should handle validation errors', async () => {\n    const invalidData = { name: '', email: 'invalid-email' };\n    \n    await expect(userAPI.createUser(invalidData))\n      .rejects.toThrow(/validation/i);\n  });\n  \n  afterAll(async () => {\n    if (testUserId) {\n      await userAPI.deleteUser(testUserId, true); // Hard delete test user\n    }\n  });\n});\n```\n\n## Support and Resources\n\n### Documentation\n- **API Reference**: [https://docs.example.com/api](https://docs.example.com/api)\n- **Interactive API Explorer**: [https://api.example.com/docs](https://api.example.com/docs)\n- **Changelog**: [https://docs.example.com/changelog](https://docs.example.com/changelog)\n\n### Support Channels\n- **Developer Support**: [dev-support@example.com](mailto:dev-support@example.com)\n- **Stack Overflow**: Tag questions with `example-api`\n- **Discord Community**: [https://discord.gg/example-dev](https://discord.gg/example-dev)\n- **GitHub Issues**: [https://github.com/example/api-issues](https://github.com/example/api-issues)\n\n### Status and Monitoring\n- **API Status**: [https://status.example.com](https://status.example.com)\n- **Performance Metrics**: [https://metrics.example.com](https://metrics.example.com)\n- **Incident Reports**: [https://incidents.example.com](https://incidents.example.com)\n\n---\n\n*Last updated: September 16, 2025*  \n*API Version: 1.2.0*  \n*Documentation Version: 2.1.0*\n```\n\n## Advanced Documentation Features\n\n### Interactive Code Examples\n- **Try It Now**: Embedded API explorer with live requests\n- **Code Generation**: Auto-generate client code in multiple languages\n- **Request/Response Validation**: Real-time validation feedback\n- **Environment Switching**: Test against different API environments\n\n### Tutorial Generation\n- **Step-by-step Guides**: Progressive tutorials with checkpoints\n- **Video Walkthroughs**: Auto-generated video demonstrations\n- **Interactive Sandboxes**: Live coding environments\n- **Progress Tracking**: Tutorial completion and achievement system\n\n### Documentation Maintenance\n- **Auto-sync**: Keep docs in sync with code changes\n- **Version Control**: Track documentation versions with releases\n- **Translation**: Multi-language documentation support\n- **Analytics**: Track documentation usage and effectiveness\n\nThis documentation generator creates comprehensive, interactive, and maintainable documentation that enhances developer experience and reduces support overhead.",
  "configuration": {
    "temperature": 0.3,
    "maxTokens": 16000,
    "systemPrompt": "You are a technical writing expert specializing in API documentation, developer guides, and interactive documentation. Create comprehensive, clear, and actionable documentation with practical examples."
  },
  "githubUrl": "https://github.com/claudepro/documentation-generator",
  "documentationUrl": "https://docs.claude.ai/commands/docs"
}