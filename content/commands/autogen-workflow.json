{
  "description": "Orchestrate multi-agent workflows using Microsoft AutoGen v0.4 with role-based task delegation, conversation patterns, and collaborative problem solving",
  "category": "commands",
  "author": "JSONbored",
  "dateAdded": "2025-10-16",
  "tags": ["autogen", "multi-agent", "workflow", "orchestration", "ai"],
  "content": "The `/autogen-workflow` command creates sophisticated multi-agent workflows using Microsoft AutoGen v0.4's actor model with role-based delegation and conversation patterns.\n\n## Usage\n\n```\n/autogen-workflow [options] <workflow_description>\n```\n\n## Options\n\n### Workflow Types\n- `--research` - Research and analysis workflow\n- `--coding` - Software development workflow (default)\n- `--review` - Code review and quality assurance\n- `--debug` - Debugging and troubleshooting\n- `--planning` - Project planning and architecture\n\n### Agent Configuration\n- `--agents=<list>` - Specify agent roles (e.g., \"researcher,analyst,coder\")\n- `--conversation-pattern=<type>` - Conversation pattern (sequential, round-robin, hierarchical)\n- `--termination=<condition>` - Workflow termination condition\n\n### Model Selection\n- `--model=<name>` - AI model for agents (gpt-4, claude-sonnet-4, gemini-pro)\n- `--temperature=<float>` - Model temperature (0.0-1.0)\n- `--max-rounds=<int>` - Maximum conversation rounds (default: 10)\n\n### Tools & Integration\n- `--tools=<list>` - Enable specific tools (web-search, file-ops, shell)\n- `--memory` - Enable conversation memory\n- `--human-in-loop` - Require human approval for critical actions\n\n## Examples\n\n### Software Development Workflow\n\n**Command:**\n```\n/autogen-workflow --coding --agents=\"architect,coder,reviewer,tester\" \"Build a user authentication system with OAuth2 support\"\n```\n\n**Generated Workflow:**\n```python\n# Generated AutoGen v0.4 workflow\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.teams import RoundRobinGroupChat\nfrom autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination\nfrom autogen_ext.models import OpenAIChatCompletionClient\n\n# Configure model client\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n    temperature=0.7,\n)\n\n# Define specialized agents\narchitect_agent = AssistantAgent(\n    name=\"Architect\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a software architect specializing in authentication systems.\n    Your role is to:\n    1. Design the system architecture\n    2. Define data models and API contracts\n    3. Identify security requirements\n    4. Create technical specifications\n    \n    Focus on scalability, security, and best practices.\n    \"\"\",\n    description=\"Designs system architecture and technical specifications\",\n)\n\ncoder_agent = AssistantAgent(\n    name=\"Coder\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are an expert full-stack developer.\n    Your role is to:\n    1. Implement the architecture designed by the Architect\n    2. Write production-ready, type-safe code\n    3. Follow SOLID principles and design patterns\n    4. Add comprehensive error handling\n    \n    Use TypeScript, React, and Node.js.\n    \"\"\",\n    description=\"Implements the technical specifications\",\n)\n\nreviewer_agent = AssistantAgent(\n    name=\"Reviewer\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a senior code reviewer and security expert.\n    Your role is to:\n    1. Review code for security vulnerabilities\n    2. Ensure code quality and maintainability\n    3. Verify adherence to best practices\n    4. Identify potential bugs and edge cases\n    \n    Be thorough and constructive in your feedback.\n    \"\"\",\n    description=\"Reviews code quality and security\",\n)\n\ntester_agent = AssistantAgent(\n    name=\"Tester\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a QA engineer specializing in test automation.\n    Your role is to:\n    1. Write comprehensive test suites\n    2. Create unit, integration, and E2E tests\n    3. Identify test scenarios and edge cases\n    4. Ensure high code coverage\n    \n    Use Jest, Vitest, and Playwright.\n    \"\"\",\n    description=\"Creates comprehensive test suites\",\n)\n\n# Create team with round-robin conversation pattern\nteam = RoundRobinGroupChat(\n    participants=[architect_agent, coder_agent, reviewer_agent, tester_agent],\n    max_turns=3,\n)\n\n# Define termination conditions\ntermination = MaxMessageTermination(max_messages=20) | TextMentionTermination(\"TASK_COMPLETE\")\n\n# Run workflow\nasync def run_auth_workflow():\n    result = await team.run(\n        task=\"\"\"\n        Build a user authentication system with OAuth2 support.\n        \n        Requirements:\n        1. Support email/password and OAuth2 (Google, GitHub)\n        2. JWT-based session management\n        3. Role-based access control (RBAC)\n        4. Rate limiting and brute force protection\n        5. PKCE flow for OAuth2\n        6. Comprehensive test coverage\n        \n        Architect: Start by designing the system architecture.\n        \"\"\",\n        termination_condition=termination,\n    )\n    \n    print(\"Workflow completed!\")\n    print(f\"Messages exchanged: {len(result.messages)}\")\n    print(f\"Final result: {result.messages[-1].content}\")\n\n# Execute\nimport asyncio\nasyncio.run(run_auth_workflow())\n```\n\n### Research and Analysis Workflow\n\n**Command:**\n```\n/autogen-workflow --research --agents=\"researcher,analyst,synthesizer\" --tools=\"web-search\" \"Analyze the current state of edge computing in 2025\"\n```\n\n**Generated Workflow:**\n```python\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.teams import Swarm\nfrom autogen_agentchat.messages import HandoffMessage\nfrom autogen_ext.tools import WebSearchTool\n\n# Initialize tools\nweb_search_tool = WebSearchTool()\n\n# Research agent with web search capability\nresearcher_agent = AssistantAgent(\n    name=\"Researcher\",\n    model_client=model_client,\n    tools=[web_search_tool],\n    system_message=\"\"\"\n    You are a research specialist.\n    Your role is to:\n    1. Search for relevant information using web search\n    2. Gather data from multiple sources\n    3. Identify key trends and developments\n    4. Compile raw research findings\n    \n    Be thorough and cite your sources.\n    \"\"\",\n    handoffs=[\"Analyst\"],\n)\n\n# Analyst agent\nanalyst_agent = AssistantAgent(\n    name=\"Analyst\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a data analyst and industry expert.\n    Your role is to:\n    1. Analyze research findings\n    2. Identify patterns and insights\n    3. Evaluate market trends\n    4. Provide data-driven conclusions\n    \n    Focus on quantitative and qualitative analysis.\n    \"\"\",\n    handoffs=[\"Synthesizer\"],\n)\n\n# Synthesizer agent\nsynthesizer_agent = AssistantAgent(\n    name=\"Synthesizer\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a technical writer and synthesizer.\n    Your role is to:\n    1. Combine research and analysis into coherent report\n    2. Present findings in clear, structured format\n    3. Highlight key takeaways\n    4. Provide actionable recommendations\n    \n    Create executive summaries and detailed reports.\n    \"\"\",\n)\n\n# Create swarm with handoffs\nteam = Swarm(\n    participants=[researcher_agent, analyst_agent, synthesizer_agent],\n)\n\nasync def run_research_workflow():\n    result = await team.run(\n        task=\"\"\"\n        Analyze the current state of edge computing in 2025.\n        \n        Focus on:\n        1. Market size and growth trends\n        2. Major players and technologies\n        3. Use cases and adoption rates\n        4. Future predictions\n        \n        Researcher: Begin by gathering data from multiple sources.\n        \"\"\",\n        termination_condition=TextMentionTermination(\"RESEARCH_COMPLETE\"),\n    )\n    \n    return result\n```\n\n### Code Review Workflow\n\n**Command:**\n```\n/autogen-workflow --review --agents=\"security-auditor,performance-reviewer,style-checker\" \"Review authentication middleware implementation\"\n```\n\n**Generated Workflow:**\n```python\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.teams import SelectorGroupChat\nfrom autogen_ext.tools import FileReadTool, GrepTool\n\n# Tools for code analysis\nfile_read_tool = FileReadTool()\ngrep_tool = GrepTool()\n\n# Security auditor\nsecurity_agent = AssistantAgent(\n    name=\"SecurityAuditor\",\n    model_client=model_client,\n    tools=[file_read_tool, grep_tool],\n    system_message=\"\"\"\n    You are a security auditor specializing in OWASP Top 10.\n    Review code for:\n    1. SQL injection vulnerabilities\n    2. XSS prevention\n    3. Authentication/authorization flaws\n    4. Sensitive data exposure\n    5. Security misconfigurations\n    \n    Provide specific recommendations for fixes.\n    \"\"\",\n)\n\n# Performance reviewer\nperformance_agent = AssistantAgent(\n    name=\"PerformanceReviewer\",\n    model_client=model_client,\n    tools=[file_read_tool],\n    system_message=\"\"\"\n    You are a performance optimization expert.\n    Review code for:\n    1. Inefficient algorithms\n    2. Memory leaks\n    3. Database query optimization\n    4. Caching opportunities\n    5. Resource usage\n    \n    Suggest performance improvements.\n    \"\"\",\n)\n\n# Style checker\nstyle_agent = AssistantAgent(\n    name=\"StyleChecker\",\n    model_client=model_client,\n    tools=[file_read_tool],\n    system_message=\"\"\"\n    You are a code quality expert.\n    Review code for:\n    1. Adherence to style guide\n    2. Code readability\n    3. Proper error handling\n    4. Documentation completeness\n    5. Best practices\n    \n    Ensure maintainable, clean code.\n    \"\"\",\n)\n\n# Create selector-based team (each agent reviews in parallel)\nteam = SelectorGroupChat(\n    participants=[security_agent, performance_agent, style_agent],\n    model_client=model_client,\n    selector_prompt=\"Select the agent that should review next based on the code aspect being discussed.\",\n)\n\nasync def run_review_workflow(file_path: str):\n    result = await team.run(\n        task=f\"\"\"\n        Review the authentication middleware at {file_path}.\n        \n        Each agent should:\n        1. Read the file\n        2. Analyze their specific area\n        3. Provide detailed findings\n        4. Suggest improvements\n        \n        Provide a comprehensive review report.\n        \"\"\",\n        termination_condition=MaxMessageTermination(max_messages=15),\n    )\n    \n    return result\n```\n\n### Debugging Workflow\n\n**Command:**\n```\n/autogen-workflow --debug --agents=\"debugger,root-cause-analyst,fixer\" --human-in-loop \"Investigate failing user login tests\"\n```\n\n**Generated Workflow:**\n```python\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.teams import RoundRobinGroupChat\nfrom autogen_ext.tools import ShellTool, FileReadTool, FileWriteTool\n\n# Tools for debugging\nshell_tool = ShellTool()\nfile_read_tool = FileReadTool()\nfile_write_tool = FileWriteTool()\n\n# Debugger agent\ndebugger_agent = AssistantAgent(\n    name=\"Debugger\",\n    model_client=model_client,\n    tools=[shell_tool, file_read_tool],\n    system_message=\"\"\"\n    You are a debugging expert.\n    Your role is to:\n    1. Reproduce the failing tests\n    2. Analyze error messages and stack traces\n    3. Identify symptoms of the issue\n    4. Gather relevant logs and data\n    \n    Use systematic debugging techniques.\n    \"\"\",\n)\n\n# Root cause analyst\nanalyst_agent = AssistantAgent(\n    name=\"RootCauseAnalyst\",\n    model_client=model_client,\n    tools=[file_read_tool],\n    system_message=\"\"\"\n    You are a root cause analysis expert.\n    Your role is to:\n    1. Analyze debugging findings\n    2. Identify the root cause of the issue\n    3. Consider all contributing factors\n    4. Explain the issue clearly\n    \n    Use the 5 Whys technique.\n    \"\"\",\n)\n\n# Fixer agent (requires human approval)\nfixer_agent = AssistantAgent(\n    name=\"Fixer\",\n    model_client=model_client,\n    tools=[file_write_tool, shell_tool],\n    system_message=\"\"\"\n    You are a senior developer who implements fixes.\n    Your role is to:\n    1. Implement the fix based on root cause analysis\n    2. Write or update tests\n    3. Verify the fix resolves the issue\n    4. Ensure no regressions\n    \n    Request human approval before making changes.\n    \"\"\",\n)\n\nteam = RoundRobinGroupChat(\n    participants=[debugger_agent, analyst_agent, fixer_agent],\n    max_turns=2,\n)\n\nasync def run_debug_workflow():\n    result = await team.run(\n        task=\"\"\"\n        Investigate and fix the failing user login tests.\n        \n        Steps:\n        1. Debugger: Run tests and gather error information\n        2. RootCauseAnalyst: Identify the root cause\n        3. Fixer: Implement fix (wait for human approval)\n        \n        Ensure all tests pass after the fix.\n        \"\"\",\n        termination_condition=TextMentionTermination(\"TESTS_PASSING\"),\n    )\n    \n    return result\n```\n\n## Configuration\n\n### Model Configuration\n```python\n# Custom model configuration\nfrom autogen_ext.models import AzureOpenAIChatCompletionClient\n\nmodel_client = AzureOpenAIChatCompletionClient(\n    azure_deployment=\"gpt-4o\",\n    model=\"gpt-4o\",\n    api_version=\"2024-02-15-preview\",\n    temperature=0.7,\n    max_tokens=4000,\n)\n```\n\n### Team Patterns\n```python\n# Sequential pattern\nfrom autogen_agentchat.teams import RoundRobinGroupChat\n\nteam = RoundRobinGroupChat(\n    participants=[agent1, agent2, agent3],\n    max_turns=2,  # Each agent speaks twice\n)\n\n# Swarm with handoffs\nfrom autogen_agentchat.teams import Swarm\n\nteam = Swarm(\n    participants=[agent1, agent2, agent3],\n    # Handoffs defined in agent system messages\n)\n\n# Selector-based (dynamic)\nfrom autogen_agentchat.teams import SelectorGroupChat\n\nteam = SelectorGroupChat(\n    participants=[agent1, agent2, agent3],\n    model_client=model_client,\n    selector_prompt=\"Choose the best agent for the current task.\",\n)\n```\n\n## Best Practices\n\n1. **Clear Role Definition**: Each agent should have a specific, well-defined role\n2. **Termination Conditions**: Always set clear termination conditions to avoid infinite loops\n3. **Tool Access**: Only grant tools to agents that need them\n4. **Human-in-Loop**: Require approval for critical actions (deployments, deletions)\n5. **Error Handling**: Implement proper error handling and recovery mechanisms\n6. **Logging**: Enable comprehensive logging for debugging workflows\n7. **Cost Management**: Set message limits to control API costs",
  "configuration": {
    "temperature": 0.4,
    "maxTokens": 8000,
    "systemPrompt": "You are a Microsoft AutoGen v0.4 expert focused on creating efficient multi-agent workflows with proper orchestration patterns"
  },
  "githubUrl": "https://github.com/microsoft/autogen",
  "documentationUrl": "https://microsoft.github.io/autogen/",
  "source": "community",
  "slug": "autogen-workflow",
  "seoTitle": "AutoGen Multi-Agent Workflow for Claude"
}
