{
  "slug": "review",
  "description": "Comprehensive code review with security analysis, performance optimization, and best practices validation",
  "category": "commands",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["code-review", "security", "performance", "quality", "analysis"],
  "content": "The `/review` command provides comprehensive code analysis including security vulnerabilities, performance optimizations, code quality improvements, and adherence to best practices.\n\n## Usage\n\n```\n/review [options] <file_or_directory>\n```\n\n## Options\n\n### Review Types\n- `--security` - Focus on security vulnerabilities and threats\n- `--performance` - Analyze performance bottlenecks and optimizations\n- `--style` - Check coding style and formatting\n- `--architecture` - Review architectural patterns and design\n- `--all` - Comprehensive review (default)\n\n### Output Formats\n- `--format=markdown` - Markdown report (default)\n- `--format=json` - Machine-readable JSON output\n- `--format=html` - Rich HTML report\n- `--format=sarif` - SARIF format for CI/CD integration\n\n### Severity Filtering\n- `--severity=critical` - Only critical issues\n- `--severity=high` - High and critical issues\n- `--severity=medium` - Medium, high, and critical issues\n- `--severity=all` - All issues including low severity\n\n### Language-Specific Options\n- `--eslint` - Use ESLint rules for JavaScript/TypeScript\n- `--pylint` - Use Pylint for Python code\n- `--rustfmt` - Use Rust formatting and clippy\n- `--gofmt` - Use Go formatting and vet\n- `--rubocop` - Use RuboCop for Ruby\n\n## Examples\n\n### Basic Code Review\n\n```javascript\n// Example file: user-service.js\nclass UserService {\n  constructor() {\n    this.users = [];\n    this.database = new Database(process.env.DB_PASSWORD); // 🚨 Security Issue\n  }\n  \n  async createUser(userData) {\n    // 🚨 No input validation\n    const user = {\n      id: Math.random(), // 🚨 Poor ID generation\n      ...userData,\n      createdAt: new Date()\n    };\n    \n    // 🚨 SQL injection vulnerability\n    const query = `INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`;\n    await this.database.query(query);\n    \n    this.users.push(user);\n    return user;\n  }\n  \n  // 🚨 No access control\n  async deleteUser(userId) {\n    const index = this.users.findIndex(u => u.id == userId); // 🚨 Type coercion\n    if (index > -1) {\n      this.users.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n  \n  // 🚨 Inefficient search\n  async searchUsers(query) {\n    return this.users.filter(user => \n      user.name.toLowerCase().includes(query.toLowerCase()) ||\n      user.email.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n}\n```\n\n**Generated Review Report:**\n\n```markdown\n# Code Review Report: user-service.js\n\n## 🚨 Critical Issues (4)\n\n### 1. SQL Injection Vulnerability\n**Location:** Line 15  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** Direct string concatenation in SQL query allows SQL injection attacks.\n\n```javascript\n// ❌ Vulnerable code\nconst query = `INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`;\n\n// ✅ Recommended fix\nconst query = 'INSERT INTO users (name, email) VALUES (?, ?)';\nawait this.database.query(query, [user.name, user.email]);\n```\n\n**Impact:** Attackers could execute arbitrary SQL commands, potentially accessing or deleting sensitive data.\n\n### 2. Exposed Database Credentials\n**Location:** Line 4  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** Database password exposed in environment variable without proper encryption.\n\n```javascript\n// ❌ Vulnerable code\nthis.database = new Database(process.env.DB_PASSWORD);\n\n// ✅ Recommended fix\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  ssl: true,\n  connectionLimit: 10\n};\nthis.database = new Database(dbConfig);\n```\n\n### 3. Missing Input Validation\n**Location:** Line 7  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** No validation of user input allows injection of malicious data.\n\n```javascript\n// ✅ Recommended implementation\nconst Joi = require('joi');\n\nconst userSchema = Joi.object({\n  name: Joi.string().alphanum().min(2).max(50).required(),\n  email: Joi.string().email().required(),\n  age: Joi.number().integer().min(13).max(120)\n});\n\nasync createUser(userData) {\n  const { error, value } = userSchema.validate(userData);\n  if (error) {\n    throw new ValidationError('Invalid user data', error.details);\n  }\n  // Continue with validated data...\n}\n```\n\n### 4. Weak ID Generation\n**Location:** Line 9  \n**Severity:** High  \n**Category:** Security  \n\n**Issue:** Math.random() is predictable and not suitable for ID generation.\n\n```javascript\n// ❌ Vulnerable code\nid: Math.random()\n\n// ✅ Recommended fix\nconst { v4: uuidv4 } = require('uuid');\nid: uuidv4()\n\n// Or for numeric IDs:\nconst crypto = require('crypto');\nid: crypto.randomBytes(16).toString('hex')\n```\n\n## ⚠️ High Priority Issues (2)\n\n### 5. Missing Access Control\n**Location:** Line 25  \n**Severity:** High  \n**Category:** Security  \n\n**Issue:** No authorization checks allow any user to delete any other user.\n\n```javascript\n// ✅ Recommended implementation\nasync deleteUser(userId, requestingUserId, userRole) {\n  // Check if user can delete (self or admin)\n  if (userId !== requestingUserId && userRole !== 'admin') {\n    throw new AuthorizationError('Insufficient permissions');\n  }\n  \n  // Additional checks...\n}\n```\n\n### 6. Type Safety Issue\n**Location:** Line 26  \n**Severity:** High  \n**Category:** Quality  \n\n**Issue:** Using loose equality (==) instead of strict equality (===).\n\n```javascript\n// ❌ Problematic code\nconst index = this.users.findIndex(u => u.id == userId);\n\n// ✅ Recommended fix\nconst index = this.users.findIndex(u => u.id === userId);\n```\n\n## 📊 Performance Issues (1)\n\n### 7. Inefficient Search Algorithm\n**Location:** Line 33  \n**Severity:** Medium  \n**Category:** Performance  \n\n**Issue:** O(n) search operation doesn't scale with large user datasets.\n\n```javascript\n// ✅ Optimized implementation\nclass UserService {\n  constructor() {\n    this.users = [];\n    this.userIndex = new Map(); // For fast lookups\n    this.searchIndex = {}; // For text search\n  }\n  \n  async searchUsers(query, limit = 20, offset = 0) {\n    // Use database query for large datasets\n    const sql = `\n      SELECT * FROM users \n      WHERE MATCH(name, email) AGAINST (? IN NATURAL LANGUAGE MODE)\n      LIMIT ? OFFSET ?\n    `;\n    return await this.database.query(sql, [query, limit, offset]);\n  }\n}\n```\n\n## 🏗️ Architecture Recommendations\n\n### 1. Separation of Concerns\n```javascript\n// ✅ Improved architecture\nclass UserService {\n  constructor(userRepository, validator, logger) {\n    this.userRepository = userRepository;\n    this.validator = validator;\n    this.logger = logger;\n  }\n}\n\nclass UserRepository {\n  constructor(database) {\n    this.database = database;\n  }\n  \n  async create(userData) {\n    const query = 'INSERT INTO users (id, name, email, created_at) VALUES (?, ?, ?, ?)';\n    return await this.database.query(query, [\n      userData.id,\n      userData.name,\n      userData.email,\n      userData.createdAt\n    ]);\n  }\n}\n```\n\n### 2. Error Handling\n```javascript\n// ✅ Proper error handling\nclass UserService {\n  async createUser(userData) {\n    try {\n      await this.validator.validate(userData);\n      const user = await this.userRepository.create(userData);\n      this.logger.info('User created successfully', { userId: user.id });\n      return user;\n    } catch (error) {\n      this.logger.error('Failed to create user', { error: error.message, userData });\n      \n      if (error instanceof ValidationError) {\n        throw new BadRequestError('Invalid user data', error.details);\n      }\n      \n      throw new InternalServerError('Failed to create user');\n    }\n  }\n}\n```\n\n## 🧪 Testing Recommendations\n\n```javascript\n// ✅ Comprehensive test suite\ndescribe('UserService', () => {\n  let userService, mockRepository, mockValidator;\n  \n  beforeEach(() => {\n    mockRepository = {\n      create: jest.fn(),\n      findById: jest.fn(),\n      delete: jest.fn()\n    };\n    mockValidator = {\n      validate: jest.fn()\n    };\n    userService = new UserService(mockRepository, mockValidator);\n  });\n  \n  describe('createUser', () => {\n    it('should create user with valid data', async () => {\n      const userData = { name: 'John Doe', email: 'john@example.com' };\n      mockValidator.validate.mockResolvedValue(userData);\n      mockRepository.create.mockResolvedValue({ id: '123', ...userData });\n      \n      const result = await userService.createUser(userData);\n      \n      expect(result.id).toBe('123');\n      expect(mockRepository.create).toHaveBeenCalledWith(userData);\n    });\n    \n    it('should throw error for invalid data', async () => {\n      mockValidator.validate.mockRejectedValue(new ValidationError('Invalid email'));\n      \n      await expect(userService.createUser({ email: 'invalid' }))\n        .rejects.toThrow(BadRequestError);\n    });\n    \n    it('should handle SQL injection attempts', async () => {\n      const maliciousData = {\n        name: \"'; DROP TABLE users; --\",\n        email: 'test@example.com'\n      };\n      \n      // Should be caught by validation\n      mockValidator.validate.mockRejectedValue(new ValidationError('Invalid characters'));\n      \n      await expect(userService.createUser(maliciousData))\n        .rejects.toThrow(BadRequestError);\n    });\n  });\n});\n```\n\n## 📋 Security Checklist\n\n- [ ] **Input Validation**: Implement comprehensive input validation\n- [ ] **SQL Injection**: Use parameterized queries\n- [ ] **Authentication**: Add proper user authentication\n- [ ] **Authorization**: Implement role-based access control\n- [ ] **Encryption**: Encrypt sensitive data at rest and in transit\n- [ ] **Logging**: Add security event logging\n- [ ] **Rate Limiting**: Implement API rate limiting\n- [ ] **CORS**: Configure CORS policies appropriately\n- [ ] **Headers**: Set security headers (HSTS, CSP, etc.)\n- [ ] **Dependencies**: Audit and update dependencies regularly\n\n## 📈 Performance Optimizations\n\n1. **Database Indexing**\n   ```sql\n   CREATE INDEX idx_users_email ON users(email);\n   CREATE INDEX idx_users_name ON users(name);\n   CREATE FULLTEXT INDEX idx_users_search ON users(name, email);\n   ```\n\n2. **Caching Strategy**\n   ```javascript\n   const cache = new Redis();\n   \n   async getUser(id) {\n     const cached = await cache.get(`user:${id}`);\n     if (cached) return JSON.parse(cached);\n     \n     const user = await this.userRepository.findById(id);\n     await cache.setex(`user:${id}`, 3600, JSON.stringify(user));\n     return user;\n   }\n   ```\n\n3. **Connection Pooling**\n   ```javascript\n   const pool = new Pool({\n     host: 'localhost',\n     user: 'user',\n     password: 'password',\n     database: 'myapp',\n     connectionLimit: 10,\n     acquireTimeout: 60000,\n     timeout: 60000\n   });\n   ```\n\n## 🔧 Configuration\n\n```javascript\n// ✅ Environment-based configuration\nconst config = {\n  database: {\n    host: process.env.DB_HOST || 'localhost',\n    port: parseInt(process.env.DB_PORT) || 5432,\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    ssl: process.env.NODE_ENV === 'production',\n    pool: {\n      min: 2,\n      max: 10,\n      acquire: 30000,\n      idle: 10000\n    }\n  },\n  security: {\n    jwtSecret: process.env.JWT_SECRET,\n    bcryptRounds: 12,\n    rateLimitWindowMs: 15 * 60 * 1000, // 15 minutes\n    rateLimitMax: 100 // requests per window\n  },\n  validation: {\n    nameMinLength: 2,\n    nameMaxLength: 50,\n    passwordMinLength: 8,\n    emailDomainWhitelist: process.env.ALLOWED_EMAIL_DOMAINS?.split(',')\n  }\n};\n```\n\n## Summary\n\n**Issues Found:** 7  \n**Critical:** 4  \n**High:** 2  \n**Medium:** 1  \n\n**Primary Concerns:**\n1. Critical security vulnerabilities (SQL injection, exposed credentials)\n2. Missing input validation and access controls\n3. Poor error handling and logging\n4. Performance bottlenecks in search functionality\n\n**Recommended Actions:**\n1. **Immediate:** Fix SQL injection and input validation (Critical)\n2. **High Priority:** Implement access controls and proper ID generation\n3. **Medium Priority:** Optimize search performance and add comprehensive testing\n4. **Long Term:** Refactor architecture for better separation of concerns\n\n**Estimated Effort:** 2-3 days for critical fixes, 1-2 weeks for complete refactoring\n```\n\n## Advanced Analysis Features\n\n### Machine Learning Insights\n- **Code Smell Detection**: Identify potential design issues\n- **Bug Prediction**: Predict likely bug locations based on complexity\n- **Refactoring Suggestions**: AI-powered code improvement recommendations\n- **Security Pattern Recognition**: Detect known vulnerability patterns\n\n### Integration Capabilities\n- **CI/CD Pipeline**: Integrate with GitHub Actions, Jenkins, GitLab CI\n- **IDE Extensions**: Support for VS Code, IntelliJ, Vim\n- **Code Quality Gates**: Block deployments on critical issues\n- **Team Collaboration**: Share reviews and track improvements\n\n### Custom Rule Sets\n```yaml\n# .claudereview.yml\nrules:\n  security:\n    - no-sql-injection\n    - require-input-validation\n    - no-hardcoded-secrets\n    - require-https\n  \n  performance:\n    - no-n-plus-one-queries\n    - require-database-indexes\n    - limit-memory-usage\n  \n  style:\n    - consistent-naming\n    - max-function-length: 50\n    - max-file-length: 500\n    - require-documentation\n\nignore:\n  - \"*.test.js\"\n  - \"node_modules/**\"\n  - \"dist/**\"\n\nthresholds:\n  critical: 0\n  high: 5\n  medium: 20\n```",
  "configuration": {
    "temperature": 0.2,
    "maxTokens": 12000,
    "systemPrompt": "You are an expert code reviewer with deep knowledge of security, performance, and best practices across multiple programming languages. Provide comprehensive, actionable feedback with specific examples and fixes."
  },
  "githubUrl": "https://github.com/claudepro/code-reviewer",
  "documentationUrl": "https://docs.claude.ai/commands/review",
  "source": "community"
}
