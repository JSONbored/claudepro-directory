{
  "title": "Discord Integration MCP",
  "description": "Complete Discord bot integration for community management, moderation, and interactive features",
  "category": "productivity",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["discord", "bot", "community", "moderation", "gaming", "social"],
  "content": "The Discord Integration MCP Server enables comprehensive Discord bot functionality, community management, and interactive features for engaging with Discord servers and users.\n\n## Core Capabilities\n\n### Bot Management\n- Bot presence and status management\n- Activity tracking and updates\n- Permission handling and validation\n- Multi-server bot deployment\n- Command registration and handling\n\n### Message & Channel Operations\n- Send messages with rich embeds\n- Message editing and deletion\n- Reaction management and tracking\n- Thread creation and management\n- Channel creation and configuration\n- Voice channel operations\n\n### User & Guild Management\n- Member management and moderation\n- Role assignment and permissions\n- User verification and onboarding\n- Guild information and settings\n- Invite management\n\n### Advanced Features\n- Slash commands and interactions\n- Modal forms and components\n- Webhook management\n- Event handling and logging\n- Integration with external APIs\n- Database integration for persistence\n\n### Moderation Tools\n- Automated content filtering\n- Warning and punishment systems\n- Anti-spam protection\n- Raid detection and prevention\n- Audit log monitoring\n\n## Installation\n\n```bash\nnpm install @claudepro/mcp-discord\n```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"discord\": {\n      \"command\": \"npx\",\n      \"args\": [\"@claudepro/mcp-discord\"],\n      \"env\": {\n        \"DISCORD_TOKEN\": \"your-bot-token\",\n        \"DISCORD_CLIENT_ID\": \"your-application-id\",\n        \"DISCORD_GUILD_ID\": \"your-server-id\",\n        \"DISCORD_PREFIX\": \"!\",\n        \"DISCORD_OWNER_ID\": \"your-user-id\"\n      }\n    }\n  }\n}\n```\n\n## Bot Setup Instructions\n\n1. **Create Discord Application**\n   - Go to https://discord.com/developers/applications\n   - Click \"New Application\" and name your bot\n   - Go to \"Bot\" section and create a bot\n   - Copy the bot token\n\n2. **Configure Bot Permissions**\n   ```\n   Required Bot Permissions:\n   - Send Messages\n   - Embed Links\n   - Attach Files\n   - Read Message History\n   - Use Slash Commands\n   - Manage Messages\n   - Manage Roles\n   - Manage Channels\n   - View Channels\n   ```\n\n3. **Invite Bot to Server**\n   ```\n   https://discord.com/api/oauth2/authorize?client_id=YOUR_CLIENT_ID&permissions=8&scope=bot%20applications.commands\n   ```\n\n## Usage Examples\n\n### Basic Message Operations\n```javascript\n// Send simple message\nconst message = await discord.sendMessage({\n  channelId: '123456789012345678',\n  content: 'Hello, Discord! 👋'\n});\n\n// Send rich embed\nconst embed = await discord.sendEmbed({\n  channelId: '123456789012345678',\n  embed: {\n    title: 'Server Statistics',\n    description: 'Current server information',\n    color: 0x00ff00,\n    fields: [\n      {\n        name: 'Total Members',\n        value: '1,247',\n        inline: true\n      },\n      {\n        name: 'Online Members',\n        value: '382',\n        inline: true\n      },\n      {\n        name: 'Active Channels',\n        value: '15',\n        inline: true\n      }\n    ],\n    thumbnail: {\n      url: 'https://example.com/server-icon.png'\n    },\n    timestamp: new Date().toISOString(),\n    footer: {\n      text: 'Last updated',\n      icon_url: 'https://example.com/bot-avatar.png'\n    }\n  }\n});\n\n// Send message with components\nconst interactive = await discord.sendMessage({\n  channelId: '123456789012345678',\n  content: 'Choose an option:',\n  components: [\n    {\n      type: 1, // Action Row\n      components: [\n        {\n          type: 2, // Button\n          style: 1, // Primary\n          label: 'Accept',\n          custom_id: 'accept_button',\n          emoji: { name: '✅' }\n        },\n        {\n          type: 2, // Button\n          style: 4, // Danger\n          label: 'Decline',\n          custom_id: 'decline_button',\n          emoji: { name: '❌' }\n        }\n      ]\n    }\n  ]\n});\n```\n\n### Slash Commands\n```javascript\n// Register slash commands\nconst commands = [\n  {\n    name: 'ping',\n    description: 'Replies with Pong!',\n    options: []\n  },\n  {\n    name: 'userinfo',\n    description: 'Get information about a user',\n    options: [\n      {\n        name: 'user',\n        description: 'The user to get info about',\n        type: 6, // USER type\n        required: true\n      }\n    ]\n  },\n  {\n    name: 'ban',\n    description: 'Ban a user from the server',\n    default_member_permissions: '4', // BAN_MEMBERS permission\n    options: [\n      {\n        name: 'user',\n        description: 'User to ban',\n        type: 6,\n        required: true\n      },\n      {\n        name: 'reason',\n        description: 'Reason for the ban',\n        type: 3, // STRING type\n        required: false\n      },\n      {\n        name: 'delete_days',\n        description: 'Days of messages to delete (0-7)',\n        type: 4, // INTEGER type\n        required: false,\n        min_value: 0,\n        max_value: 7\n      }\n    ]\n  }\n];\n\nconst registerCommands = await discord.registerSlashCommands(commands);\n\n// Handle slash command interactions\ndiscord.on('interactionCreate', async (interaction) => {\n  if (!interaction.isChatInputCommand()) return;\n  \n  switch (interaction.commandName) {\n    case 'ping':\n      await interaction.reply({\n        content: `Pong! Latency: ${discord.ws.ping}ms`,\n        ephemeral: true\n      });\n      break;\n      \n    case 'userinfo':\n      const user = interaction.options.getUser('user');\n      const member = await interaction.guild.members.fetch(user.id);\n      \n      const userEmbed = {\n        title: `User Info: ${user.tag}`,\n        thumbnail: { url: user.displayAvatarURL() },\n        fields: [\n          { name: 'ID', value: user.id, inline: true },\n          { name: 'Created', value: `<t:${Math.floor(user.createdTimestamp / 1000)}:F>`, inline: true },\n          { name: 'Joined', value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:F>`, inline: true },\n          { name: 'Roles', value: member.roles.cache.map(r => r.toString()).join(' '), inline: false }\n        ],\n        color: member.displayHexColor\n      };\n      \n      await interaction.reply({ embeds: [userEmbed] });\n      break;\n      \n    case 'ban':\n      const targetUser = interaction.options.getUser('user');\n      const reason = interaction.options.getString('reason') || 'No reason provided';\n      const deleteDays = interaction.options.getInteger('delete_days') || 0;\n      \n      try {\n        await interaction.guild.members.ban(targetUser, {\n          reason: `${reason} | Banned by ${interaction.user.tag}`,\n          deleteMessageDays: deleteDays\n        });\n        \n        await interaction.reply({\n          content: `Successfully banned ${targetUser.tag} for: ${reason}`,\n          ephemeral: true\n        });\n      } catch (error) {\n        await interaction.reply({\n          content: `Failed to ban user: ${error.message}`,\n          ephemeral: true\n        });\n      }\n      break;\n  }\n});\n```\n\n### Advanced Moderation System\n```javascript\n// Auto-moderation configuration\nconst autoMod = {\n  spamDetection: {\n    enabled: true,\n    maxMessages: 5,\n    timeWindow: 10000, // 10 seconds\n    punishment: 'timeout', // timeout, kick, ban\n    duration: 300000 // 5 minutes timeout\n  },\n  wordFilter: {\n    enabled: true,\n    blockedWords: ['spam', 'scam', 'inappropriate'],\n    action: 'delete',\n    warnUser: true\n  },\n  linkFilter: {\n    enabled: true,\n    allowedDomains: ['youtube.com', 'github.com'],\n    blockInvites: true\n  }\n};\n\n// Message monitoring\ndiscord.on('messageCreate', async (message) => {\n  if (message.author.bot) return;\n  \n  // Spam detection\n  if (autoMod.spamDetection.enabled) {\n    const userMessages = recentMessages.get(message.author.id) || [];\n    userMessages.push(Date.now());\n    \n    // Remove old messages outside time window\n    const validMessages = userMessages.filter(\n      timestamp => Date.now() - timestamp < autoMod.spamDetection.timeWindow\n    );\n    \n    if (validMessages.length > autoMod.spamDetection.maxMessages) {\n      await handleSpam(message, autoMod.spamDetection.punishment);\n      return;\n    }\n    \n    recentMessages.set(message.author.id, validMessages);\n  }\n  \n  // Word filter\n  if (autoMod.wordFilter.enabled) {\n    const hasBlockedWord = autoMod.wordFilter.blockedWords.some(\n      word => message.content.toLowerCase().includes(word.toLowerCase())\n    );\n    \n    if (hasBlockedWord) {\n      await message.delete();\n      if (autoMod.wordFilter.warnUser) {\n        await message.author.send({\n          embeds: [{\n            title: 'Message Removed',\n            description: 'Your message was removed for containing inappropriate content.',\n            color: 0xff0000\n          }]\n        });\n      }\n      return;\n    }\n  }\n  \n  // Link filter\n  if (autoMod.linkFilter.enabled) {\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const urls = message.content.match(urlRegex) || [];\n    \n    for (const url of urls) {\n      const domain = new URL(url).hostname;\n      \n      if (autoMod.linkFilter.blockInvites && url.includes('discord.gg')) {\n        await message.delete();\n        await warnUser(message.author, 'Posted unauthorized invite link');\n        return;\n      }\n      \n      if (!autoMod.linkFilter.allowedDomains.includes(domain)) {\n        await message.delete();\n        await warnUser(message.author, 'Posted unauthorized link');\n        return;\n      }\n    }\n  }\n});\n\n// Warning system\nconst warnUser = async (user, reason) => {\n  const warnings = await database.getUserWarnings(user.id);\n  \n  await database.addWarning({\n    userId: user.id,\n    reason: reason,\n    timestamp: Date.now(),\n    moderator: 'AutoMod'\n  });\n  \n  const warningCount = warnings.length + 1;\n  \n  // Escalation system\n  if (warningCount >= 5) {\n    await user.ban({ reason: 'Exceeded warning limit (5 warnings)' });\n  } else if (warningCount >= 3) {\n    await user.timeout(86400000, 'Multiple warnings (24 hour timeout)'); // 24 hours\n  } else if (warningCount >= 2) {\n    await user.timeout(3600000, 'Multiple warnings (1 hour timeout)'); // 1 hour\n  }\n  \n  // Notify user\n  try {\n    await user.send({\n      embeds: [{\n        title: 'Warning Received',\n        description: `You have been warned for: ${reason}`,\n        fields: [\n          { name: 'Warning Count', value: `${warningCount}/5`, inline: true },\n          { name: 'Next Punishment', value: getNextPunishment(warningCount), inline: true }\n        ],\n        color: 0xffa500\n      }]\n    });\n  } catch (error) {\n    console.log('Could not DM user about warning');\n  }\n};\n```\n\n### Server Management Features\n```javascript\n// Welcome system\ndiscord.on('guildMemberAdd', async (member) => {\n  const welcomeChannel = member.guild.channels.cache.get(WELCOME_CHANNEL_ID);\n  \n  // Send welcome message\n  const welcomeEmbed = {\n    title: 'Welcome to the Server! 🎉',\n    description: `Hey ${member.user}, welcome to **${member.guild.name}**!`,\n    thumbnail: { url: member.user.displayAvatarURL() },\n    fields: [\n      {\n        name: 'Getting Started',\n        value: '• Read <#rules-channel>\\n• Get roles in <#role-selection>\\n• Say hi in <#general>',\n        inline: false\n      },\n      {\n        name: 'Member Count',\n        value: `You're member #${member.guild.memberCount}!`,\n        inline: true\n      }\n    ],\n    color: 0x00ff00,\n    footer: {\n      text: 'Enjoy your stay!',\n      icon_url: member.guild.iconURL()\n    }\n  };\n  \n  await welcomeChannel.send({\n    content: `${member.user}`,\n    embeds: [welcomeEmbed]\n  });\n  \n  // Auto-assign roles\n  const defaultRole = member.guild.roles.cache.get(DEFAULT_ROLE_ID);\n  if (defaultRole) {\n    await member.roles.add(defaultRole);\n  }\n  \n  // Send DM with server info\n  try {\n    await member.send({\n      embeds: [{\n        title: `Welcome to ${member.guild.name}!`,\n        description: 'Here\\'s what you need to know:',\n        fields: [\n          { name: 'Rules', value: 'Please read our server rules to get started.' },\n          { name: 'Support', value: 'Need help? Ask in our support channel or DM a moderator.' }\n        ]\n      }]\n    });\n  } catch (error) {\n    console.log('Could not send welcome DM');\n  }\n});\n\n// Role management\nconst roleCommands = {\n  async assignRole(interaction) {\n    const user = interaction.options.getUser('user');\n    const roleName = interaction.options.getString('role');\n    const member = await interaction.guild.members.fetch(user.id);\n    const role = interaction.guild.roles.cache.find(r => r.name === roleName);\n    \n    if (!role) {\n      return interaction.reply({ content: 'Role not found!', ephemeral: true });\n    }\n    \n    await member.roles.add(role);\n    await interaction.reply({\n      content: `Successfully assigned **${role.name}** to ${user.tag}`,\n      ephemeral: true\n    });\n  },\n  \n  async createRole(interaction) {\n    const name = interaction.options.getString('name');\n    const color = interaction.options.getString('color') || '#99aab5';\n    const permissions = interaction.options.getString('permissions') || '0';\n    \n    const role = await interaction.guild.roles.create({\n      name: name,\n      color: color,\n      permissions: permissions,\n      reason: `Role created by ${interaction.user.tag}`\n    });\n    \n    await interaction.reply({\n      content: `Created role **${role.name}** with color ${color}`,\n      ephemeral: true\n    });\n  }\n};\n\n// Voice channel management\nconst voiceEvents = {\n  async onVoiceStateUpdate(oldState, newState) {\n    // Auto-create temporary voice channels\n    if (newState.channelId === TEMP_VOICE_CREATOR_ID) {\n      const tempChannel = await newState.guild.channels.create({\n        name: `${newState.member.displayName}'s Channel`,\n        type: 2, // Voice channel\n        parent: TEMP_VOICE_CATEGORY_ID,\n        userLimit: 10\n      });\n      \n      await newState.member.voice.setChannel(tempChannel);\n      \n      // Store temp channel info\n      tempChannels.set(tempChannel.id, {\n        ownerId: newState.member.id,\n        createdAt: Date.now()\n      });\n    }\n    \n    // Delete empty temporary channels\n    if (oldState.channel && tempChannels.has(oldState.channelId)) {\n      if (oldState.channel.members.size === 0) {\n        await oldState.channel.delete();\n        tempChannels.delete(oldState.channelId);\n      }\n    }\n  }\n};\n```\n\n### Event Logging and Analytics\n```javascript\n// Comprehensive logging system\nconst logEvents = {\n  async logMessage(type, data) {\n    const logChannel = discord.channels.cache.get(LOG_CHANNEL_ID);\n    \n    const logEmbed = {\n      title: `${type.toUpperCase()} Event`,\n      timestamp: new Date().toISOString(),\n      color: getLogColor(type)\n    };\n    \n    switch (type) {\n      case 'message_delete':\n        logEmbed.description = `Message deleted in ${data.channel}`,\n        logEmbed.fields = [\n          { name: 'Author', value: data.author.tag, inline: true },\n          { name: 'Content', value: data.content || '*No content*', inline: false }\n        ];\n        break;\n        \n      case 'member_ban':\n        logEmbed.description = `Member banned from server`;\n        logEmbed.fields = [\n          { name: 'User', value: data.user.tag, inline: true },\n          { name: 'Moderator', value: data.moderator?.tag || 'Unknown', inline: true },\n          { name: 'Reason', value: data.reason || 'No reason provided', inline: false }\n        ];\n        break;\n        \n      case 'role_update':\n        logEmbed.description = `Role ${data.role.name} was updated`;\n        logEmbed.fields = [\n          { name: 'Changes', value: data.changes.join('\\n'), inline: false }\n        ];\n        break;\n    }\n    \n    await logChannel.send({ embeds: [logEmbed] });\n  },\n  \n  async generateReport(period = 'week') {\n    const stats = await database.getServerStats(period);\n    \n    const reportEmbed = {\n      title: `Server Report - Last ${period}`,\n      fields: [\n        { name: 'New Members', value: stats.newMembers.toString(), inline: true },\n        { name: 'Messages Sent', value: stats.messages.toString(), inline: true },\n        { name: 'Active Users', value: stats.activeUsers.toString(), inline: true },\n        { name: 'Moderation Actions', value: stats.moderationActions.toString(), inline: true },\n        { name: 'Top Channel', value: stats.topChannel.name, inline: true },\n        { name: 'Growth Rate', value: `+${stats.growthPercentage}%`, inline: true }\n      ],\n      color: 0x0099ff,\n      timestamp: new Date().toISOString()\n    };\n    \n    return reportEmbed;\n  }\n};\n```\n\n## Integration Patterns\n\n### GitHub Integration\n```javascript\n// GitHub webhook handler\napp.post('/github-webhook', async (req, res) => {\n  const { action, repository, sender } = req.body;\n  \n  if (action === 'opened' && req.body.pull_request) {\n    const pr = req.body.pull_request;\n    \n    await discord.sendEmbed({\n      channelId: GITHUB_CHANNEL_ID,\n      embed: {\n        title: 'New Pull Request',\n        url: pr.html_url,\n        description: pr.title,\n        author: {\n          name: sender.login,\n          icon_url: sender.avatar_url,\n          url: sender.html_url\n        },\n        fields: [\n          { name: 'Repository', value: repository.full_name, inline: true },\n          { name: 'Changes', value: `+${pr.additions} -${pr.deletions}`, inline: true }\n        ],\n        color: 0x28a745\n      }\n    });\n  }\n});\n```\n\n### CI/CD Integration\n```javascript\n// Deployment notifications\nconst notifyDeployment = async (status, environment, version) => {\n  const color = status === 'success' ? 0x28a745 : 0xdc3545;\n  const emoji = status === 'success' ? '✅' : '❌';\n  \n  await discord.sendEmbed({\n    channelId: DEPLOYMENTS_CHANNEL_ID,\n    embed: {\n      title: `${emoji} Deployment ${status}`,\n      description: `Version ${version} to ${environment}`,\n      color: color,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n```",
  "configuration": {
    "requiresAuth": true,
    "authType": "bot_token",
    "permissions": ["send_messages", "manage_messages", "manage_roles", "ban_members"]
  },
  "githubUrl": "https://github.com/claudepro/mcp-discord",
  "documentationUrl": "https://docs.claude.ai/mcp/discord"
}