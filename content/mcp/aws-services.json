{
  "title": "AWS Services MCP",
  "description": "Comprehensive AWS cloud services integration for infrastructure management, deployment, and monitoring",
  "category": "development",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["aws", "cloud", "infrastructure", "deployment", "monitoring"],
  "content": "The AWS Services MCP Server provides comprehensive integration with Amazon Web Services, enabling infrastructure management, application deployment, and cloud resource monitoring directly through Claude.\n\n## Supported AWS Services\n\n### Compute Services\n- **EC2**: Instance management, security groups, key pairs\n- **Lambda**: Function deployment, invocation, monitoring\n- **ECS/Fargate**: Container orchestration and management\n- **Auto Scaling**: Scaling groups and policies\n\n### Storage Services\n- **S3**: Bucket management, object operations, lifecycle policies\n- **EBS**: Volume management and snapshots\n- **EFS**: File system management\n\n### Database Services\n- **RDS**: Database instance management and monitoring\n- **DynamoDB**: NoSQL database operations\n- **ElastiCache**: Redis and Memcached cluster management\n\n### Networking\n- **VPC**: Virtual private cloud management\n- **Route 53**: DNS management and health checks\n- **CloudFront**: CDN distribution management\n- **Load Balancers**: ALB, NLB, and Classic LB management\n\n### Security & Identity\n- **IAM**: User, role, and policy management\n- **Secrets Manager**: Secret storage and rotation\n- **Certificate Manager**: SSL/TLS certificate management\n\n### Monitoring & Logging\n- **CloudWatch**: Metrics, logs, and alarms\n- **X-Ray**: Application tracing and performance insights\n- **CloudTrail**: API activity monitoring\n\n### DevOps & Deployment\n- **CodeBuild**: Build project management\n- **CodeDeploy**: Application deployment automation\n- **CloudFormation**: Infrastructure as code\n- **Systems Manager**: Instance management and automation\n\n## Installation\n\n```bash\nnpm install @claudepro/mcp-aws\n```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"aws\": {\n      \"command\": \"npx\",\n      \"args\": [\"@claudepro/mcp-aws\"],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"your-access-key\",\n        \"AWS_SECRET_ACCESS_KEY\": \"your-secret-key\",\n        \"AWS_DEFAULT_REGION\": \"us-east-1\",\n        \"AWS_SESSION_TOKEN\": \"optional-session-token\"\n      }\n    }\n  }\n}\n```\n\n## Authentication Methods\n\n### Method 1: IAM User Credentials\n```bash\n# Set environment variables\nexport AWS_ACCESS_KEY_ID=\"AKIAIOSFODNN7EXAMPLE\"\nexport AWS_SECRET_ACCESS_KEY=\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\nexport AWS_DEFAULT_REGION=\"us-west-2\"\n```\n\n### Method 2: AWS Profile\n```json\n{\n  \"env\": {\n    \"AWS_PROFILE\": \"claude-integration\"\n  }\n}\n```\n\n### Method 3: IAM Roles (EC2/ECS)\n- No additional configuration needed when running on EC2 with attached IAM role\n- Automatically uses instance metadata service\n\n## Usage Examples\n\n### EC2 Instance Management\n```javascript\n// Launch new instance\nconst instance = await aws.ec2.runInstances({\n  ImageId: 'ami-0abcdef1234567890',\n  InstanceType: 't3.micro',\n  MinCount: 1,\n  MaxCount: 1,\n  KeyName: 'my-key-pair',\n  SecurityGroupIds: ['sg-12345678'],\n  SubnetId: 'subnet-12345678',\n  TagSpecifications: [{\n    ResourceType: 'instance',\n    Tags: [\n      { Key: 'Name', Value: 'WebServer-01' },\n      { Key: 'Environment', Value: 'Production' }\n    ]\n  }]\n});\n\n// List instances with filters\nconst instances = await aws.ec2.describeInstances({\n  Filters: [\n    { Name: 'instance-state-name', Values: ['running'] },\n    { Name: 'tag:Environment', Values: ['Production'] }\n  ]\n});\n```\n\n### S3 Bucket Operations\n```javascript\n// Create bucket with versioning\nconst bucket = await aws.s3.createBucket({\n  Bucket: 'my-app-assets-2025',\n  CreateBucketConfiguration: {\n    LocationConstraint: 'us-west-2'\n  }\n});\n\n// Enable versioning\nconst versioning = await aws.s3.putBucketVersioning({\n  Bucket: 'my-app-assets-2025',\n  VersioningConfiguration: {\n    Status: 'Enabled'\n  }\n});\n\n// Upload file with metadata\nconst upload = await aws.s3.putObject({\n  Bucket: 'my-app-assets-2025',\n  Key: 'assets/app.js',\n  Body: fileContent,\n  ContentType: 'application/javascript',\n  Metadata: {\n    'uploaded-by': 'claude-mcp',\n    'build-version': '1.2.3'\n  }\n});\n```\n\n### Lambda Function Deployment\n```javascript\n// Create function\nconst func = await aws.lambda.createFunction({\n  FunctionName: 'ProcessImageThumbnails',\n  Runtime: 'nodejs18.x',\n  Role: 'arn:aws:iam::123456789012:role/lambda-execution-role',\n  Handler: 'index.handler',\n  Code: {\n    ZipFile: functionZipBuffer\n  },\n  Environment: {\n    Variables: {\n      'S3_BUCKET': 'image-processing-bucket',\n      'THUMBNAIL_SIZE': '150'\n    }\n  },\n  Timeout: 30,\n  MemorySize: 256\n});\n\n// Invoke function\nconst result = await aws.lambda.invoke({\n  FunctionName: 'ProcessImageThumbnails',\n  Payload: JSON.stringify({\n    imageKey: 'uploads/photo.jpg',\n    sizes: [150, 300, 600]\n  })\n});\n```\n\n### RDS Database Management\n```javascript\n// Create database instance\nconst db = await aws.rds.createDBInstance({\n  DBInstanceIdentifier: 'production-db',\n  DBInstanceClass: 'db.t3.micro',\n  Engine: 'postgres',\n  EngineVersion: '14.9',\n  MasterUsername: 'dbadmin',\n  MasterUserPassword: 'secure-password-123',\n  AllocatedStorage: 20,\n  VpcSecurityGroupIds: ['sg-database-access'],\n  DBSubnetGroupName: 'default-vpc-subnet-group',\n  BackupRetentionPeriod: 7,\n  MultiAZ: false,\n  StorageEncrypted: true\n});\n\n// Create read replica\nconst replica = await aws.rds.createDBInstanceReadReplica({\n  DBInstanceIdentifier: 'production-db-replica',\n  SourceDBInstanceIdentifier: 'production-db',\n  DBInstanceClass: 'db.t3.micro'\n});\n```\n\n### CloudWatch Monitoring\n```javascript\n// Create custom metric\nconst metric = await aws.cloudwatch.putMetricData({\n  Namespace: 'MyApp/Performance',\n  MetricData: [{\n    MetricName: 'ResponseTime',\n    Value: 245.5,\n    Unit: 'Milliseconds',\n    Dimensions: [\n      { Name: 'Environment', Value: 'Production' },\n      { Name: 'Endpoint', Value: '/api/users' }\n    ],\n    Timestamp: new Date()\n  }]\n});\n\n// Create alarm\nconst alarm = await aws.cloudwatch.putMetricAlarm({\n  AlarmName: 'HighResponseTime',\n  ComparisonOperator: 'GreaterThanThreshold',\n  EvaluationPeriods: 2,\n  MetricName: 'ResponseTime',\n  Namespace: 'MyApp/Performance',\n  Period: 300,\n  Statistic: 'Average',\n  Threshold: 500.0,\n  ActionsEnabled: true,\n  AlarmActions: [\n    'arn:aws:sns:us-west-2:123456789012:high-response-time'\n  ],\n  AlarmDescription: 'Alert when response time exceeds 500ms'\n});\n```\n\n## CloudFormation Templates\n\n### Web Application Stack\n```yaml\n# Generated CloudFormation template\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Complete web application infrastructure'\n\nParameters:\n  Environment:\n    Type: String\n    Default: 'staging'\n    AllowedValues: ['staging', 'production']\n\nResources:\n  # VPC and Networking\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: '10.0.0.0/16'\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      Tags:\n        - Key: Name\n          Value: !Sub '${Environment}-vpc'\n\n  # Application Load Balancer\n  LoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Type: application\n      Scheme: internet-facing\n      SecurityGroups: [!Ref ALBSecurityGroup]\n      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]\n\n  # Auto Scaling Group\n  AutoScalingGroup:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Properties:\n      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]\n      LaunchTemplate:\n        LaunchTemplateId: !Ref LaunchTemplate\n        Version: !GetAtt LaunchTemplate.LatestVersionNumber\n      MinSize: 2\n      MaxSize: 10\n      DesiredCapacity: 2\n      TargetGroupARNs: [!Ref TargetGroup]\n\nOutputs:\n  LoadBalancerDNS:\n    Description: 'DNS name of the load balancer'\n    Value: !GetAtt LoadBalancer.DNSName\n```\n\n## Security Best Practices\n\n### IAM Policy Example\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeImages\",\n        \"ec2:DescribeSecurityGroups\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::my-app-bucket/*\"\n    }\n  ]\n}\n```\n\n### Least Privilege Access\n- Use specific resource ARNs when possible\n- Implement condition-based policies\n- Regular access review and cleanup\n- Enable CloudTrail for audit logging\n\n## Cost Optimization\n\n### Resource Tagging Strategy\n```javascript\n// Consistent tagging across resources\nconst standardTags = {\n  Environment: 'production',\n  Project: 'web-app',\n  Owner: 'development-team',\n  CostCenter: 'engineering',\n  AutoShutdown: 'true'\n};\n```\n\n### Automated Cost Controls\n- Instance scheduling based on tags\n- Unused resource identification\n- Cost alerts and budgets\n- Right-sizing recommendations",
  "configuration": {
    "requiresAuth": true,
    "authType": "api_key",
    "permissions": ["ec2:*", "s3:*", "lambda:*", "rds:*", "cloudwatch:*"]
  },
  "githubUrl": "https://github.com/claudepro/mcp-aws",
  "documentationUrl": "https://docs.claude.ai/mcp/aws"
}