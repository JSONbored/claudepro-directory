{
  "title": "Jira Integration MCP",
  "description": "Complete Jira integration for project management, issue tracking, and agile workflow automation",
  "category": "productivity",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["jira", "project-management", "agile", "scrum", "kanban", "tracking"],
  "content": "The Jira Integration MCP Server enables comprehensive project management through Atlassian Jira, supporting issue tracking, sprint management, and agile workflows.\n\n## Core Capabilities\n\n### Issue Management\n- Create, update, and delete issues\n- Manage issue types (Story, Bug, Task, Epic)\n- Set priority, status, and assignee\n- Add comments and work logs\n- Handle attachments and links\n- Bulk operations for multiple issues\n\n### Project Administration\n- Create and configure projects\n- Manage project permissions and roles\n- Configure issue types and workflows\n- Set up custom fields and screens\n- Manage project components and versions\n\n### Agile & Sprint Management\n- Create and manage sprints\n- Sprint planning and backlog grooming\n- Burndown chart generation\n- Velocity tracking and reporting\n- Epic and story point management\n\n### Advanced Workflows\n- Custom workflow transitions\n- Automated rule execution\n- Approval processes\n- Integration triggers\n- Notification management\n\n### Reporting & Analytics\n- Generate custom reports\n- Time tracking analysis\n- Sprint retrospective data\n- Team performance metrics\n- Issue resolution trends\n\n## Installation\n\n```bash\nnpm install @claudepro/mcp-jira\n```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"npx\",\n      \"args\": [\"@claudepro/mcp-jira\"],\n      \"env\": {\n        \"JIRA_HOST\": \"https://yourcompany.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your-api-token\",\n        \"JIRA_PROJECT_KEY\": \"PROJ\"\n      }\n    }\n  }\n}\n```\n\n## Authentication Setup\n\n### API Token (Recommended)\n1. Go to https://id.atlassian.com/manage-profile/security/api-tokens\n2. Click \"Create API token\"\n3. Copy the token and use with your email\n\n### OAuth 2.0 (Advanced)\n```json\n{\n  \"env\": {\n    \"JIRA_HOST\": \"https://yourcompany.atlassian.net\",\n    \"JIRA_CLIENT_ID\": \"your-oauth-client-id\",\n    \"JIRA_CLIENT_SECRET\": \"your-oauth-client-secret\",\n    \"JIRA_REDIRECT_URI\": \"http://localhost:8080/callback\"\n  }\n}\n```\n\n## Usage Examples\n\n### Issue Creation and Management\n```javascript\n// Create a new story\nconst story = await jira.createIssue({\n  fields: {\n    project: { key: 'PROJ' },\n    summary: 'Implement user authentication system',\n    description: {\n      type: 'doc',\n      version: 1,\n      content: [\n        {\n          type: 'paragraph',\n          content: [\n            {\n              type: 'text',\n              text: 'As a user, I want to securely log into the application so that I can access my personal data.'\n            }\n          ]\n        },\n        {\n          type: 'heading',\n          attrs: { level: 3 },\n          content: [{ type: 'text', text: 'Acceptance Criteria' }]\n        },\n        {\n          type: 'bulletList',\n          content: [\n            {\n              type: 'listItem',\n              content: [{\n                type: 'paragraph',\n                content: [{ type: 'text', text: 'Users can login with email and password' }]\n              }]\n            },\n            {\n              type: 'listItem',\n              content: [{\n                type: 'paragraph',\n                content: [{ type: 'text', text: 'Password must meet security requirements' }]\n              }]\n            },\n            {\n              type: 'listItem',\n              content: [{\n                type: 'paragraph',\n                content: [{ type: 'text', text: 'Support for two-factor authentication' }]\n              }]\n            }\n          ]\n        }\n      ]\n    },\n    issuetype: { name: 'Story' },\n    priority: { name: 'High' },\n    assignee: { emailAddress: 'developer@company.com' },\n    labels: ['authentication', 'security', 'backend'],\n    customfield_10016: 8, // Story Points\n    components: [{ name: 'Backend' }, { name: 'Security' }],\n    fixVersions: [{ name: '2.1.0' }]\n  }\n});\n\n// Update issue status\nconst transition = await jira.transitionIssue({\n  issueIdOrKey: 'PROJ-123',\n  transition: {\n    id: '31' // Transition ID for \"In Progress\"\n  },\n  fields: {\n    assignee: { emailAddress: 'developer@company.com' }\n  }\n});\n\n// Add comment with mention\nconst comment = await jira.addComment({\n  issueIdOrKey: 'PROJ-123',\n  body: {\n    type: 'doc',\n    version: 1,\n    content: [\n      {\n        type: 'paragraph',\n        content: [\n          {\n            type: 'text',\n            text: 'Started implementation. '\n          },\n          {\n            type: 'mention',\n            attrs: {\n              id: '5b10ac8d82e05b22cc7d4ef5',\n              text: '@john.doe'\n            }\n          },\n          {\n            type: 'text',\n            text: ' please review the security requirements.'\n          }\n        ]\n      }\n    ]\n  }\n});\n```\n\n### Sprint Management\n```javascript\n// Create new sprint\nconst sprint = await jira.createSprint({\n  name: 'Sprint 23 - Authentication Features',\n  startDate: '2025-09-16T09:00:00.000Z',\n  endDate: '2025-09-30T17:00:00.000Z',\n  originBoardId: 84,\n  goal: 'Complete user authentication system and security improvements'\n});\n\n// Add issues to sprint\nconst addToSprint = await jira.moveIssuesToSprint({\n  sprintId: sprint.id,\n  issues: ['PROJ-123', 'PROJ-124', 'PROJ-125']\n});\n\n// Start sprint\nconst startSprint = await jira.updateSprint({\n  sprintId: sprint.id,\n  name: sprint.name,\n  state: 'active',\n  startDate: '2025-09-16T09:00:00.000Z',\n  endDate: '2025-09-30T17:00:00.000Z'\n});\n\n// Get sprint report\nconst sprintReport = await jira.getSprintReport({\n  rapidViewId: 84,\n  sprintId: sprint.id\n});\n```\n\n### Epic and Story Hierarchy\n```javascript\n// Create epic\nconst epic = await jira.createIssue({\n  fields: {\n    project: { key: 'PROJ' },\n    summary: 'User Management System',\n    description: 'Complete user management functionality including authentication, authorization, and profile management.',\n    issuetype: { name: 'Epic' },\n    customfield_10011: 'USER-MGMT', // Epic Name\n    labels: ['user-management', 'phase-1']\n  }\n});\n\n// Link story to epic\nconst linkToEpic = await jira.updateIssue({\n  issueIdOrKey: 'PROJ-123',\n  fields: {\n    customfield_10014: epic.key // Epic Link\n  }\n});\n\n// Create subtask\nconst subtask = await jira.createIssue({\n  fields: {\n    project: { key: 'PROJ' },\n    parent: { key: 'PROJ-123' },\n    summary: 'Create login API endpoint',\n    description: 'Implement POST /api/auth/login endpoint with validation',\n    issuetype: { name: 'Sub-task' },\n    assignee: { emailAddress: 'backend.dev@company.com' }\n  }\n});\n```\n\n### Advanced Querying with JQL\n```javascript\n// Complex JQL queries\nconst searchResults = await jira.searchForIssues({\n  jql: `\n    project = PROJ AND \n    sprint in openSprints() AND \n    assignee in (currentUser(), 'developer@company.com') AND \n    status NOT IN (Done, Closed) AND \n    created >= -2w\n    ORDER BY priority DESC, created ASC\n  `,\n  maxResults: 50,\n  fields: [\n    'summary',\n    'status',\n    'assignee',\n    'priority',\n    'created',\n    'updated',\n    'customfield_10016' // Story Points\n  ]\n});\n\n// Get issues for specific epic\nconst epicIssues = await jira.searchForIssues({\n  jql: `\"Epic Link\" = PROJ-100 AND status != Done`,\n  fields: ['summary', 'status', 'assignee', 'progress']\n});\n\n// Burndown data query\nconst burndownData = await jira.searchForIssues({\n  jql: `\n    sprint = 23 AND \n    project = PROJ AND \n    type in (Story, Bug, Task)\n  `,\n  fields: ['created', 'resolutiondate', 'customfield_10016'],\n  expand: ['changelog']\n});\n```\n\n### Automation and Workflows\n```javascript\n// Create automation rule\nconst automationRule = {\n  name: 'Auto-assign based on component',\n  trigger: {\n    type: 'issue_created',\n    configuration: {\n      projects: ['PROJ']\n    }\n  },\n  conditions: [\n    {\n      type: 'component_condition',\n      configuration: {\n        components: ['Backend']\n      }\n    }\n  ],\n  actions: [\n    {\n      type: 'assign_issue',\n      configuration: {\n        assignee: 'backend.team@company.com'\n      }\n    },\n    {\n      type: 'add_label',\n      configuration: {\n        labels: ['auto-assigned']\n      }\n    }\n  ]\n};\n\n// Bulk update issues\nconst bulkUpdate = await jira.bulkUpdateIssues({\n  issueIds: ['PROJ-123', 'PROJ-124', 'PROJ-125'],\n  operations: [\n    {\n      operation: 'set',\n      path: 'fields.priority',\n      value: { name: 'High' }\n    },\n    {\n      operation: 'add',\n      path: 'fields.labels',\n      value: 'urgent'\n    }\n  ]\n});\n```\n\n### Reporting and Analytics\n```javascript\n// Generate team velocity report\nconst velocityReport = await jira.generateReport({\n  type: 'velocity',\n  rapidViewId: 84,\n  sprints: 10 // Last 10 sprints\n});\n\n// Time tracking summary\nconst timeTracking = await jira.getTimeTrackingReport({\n  projectKey: 'PROJ',\n  startDate: '2025-09-01',\n  endDate: '2025-09-30',\n  groupBy: 'assignee'\n});\n\n// Custom dashboard data\nconst dashboardData = {\n  openIssues: await jira.getIssueCount({ jql: 'project = PROJ AND status != Done' }),\n  inProgress: await jira.getIssueCount({ jql: 'project = PROJ AND status = \"In Progress\"' }),\n  blockedIssues: await jira.getIssueCount({ jql: 'project = PROJ AND status = Blocked' }),\n  avgResolutionTime: await jira.getAverageResolutionTime({ projectKey: 'PROJ', days: 30 })\n};\n```\n\n## Integration Patterns\n\n### GitHub Integration\n```javascript\n// Create issue from GitHub PR\nconst createFromPR = async (prData) => {\n  const issue = await jira.createIssue({\n    fields: {\n      project: { key: 'PROJ' },\n      summary: `Review PR: ${prData.title}`,\n      description: `GitHub PR #${prData.number}\\n${prData.html_url}\\n\\n${prData.body}`,\n      issuetype: { name: 'Task' },\n      labels: ['code-review', 'github'],\n      customfield_10037: prData.html_url // GitHub URL field\n    }\n  });\n  \n  return issue;\n};\n```\n\n### Slack Notifications\n```javascript\n// Send Jira updates to Slack\nconst notifySlack = async (issueKey, action) => {\n  const issue = await jira.getIssue({ issueIdOrKey: issueKey });\n  \n  const slackMessage = {\n    channel: '#development',\n    text: `Issue ${action}: ${issue.fields.summary}`,\n    attachments: [{\n      color: getStatusColor(issue.fields.status.name),\n      fields: [\n        { title: 'Assignee', value: issue.fields.assignee?.displayName || 'Unassigned', short: true },\n        { title: 'Priority', value: issue.fields.priority.name, short: true },\n        { title: 'Status', value: issue.fields.status.name, short: true },\n        { title: 'Story Points', value: issue.fields.customfield_10016 || 'Not estimated', short: true }\n      ],\n      actions: [{\n        type: 'button',\n        text: 'View in Jira',\n        url: `https://yourcompany.atlassian.net/browse/${issueKey}`\n      }]\n    }]\n  };\n  \n  await slack.postMessage(slackMessage);\n};\n```\n\n## Best Practices\n\n### Issue Templates\n```javascript\n// Standardized issue templates\nconst templates = {\n  bug: {\n    summary: '[BUG] {Brief description}',\n    description: `\n## Bug Description\n{Detailed description of the bug}\n\n## Steps to Reproduce\n1. {Step 1}\n2. {Step 2}\n3. {Step 3}\n\n## Expected Behavior\n{What should happen}\n\n## Actual Behavior\n{What actually happens}\n\n## Environment\n- Browser: {browser and version}\n- OS: {operating system}\n- App Version: {version}\n\n## Additional Context\n{Any additional information}\n    `,\n    issuetype: { name: 'Bug' },\n    priority: { name: 'Medium' },\n    labels: ['bug', 'needs-investigation']\n  },\n  \n  feature: {\n    summary: '[FEATURE] {Feature name}',\n    description: `\n## User Story\nAs a {type of user}, I want {goal} so that {reason}.\n\n## Acceptance Criteria\n- [ ] {Criterion 1}\n- [ ] {Criterion 2}\n- [ ] {Criterion 3}\n\n## Technical Requirements\n{Any technical constraints or requirements}\n\n## Design Notes\n{Links to designs or mockups}\n    `,\n    issuetype: { name: 'Story' },\n    priority: { name: 'Medium' },\n    labels: ['feature', 'needs-estimation']\n  }\n};\n```\n\n### Workflow Optimization\n- Use consistent naming conventions\n- Implement proper issue linking\n- Regular sprint retrospectives\n- Automated status updates\n- Clear definition of done criteria",
  "configuration": {
    "requiresAuth": true,
    "authType": "api_token",
    "permissions": ["read", "write", "admin"]
  },
  "githubUrl": "https://github.com/claudepro/mcp-jira",
  "documentationUrl": "https://docs.claude.ai/mcp/jira"
}