{
  "title": "Slack Integration MCP",
  "description": "Connect Claude to Slack for team communication, channel management, and workflow automation",
  "category": "productivity",
  "author": "claudepro",
  "dateAdded": "2025-09-16",
  "tags": ["slack", "communication", "collaboration", "messaging", "teams"],
  "content": "The Slack Integration MCP Server enables Claude to interact with Slack workspaces for seamless team collaboration and workflow automation.\n\n## Core Capabilities\n\n### Messaging & Communication\n- Send messages to channels and direct messages\n- Read channel history and conversations\n- React to messages with emojis\n- Pin important messages\n- Schedule messages for later delivery\n- Create and manage message threads\n\n### Channel Management\n- Create public and private channels\n- Archive and unarchive channels\n- Invite and remove users from channels\n- Set channel topics and purposes\n- Manage channel permissions\n\n### User & Workspace Management\n- Get user profiles and presence status\n- List workspace members\n- Manage user groups and permissions\n- Set user status and away messages\n\n### File & Content Sharing\n- Upload files and images to channels\n- Share snippets and code blocks\n- Create and share workflow automations\n- Generate channel summaries and reports\n\n### Workflow Automation\n- Set up automated responses and triggers\n- Create custom slash commands\n- Integrate with external services\n- Monitor channel activity and generate insights\n\n## Installation\n\n```bash\nnpm install @claudepro/mcp-slack\n```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\"@claudepro/mcp-slack\"],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_APP_TOKEN\": \"xapp-your-app-token\",\n        \"SLACK_SIGNING_SECRET\": \"your-signing-secret\"\n      }\n    }\n  }\n}\n```\n\n## Setup Instructions\n\n1. **Create Slack App**\n   - Go to https://api.slack.com/apps\n   - Click \"Create New App\" â†’ \"From scratch\"\n   - Name your app and select workspace\n\n2. **Configure OAuth Scopes**\n   ```\n   Bot Token Scopes:\n   - channels:read\n   - channels:write\n   - chat:write\n   - files:write\n   - users:read\n   - groups:read\n   - im:read\n   - mpim:read\n   - reactions:write\n   ```\n\n3. **Install App to Workspace**\n   - Go to \"Install App\" in sidebar\n   - Click \"Install to Workspace\"\n   - Copy the Bot User OAuth Token\n\n4. **Enable Socket Mode (Optional)**\n   - Go to \"Socket Mode\" and enable it\n   - Generate App-Level Token with `connections:write` scope\n\n## Usage Examples\n\n### Send a Message\n```javascript\n// Send to channel\nconst result = await slack.sendMessage({\n  channel: '#general',\n  text: 'Hello team! ðŸ‘‹',\n  blocks: [\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: '*Project Update*\\nAll tests are passing! âœ…'\n      }\n    }\n  ]\n});\n```\n\n### Create Channel\n```javascript\n// Create private channel\nconst channel = await slack.createChannel({\n  name: 'project-alpha',\n  is_private: true,\n  topic: 'Discussion for Project Alpha development'\n});\n```\n\n### Upload File\n```javascript\n// Upload file with context\nconst upload = await slack.uploadFile({\n  channels: '#development',\n  file: './deployment-logs.txt',\n  title: 'Deployment Logs',\n  initial_comment: 'Latest deployment results from staging environment'\n});\n```\n\n### Get Channel History\n```javascript\n// Get recent messages\nconst history = await slack.getChannelHistory({\n  channel: '#general',\n  limit: 50,\n  include_all_metadata: true\n});\n```\n\n## Advanced Features\n\n### Interactive Components\n- Create buttons and select menus\n- Handle user interactions and callbacks\n- Build modal dialogs and forms\n- Implement approval workflows\n\n### Scheduled Operations\n- Daily standup reminders\n- Weekly team reports\n- Automated status updates\n- Meeting notifications\n\n### Integration Patterns\n- GitHub notifications to Slack\n- CI/CD pipeline updates\n- Error monitoring alerts\n- Customer support ticketing\n\n### Analytics & Reporting\n- Message frequency analysis\n- User engagement metrics\n- Channel activity reports\n- Thread participation tracking",
  "configuration": {
    "requiresAuth": true,
    "authType": "oauth",
    "permissions": ["channels:read", "chat:write", "files:write", "users:read"]
  },
  "githubUrl": "https://github.com/claudepro/mcp-slack",
  "documentationUrl": "https://docs.claude.ai/mcp/slack"
}