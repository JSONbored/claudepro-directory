# Lefthook Configuration - Claude Pro Directory
# Version: 1.13.0+ (Oct 2025)
# Balance: Protective but not overly strict - maintains development velocity

# ============================================================================
# OUTPUT CONTROL: Modern output configuration (cleaner than deprecated skip_output)
# ============================================================================
output:
  - execution      # Show what's running
  - execution_out  # Show command output
  - skips         # Show skipped commands
  - failure       # Always show failures

# ============================================================================
# PRE-COMMIT: Fast checks on staged files only
# Runs in parallel for speed, fails fast on critical issues
# ============================================================================
pre-commit:
  parallel: true
  follow: true  # Follow symlinks when processing files
  commands:
    # 1. Technical Debt Prevention (baseline-driven)
    # Strategy: Use baseline tracking to prevent regressions
    # - src/ directory: Must have 0 issues (always enforced)
    # - tests/ directory: Can't add NEW debt (baseline comparison)
    # - Allows gradual cleanup without blocking development
    tech-debt-check:
      glob: "*.{ts,tsx,js,jsx,mjs}"
      run: |
        echo "üîç Technical Debt Check (baseline-driven)"
        echo ""

        # Run the baseline checker
        if config/tools/tech-debt/tracker.sh check; then
          echo ""
          echo "‚úÖ Technical debt check passed"
          echo "   ‚Ä¢ src/ is clean"
          echo "   ‚Ä¢ No new debt in tests/"
          echo ""
          echo "üí° Run 'pnpm tech-debt:report' to see full report"
          exit 0
        else
          echo ""
          echo "‚ùå Technical debt check failed"
          echo ""
          echo "Quick fixes:"
          echo "  ‚Ä¢ Run 'pnpm format' to auto-fix linting issues"
          echo "  ‚Ä¢ Run 'pnpm tech-debt:report' for detailed analysis"
          echo ""
          echo "If you cleaned up debt, update baseline:"
          echo "  ‚Ä¢ pnpm tech-debt:baseline"
          exit 1
        fi
      fail_text: "‚ùå Technical debt check failed. Fix issues or update baseline after cleanup."

    # 2. Auto-generate README when content changes
    readme-generation:
      glob: "content/**/*.json"
      run: |
        echo "üìù Regenerating README from content files..."
        pnpm generate:readme
        git add README.md
      fail_text: "‚ùå README generation failed."

    # 3. Content Validation (only when content files change)
    content-validation:
      glob: "content/**/*.json"
      run: pnpm validate:content
      fail_text: "‚ùå Content validation failed. Check your JSON files."

    # 4. SEO Validation (only when MDX content changes)
    seo-validation:
      glob: "content/**/*.mdx"
      run: pnpm validate:seo
      fail_text: "‚ùå SEO validation failed. Fix H1 tags, titles, and descriptions."

    # 5. Metadata Validation (when metadata-related files change)
    # Uses new pattern-based validation system (October 2025)
    metadata-validation:
      glob: "src/lib/seo/**/*.ts"
      run: |
        echo "üîç Validating metadata with pattern system..."
        pnpm validate:metadata:quick
      fail_text: "‚ùå Metadata validation failed. Check titles (53-60 chars) and descriptions (150-160 chars)."

    # 6. Run tests ONLY for changed files (smart, not strict)
    # Uses lefthook 1.13+ file filtering for better performance
    test-changed:
      glob: "{src,tests}/**/*.{ts,tsx}"
      exclude: "*.test.{ts,tsx}|*.spec.{ts,tsx}"
      run: |
        # Smart test runner: only tests that correspond to changed files
        CHANGED=$(git diff --cached --name-only --diff-filter=ACMR -- 'src/**/*.{ts,tsx}' 'tests/**/*.{ts,tsx}')

        if [ -z "$CHANGED" ]; then
          echo "‚ÑπÔ∏è  No source files changed, skipping tests"
          exit 0
        fi

        # Find related test files efficiently
        TEST_FILES=$(echo "$CHANGED" | while read file; do
          # Map src/ files to tests/
          if [[ $file == src/* ]]; then
            test_file="tests/unit/${file#src/}"
            [ -f "${test_file%.tsx}.test.tsx" ] && echo "${test_file%.tsx}.test.tsx"
            [ -f "${test_file%.ts}.test.ts" ] && echo "${test_file%.ts}.test.ts"
          # If test file itself changed, run it
          elif [[ $file == tests/* ]]; then
            echo "$file"
          fi
        done | sort -u)

        if [ -n "$TEST_FILES" ]; then
          echo "üß™ Running tests for changed files..."
          pnpm test:unit -- $TEST_FILES --run --reporter=dot
        else
          echo "‚ö†Ô∏è  No tests found for changed files. Consider adding tests."
        fi
      fail_text: "‚ùå Tests failed. Fix them before committing."

# ============================================================================
# PRE-PUSH: Comprehensive checks before code reaches remote
# Runs sequentially to catch integration issues
# ============================================================================
pre-push:
  parallel: false
  commands:
    # 1. Full test suite with coverage (ensures nothing broke)
    # Non-blocking: warns on failures but allows push (SEO tests can be fixed iteratively)
    test-suite:
      run: |
        echo "üß™ Running full test suite..."
        pnpm test:unit -- --run --reporter=dot || echo "‚ö†Ô∏è  Some tests failed but not blocking push"
      fail_text: "‚ö†Ô∏è  Test suite has failures (not blocking - fix iteratively)."

    # 2. Build verification (catches build-time issues)
    build:
      run: |
        echo "üèóÔ∏è  Verifying production build..."
        pnpm build
      fail_text: "‚ùå Build failed. Fix errors before pushing."

    # 3. E2E Metadata validation for ALL pages (optional, skippable with LEFTHOOK_EXCLUDE)
    # Validates every page in sitemap via Playwright E2E tests
    # Automatically uses PORT env var from your dev server
    # NOTE: Pre-commit uses pattern-based validation (validate:metadata:quick)
    e2e-metadata-validation:
      run: |
        echo "üîç Validating metadata for all sitemap pages (E2E)..."
        echo "   (Skip with: LEFTHOOK_EXCLUDE=e2e-metadata-validation git push)"
        pnpm test:e2e:metadata || echo "‚ö†Ô∏è  Metadata validation failed (not blocking - fix before production deploy)"
      fail_text: "‚ö†Ô∏è  Metadata validation has failures (not blocking)."

    # 4. Security audit (moderate+ severity only, not overly strict)
    security:
      run: |
        echo "üîí Running security audit..."
        pnpm audit --audit-level=moderate --prod || true
      fail_text: "‚ö†Ô∏è  Security vulnerabilities found (not blocking)."

# ============================================================================
# COMMIT-MSG: Enforce conventional commits (optional but recommended)
# Can be disabled by setting LEFTHOOK_EXCLUDE=commit-msg
# ============================================================================
commit-msg:
  commands:
    conventional-commits:
      use_stdin: true  # Properly receive commit message via stdin
      run: |
        MSG=$(cat {1})

        # Skip merge commits
        if echo "$MSG" | grep -qE "^Merge (branch|pull request)"; then
          exit 0
        fi

        # Skip fixup/squash commits
        if echo "$MSG" | grep -qE "^(fixup|squash)!"; then
          exit 0
        fi

        # Validate conventional commit format (lenient)
        if ! echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|wip)(\(.+\))?: .{1,}"; then
          echo "‚ö†Ô∏è  Commit message doesn't follow Conventional Commits format"
          echo ""
          echo "Format: type(scope): description"
          echo "Types: feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|wip"
          echo ""
          echo "Examples:"
          echo "  feat(auth): add Google OAuth"
          echo "  fix(api): resolve race condition"
          echo "  wip: experimenting with new feature"
          echo ""
          echo "üí° Tip: Set LEFTHOOK_EXCLUDE=commit-msg to skip this check"
          exit 1
        fi

# ============================================================================
# POST-MERGE: Auto-install dependencies when package.json changes
# Runs after successful git merge/pull operations
# ============================================================================
post-merge:
  piped: true  # Sequential execution
  commands:
    deps-install:
      files: git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD
      glob: "{package.json,pnpm-lock.yaml}"
      run: |
        echo "üì¶ Dependencies changed. Installing updates..."
        pnpm install
      fail_text: "‚ö†Ô∏è  Dependency installation failed. Run 'pnpm install' manually."

# ============================================================================
# CONFIGURATION
# ============================================================================
colors: true
no_tty: false  # Allow interactive prompts
min_version: 1.13.0

# ============================================================================
# USAGE TIPS
# ============================================================================
# Skip specific commands:
#   LEFTHOOK_EXCLUDE=test-changed,type-check git commit
#
# Skip all commit-msg validation:
#   LEFTHOOK_EXCLUDE=commit-msg git commit
#
# Verbose output for debugging:
#   LEFTHOOK_VERBOSE=1 git commit
#
# Skip all hooks (use sparingly):
#   git commit --no-verify
# ============================================================================
