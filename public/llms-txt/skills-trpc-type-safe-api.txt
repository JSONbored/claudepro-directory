# tRPC Type-Safe API Builder - Claude Pro Directory

> Build end-to-end type-safe APIs with tRPC and TypeScript, eliminating code generation and runtime bloat for full-stack applications.

URL: https://claudepro.directory/skills/trpc-type-safe-api
Category: Skills
Author: JSONbored
Tags: trpc, typescript, api, type-safety, t3-stack
Added: 2025-10-16

---

# tRPC Type-Safe API Builder Skill

## What This Skill Enables

Claude can build fully type-safe APIs using tRPC (TypeScript Remote Procedure Call), part of the T3 Stack explosion in 2025. tRPC provides end-to-end type safety without code generation, schema stitching, or serialization layers - delivering a lighter, more intuitive developer experience than REST or GraphQL. With zero dependencies, tiny client-side footprint, and automatic type inference, tRPC makes full-stack TypeScript development actually enjoyable.

## Prerequisites

**Required:**
- Claude Pro subscription or Claude Code CLI  
- Node.js 18+ with TypeScript 5.0+
- Understanding of React or Next.js
- Basic API development knowledge

**What Claude handles automatically:**
- Setting up tRPC server with Express, Next.js, or standalone
- Creating type-safe routers and procedures
- Implementing middleware for authentication
- Generating React Query hooks automatically
- Adding input validation with Zod
- Configuring error handling and transformers
- Setting up WebSocket subscriptions
- Integrating with Prisma or other ORMs

## How to Use This Skill

### Create Basic tRPC API

**Prompt:** "Set up a tRPC API with Next.js 15 that has procedures for creating, reading, updating, and deleting todos. Include Zod validation and automatic React Query hooks."

Claude will:
1. Initialize tRPC router with type-safe procedures
2. Add Zod schemas for input validation
3. Create CRUD operations with proper types
4. Set up Next.js API route handlers
5. Generate React hooks for client usage
6. Include error handling and transformers
7. Add TypeScript types exported automatically

### Authentication Middleware

**Prompt:** "Add JWT authentication middleware to my tRPC API. Protected procedures should verify the token and attach user data to context."

Claude will:
1. Create authentication middleware
2. Verify JWT tokens with jose library
3. Extend tRPC context with user data
4. Create protected procedure wrapper
5. Add type-safe context typing
6. Include refresh token logic
7. Implement role-based authorization

### Real-Time Subscriptions

**Prompt:** "Build a tRPC subscription that sends real-time notifications when new messages are posted. Use WebSocket transport."

Claude will:
1. Configure WebSocket link on client
2. Create subscription procedure
3. Implement event emitter pattern
4. Add connection status handling
5. Include automatic reconnection
6. Type subscription payloads properly
7. Add subscription filters

### Full-Stack T3 App

**Prompt:** "Create a complete T3 Stack application with tRPC, Prisma, NextAuth, and Tailwind. Include user authentication, database models, and type-safe API routes."

Claude will:
1. Initialize T3 app with create-t3-app
2. Set up Prisma schema and migrations
3. Configure NextAuth providers
4. Create tRPC routers for all features
5. Build authenticated UI components
6. Add optimistic updates with React Query
7. Include comprehensive error handling

## Tips for Best Results

1. **Use Zod for Validation**: tRPC integrates perfectly with Zod. Always request Zod schemas for input validation to get runtime safety matching TypeScript types.

2. **Leverage Context**: Put database clients, auth sessions, and shared utilities in tRPC context for type-safe access across all procedures.

3. **React Query Integration**: tRPC's React hooks are powered by React Query. Request configurations for caching, refetching, and optimistic updates.

4. **Organize with Sub-Routers**: For large APIs, ask Claude to split procedures into feature-based sub-routers (users, posts, comments) merged into a root router.

5. **Type Inference Magic**: tRPC's `inferProcedureInput` and `inferProcedureOutput` utilities maintain types across client/server. Request these for shared type definitions.

6. **Error Handling**: Use tRPC's `TRPCError` with specific codes (BAD_REQUEST, UNAUTHORIZED, etc.) for consistent error responses.

## Common Workflows

### E-Commerce API
```
"Build a type-safe e-commerce API with tRPC:
1. Product catalog with filtering and search
2. Shopping cart management
3. Order processing with Stripe
4. User authentication with NextAuth
5. Admin dashboard procedures
6. Real-time inventory updates
7. Include Zod validation and Prisma integration"
```

### Social Media Backend
```
"Create a social media backend using tRPC:
1. User profiles with follow/unfollow
2. Posts with likes and comments
3. Real-time notifications via subscriptions
4. Image uploads to S3
5. Feed algorithm with pagination
6. Direct messaging between users
7. Content moderation procedures"
```

### SaaS Multi-Tenant API
```
"Build a multi-tenant SaaS API with tRPC:
1. Organization and team management
2. Role-based access control middleware
3. Usage tracking and billing
4. Webhook integrations
5. Audit logging for all actions
6. Rate limiting per tenant
7. Data isolation at database level"
```

### AI Chat Application
```
"Create a chat app with tRPC and streaming:
1. OpenAI inte...

[Content truncated for brevity]

---

Last updated: 2025-10-20T19:49:30.402Z
