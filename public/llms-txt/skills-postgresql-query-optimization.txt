# PostgreSQL Query Optimization - Claude Pro Directory

> Analyze and optimize PostgreSQL queries for OLTP and OLAP workloads with AI-assisted performance tuning, indexing strategies, and execution plan analysis.

URL: https://claudepro.directory/skills/postgresql-query-optimization
Category: Skills
Author: JSONbored
Tags: postgresql, database, optimization, performance, sql
Added: 2025-10-16

---

# PostgreSQL Query Optimization Skill

## What This Skill Enables

Claude can analyze PostgreSQL query performance, interpret EXPLAIN plans, design optimal indexes, and tune database configurations for specific workloads (OLTP, OLAP, or hybrid). With expertise in PostgreSQL 16+ features including parallel query execution, JIT compilation, and advanced partitioning strategies, Claude helps achieve sub-millisecond query times for high-traffic applications.

## Prerequisites

**Required:**
- Claude Pro subscription or Claude Code CLI
- PostgreSQL 14+ installed (16+ recommended)
- Access to database with slow queries or performance issues
- Basic SQL knowledge

**What Claude handles automatically:**
- Analyzing EXPLAIN ANALYZE output
- Identifying missing or inefficient indexes
- Suggesting query rewrites for better performance
- Recommending configuration parameter tuning
- Detecting N+1 query problems
- Proposing table partitioning strategies
- Analyzing vacuum and autovacuum settings
- Identifying connection pooling needs

## How to Use This Skill

### Analyze Slow Query

**Prompt:** "My PostgreSQL query is taking 5 seconds. Here's the query: [paste query]. Analyze the execution plan and suggest optimizations."

Claude will:
1. Run EXPLAIN (ANALYZE, BUFFERS, VERBOSE)
2. Identify bottlenecks (seq scans, nested loops)
3. Suggest missing indexes with CREATE INDEX statements
4. Rewrite query if needed (JOIN order, subquery optimization)
5. Estimate performance improvement
6. Provide before/after comparison

### Index Strategy Design

**Prompt:** "Design an optimal indexing strategy for a high-traffic e-commerce database with 10M products. Include queries: product search by name, filter by category and price range, sort by popularity."

Claude will:
1. Analyze query patterns and access patterns
2. Create B-tree indexes for equality/range queries
3. Add GIN indexes for full-text search
4. Design composite indexes for multi-column filters
5. Include partial indexes for filtered queries
6. Add BRIN indexes for time-series data
7. Calculate index maintenance overhead

### Database Configuration Tuning

**Prompt:** "Tune PostgreSQL configuration for a 32GB RAM server running high-write OLTP workload with 200 concurrent connections."

Claude will:
1. Set shared_buffers (25% of RAM = 8GB)
2. Configure work_mem per connection
3. Adjust max_connections and connection pooling
4. Tune WAL settings for write performance
5. Configure autovacuum for high-write scenarios
6. Set effective_cache_size
7. Enable parallel query workers

### Query Rewriting for Performance

**Prompt:** "Rewrite this slow query to eliminate the N+1 problem: [paste ORM-generated query with multiple subqueries]."

Claude will:
1. Identify N+1 or N+M pattern
2. Convert subqueries to JOINs
3. Use CTEs for readability
4. Apply window functions for ranking
5. Implement LATERAL joins where appropriate
6. Add proper indexes for new query
7. Validate result correctness

## Tips for Best Results

1. **Always Use EXPLAIN ANALYZE**: Share full EXPLAIN (ANALYZE, BUFFERS) output with Claude. The BUFFERS option reveals I/O patterns crucial for optimization.

2. **Provide Table Schemas**: Include CREATE TABLE statements and existing indexes. Claude needs column types and constraints for accurate recommendations.

3. **Share Query Frequency**: Mention if a query runs once per day or 10,000 times per second. Optimization strategies differ dramatically.

4. **Workload Type Matters**: OLTP (many small transactions) and OLAP (complex analytics) require opposite tuning. Specify your workload.

5. **Include Real Data Volume**: "1000 rows" vs "100M rows" changes everything. Share actual table sizes with pg_size_pretty.

6. **Monitor After Changes**: Ask Claude to generate monitoring queries to verify improvements don't cause regressions elsewhere.

## Common Workflows

### Complete Performance Audit
```
"Perform a comprehensive PostgreSQL performance audit:
1. Identify top 10 slowest queries from pg_stat_statements
2. Analyze EXPLAIN plans for each
3. Detect missing indexes with pg_stat_user_tables
4. Find bloated tables needing VACUUM FULL
5. Review configuration parameters
6. Check for long-running transactions blocking others
7. Provide prioritized optimization action plan"
```

### Time-Series Optimization
```
"Optimize PostgreSQL for time-series data:
1. 100M rows of sensor data per month
2. Queries filter by device_id and time range
3. Need 90-day retention with automated archival
4. Implement declarative partitioning by month
5. Add BRIN indexes on timestamp columns
6. Configure autovacuum for partition management
7. Create aggregate materialized views"
```

### Full-Text Search Tuning
```
"Build high-performance full-text search:
1. Search across title, description, tags fields
2. Support phrase queries and ranking
3. Handle 50M documents
4. Sub-100ms query response time
5. Use GIN indexes with tsvector
6. Implement trigram similarity for typo tolerance
7. Add weight...

[Content truncated for brevity]

---

Last updated: 2025-10-20T19:35:50.520Z
