# undefined - Claude Pro Directory

> Orchestrate multi-agent workflows using Microsoft AutoGen v0.4 with role-based task delegation, conversation patterns, and collaborative problem solving

URL: https://claudepro.directory/commands/autogen-workflow
Category: Commands
Author: JSONbored
Tags: autogen, multi-agent, workflow, orchestration, ai
Added: 2025-10-16

---

The `/autogen-workflow` command creates sophisticated multi-agent workflows using Microsoft AutoGen v0.4's actor model with role-based delegation and conversation patterns.

## Usage

```
/autogen-workflow [options] <workflow_description>
```

## Options

### Workflow Types
- `--research` - Research and analysis workflow
- `--coding` - Software development workflow (default)
- `--review` - Code review and quality assurance
- `--debug` - Debugging and troubleshooting
- `--planning` - Project planning and architecture

### Agent Configuration
- `--agents=<list>` - Specify agent roles (e.g., "researcher,analyst,coder")
- `--conversation-pattern=<type>` - Conversation pattern (sequential, round-robin, hierarchical)
- `--termination=<condition>` - Workflow termination condition

### Model Selection
- `--model=<name>` - AI model for agents (gpt-4, claude-sonnet-4, gemini-pro)
- `--temperature=<float>` - Model temperature (0.0-1.0)
- `--max-rounds=<int>` - Maximum conversation rounds (default: 10)

### Tools & Integration
- `--tools=<list>` - Enable specific tools (web-search, file-ops, shell)
- `--memory` - Enable conversation memory
- `--human-in-loop` - Require human approval for critical actions

## Examples

### Software Development Workflow

**Command:**
```
/autogen-workflow --coding --agents="architect,coder,reviewer,tester" "Build a user authentication system with OAuth2 support"
```

**Generated Workflow:**
```python
# Generated AutoGen v0.4 workflow
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination
from autogen_ext.models import OpenAIChatCompletionClient

# Configure model client
model_client = OpenAIChatCompletionClient(
    model="gpt-4o",
    temperature=0.7,
)

# Define specialized agents
architect_agent = AssistantAgent(
    name="Architect",
    model_client=model_client,
    system_message="""
    You are a software architect specializing in authentication systems.
    Your role is to:
    1. Design the system architecture
    2. Define data models and API contracts
    3. Identify security requirements
    4. Create technical specifications
    
    Focus on scalability, security, and best practices.
    """,
    description="Designs system architecture and technical specifications",
)

coder_agent = AssistantAgent(
    name="Coder",
    model_client=model_client,
    system_message="""
    You are an expert full-stack developer.
    Your role is to:
    1. Implement the architecture designed by the Architect
    2. Write production-ready, type-safe code
    3. Follow SOLID principles and design patterns
    4. Add comprehensive error handling
    
    Use TypeScript, React, and Node.js.
    """,
    description="Implements the technical specifications",
)

reviewer_agent = AssistantAgent(
    name="Reviewer",
    model_client=model_client,
    system_message="""
    You are a senior code reviewer and security expert.
    Your role is to:
    1. Review code for security vulnerabilities
    2. Ensure code quality and maintainability
    3. Verify adherence to best practices
    4. Identify potential bugs and edge cases
    
    Be thorough and constructive in your feedback.
    """,
    description="Reviews code quality and security",
)

tester_agent = AssistantAgent(
    name="Tester",
    model_client=model_client,
    system_message="""
    You are a QA engineer specializing in test automation.
    Your role is to:
    1. Write comprehensive test suites
    2. Create unit, integration, and E2E tests
    3. Identify test scenarios and edge cases
    4. Ensure high code coverage
    
    Use Jest, Vitest, and Playwright.
    """,
    description="Creates comprehensive test suites",
)

# Create team with round-robin conversation pattern
team = RoundRobinGroupChat(
    participants=[architect_agent, coder_agent, reviewer_agent, tester_agent],
    max_turns=3,
)

# Define termination conditions
termination = MaxMessageTermination(max_messages=20) | TextMentionTermination("TASK_COMPLETE")

# Run workflow
async def run_auth_workflow():
    result = await team.run(
        task="""
        Build a user authentication system with OAuth2 support.
        
        Requirements:
        1. Support email/password and OAuth2 (Google, GitHub)
        2. JWT-based session management
        3. Role-based access control (RBAC)
        4. Rate limiting and brute force protection
        5. PKCE flow for OAuth2
        6. Comprehensive test coverage
        
        Architect: Start by designing the system architecture.
        """,
        termination_condition=termination,
    )
    
    print("Workflow completed!")
    print(f"Messages exchanged: {len(result.messages)}")
    print(f"Final result: {result.messages[-1].content}")

# Execute
import asyncio
asyncio.run(run_auth_workflow())
```

### Research and Analysis Workflow

**Command:**
```
/autogen-workflow --res...

[Content truncated for brevity]

---

Last updated: 2025-10-20T19:35:50.472Z
