# undefined - Claude Pro Directory

> Intelligent documentation generator with API specs, code examples, tutorials, and interactive guides

URL: https://claudepro.directory/commands/docs
Category: Commands
Author: claudepro
Tags: documentation, api-docs, tutorials, guides, markdown
Added: 2025-09-16

---

The `/docs` command automatically generates comprehensive documentation including API specifications, code examples, tutorials, user guides, and interactive documentation with live examples.

## Usage

```
/docs [options] <file_or_project>
```

## Options

### Documentation Types
- `--api` - Generate API documentation (OpenAPI/Swagger)
- `--code` - Code documentation with JSDoc/docstrings
- `--user` - User guides and tutorials
- `--developer` - Developer documentation and architecture
- `--readme` - Project README and getting started guide
- `--all` - Comprehensive documentation suite (default)

### Output Formats
- `--format=markdown` - Markdown documentation (default)
- `--format=html` - Static HTML documentation
- `--format=interactive` - Interactive documentation with examples
- `--format=pdf` - PDF documentation for distribution
- `--format=confluence` - Confluence wiki format

### Documentation Features
- `--examples` - Include runnable code examples
- `--tutorials` - Generate step-by-step tutorials
- `--diagrams` - Generate architecture and flow diagrams
- `--interactive` - Create interactive API explorer
- `--multilingual` - Generate documentation in multiple languages

### Customization
- `--template=default` - Use default documentation template
- `--template=minimal` - Minimal documentation template
- `--template=enterprise` - Enterprise documentation template
- `--brand=company` - Apply company branding and styling

## Examples

### API Documentation Generation

```javascript
// Express.js API with comprehensive documentation
const express = require('express');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const app = express();

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - name
 *         - email
 *       properties:
 *         id:
 *           type: string
 *           format: uuid
 *           description: Unique identifier for the user
 *           example: "123e4567-e89b-12d3-a456-426614174000"
 *         name:
 *           type: string
 *           minLength: 2
 *           maxLength: 100
 *           description: User's full name
 *           example: "John Doe"
 *         email:
 *           type: string
 *           format: email
 *           description: User's email address
 *           example: "john.doe@example.com"
 *         age:
 *           type: integer
 *           minimum: 13
 *           maximum: 120
 *           description: User's age in years
 *           example: 30
 *         role:
 *           type: string
 *           enum: [user, admin, moderator]
 *           description: User's role in the system
 *           example: "user"
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: User creation timestamp
 *           example: "2025-09-16T10:30:00Z"
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Last update timestamp
 *           example: "2025-09-16T14:45:00Z"
 *       example:
 *         id: "123e4567-e89b-12d3-a456-426614174000"
 *         name: "John Doe"
 *         email: "john.doe@example.com"
 *         age: 30
 *         role: "user"
 *         createdAt: "2025-09-16T10:30:00Z"
 *         updatedAt: "2025-09-16T14:45:00Z"
 *   
 *     UserInput:
 *       type: object
 *       required:
 *         - name
 *         - email
 *       properties:
 *         name:
 *           type: string
 *           minLength: 2
 *           maxLength: 100
 *           description: User's full name
 *         email:
 *           type: string
 *           format: email
 *           description: User's email address
 *         age:
 *           type: integer
 *           minimum: 13
 *           maximum: 120
 *           description: User's age in years
 *   
 *     Error:
 *       type: object
 *       properties:
 *         error:
 *           type: string
 *           description: Error message
 *         code:
 *           type: string
 *           description: Error code
 *         details:
 *           type: object
 *           description: Additional error details
 *       example:
 *         error: "Validation failed"
 *         code: "VALIDATION_ERROR"
 *         details:
 *           field: "email"
 *           message: "Invalid email format"
 *   
 *   responses:
 *     NotFound:
 *       description: Resource not found
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Error'
 *           example:
 *             error: "User not found"
 *             code: "USER_NOT_FOUND"
 *     ValidationError:
 *       description: Validation error
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Error'
 *     ServerError:
 *       description: Internal server error
 *       content:
 *         application/json:
 *           schema:
 *       ...

[Content truncated for brevity]

---

Last updated: 2025-10-20T19:49:30.339Z
