# undefined - Claude Pro Directory

> Automatically generate comprehensive test suites including unit tests, integration tests, and edge cases with multiple testing framework support

URL: https://claudepro.directory/commands/generate-tests
Category: Commands
Author: JSONbored
Tags: testing, automation, unit-tests, integration-tests, tdd
Added: 2025-09-16

---

The `/test-gen` command automatically generates comprehensive test suites for your code with intelligent test case discovery and framework integration.

## Usage

```
/test-gen [options] <file_or_function>
```

## Options

### Test Types
- `--unit` - Generate unit tests (default)
- `--integration` - Generate integration tests
- `--e2e` - Generate end-to-end tests
- `--performance` - Generate performance tests
- `--security` - Generate security tests
- `--accessibility` - Generate accessibility tests

### Framework Selection
- `--jest` - Use Jest testing framework (JavaScript/TypeScript)
- `--vitest` - Use Vitest testing framework
- `--pytest` - Use pytest (Python)
- `--junit` - Use JUnit (Java)
- `--nunit` - Use NUnit (C#)
- `--rspec` - Use RSpec (Ruby)
- `--go-test` - Use Go testing package

### Coverage Options
- `--coverage` - Include code coverage configuration
- `--threshold=90` - Set coverage threshold percentage
- `--coverage-report` - Generate coverage reports

### Test Strategy
- `--tdd` - Test-driven development approach
- `--bdd` - Behavior-driven development with scenarios
- `--property-based` - Generate property-based tests
- `--mutation` - Include mutation testing setup

## Examples

### JavaScript/TypeScript Unit Tests

```javascript
// Source function
function calculateDiscount(price, discountPercentage, customerType) {
  if (price <= 0) throw new Error('Price must be positive');
  if (discountPercentage < 0 || discountPercentage > 100) {
    throw new Error('Discount must be between 0 and 100');
  }
  
  const baseDiscount = price * (discountPercentage / 100);
  const multiplier = customerType === 'premium' ? 1.2 : 1;
  
  return Math.min(baseDiscount * multiplier, price * 0.5);
}

// Generated Jest tests
describe('calculateDiscount', () => {
  describe('valid inputs', () => {
    test('should calculate basic discount correctly', () => {
      const result = calculateDiscount(100, 10, 'regular');
      expect(result).toBe(10);
    });
    
    test('should apply premium multiplier', () => {
      const result = calculateDiscount(100, 10, 'premium');
      expect(result).toBe(12);
    });
    
    test('should cap discount at 50% of price', () => {
      const result = calculateDiscount(100, 60, 'premium');
      expect(result).toBe(50);
    });
  });
  
  describe('edge cases', () => {
    test('should handle zero discount', () => {
      const result = calculateDiscount(100, 0, 'regular');
      expect(result).toBe(0);
    });
    
    test('should handle maximum discount', () => {
      const result = calculateDiscount(100, 100, 'regular');
      expect(result).toBe(50);
    });
  });
  
  describe('error cases', () => {
    test('should throw error for negative price', () => {
      expect(() => calculateDiscount(-10, 10, 'regular'))
        .toThrow('Price must be positive');
    });
    
    test('should throw error for invalid discount percentage', () => {
      expect(() => calculateDiscount(100, -5, 'regular'))
        .toThrow('Discount must be between 0 and 100');
      
      expect(() => calculateDiscount(100, 105, 'regular'))
        .toThrow('Discount must be between 0 and 100');
    });
  });
});
```

### Python Unit Tests

```python
# Source class
class UserValidator:
    def __init__(self, min_age=18):
        self.min_age = min_age
    
    def validate_user(self, user_data):
        errors = []
        
        if not user_data.get('email') or '@' not in user_data['email']:
            errors.append('Invalid email format')
        
        if user_data.get('age', 0) < self.min_age:
            errors.append(f'Age must be at least {self.min_age}')
        
        return len(errors) == 0, errors

# Generated pytest tests
import pytest
from user_validator import UserValidator

class TestUserValidator:
    @pytest.fixture
    def validator(self):
        return UserValidator()
    
    @pytest.fixture
    def custom_validator(self):
        return UserValidator(min_age=21)
    
    def test_valid_user(self, validator):
        user_data = {'email': 'test@example.com', 'age': 25}
        is_valid, errors = validator.validate_user(user_data)
        
        assert is_valid is True
        assert errors == []
    
    def test_invalid_email(self, validator):
        user_data = {'email': 'invalid-email', 'age': 25}
        is_valid, errors = validator.validate_user(user_data)
        
        assert is_valid is False
        assert 'Invalid email format' in errors
    
    def test_missing_email(self, validator):
        user_data = {'age': 25}
        is_valid, errors = validator.validate_user(user_data)
        
        assert is_valid is False
        assert 'Invalid email format' in errors
    
    def test_underage_user(self, validator):
        user_data = {'email': 'test@example.com', 'age': 16}
        is_valid, errors = validator.validate_user(user_data)
        
        assert is_valid is False
        assert 'Age must be at least 18' in errors
    
    def test_cust...

[Content truncated for brevity]

---

Last updated: 2025-10-20T19:41:24.244Z
