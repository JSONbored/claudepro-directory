#!/usr/bin/env tsx
/**
 * Bundle Size Analyzer for Turbopack Builds
 *
 * Since Turbopack doesn't display "First Load JS" metrics in CLI output,
 * this script analyzes the webpack-stats.json files generated by TURBOPACK_STATS=1
 * and displays bundle size information similar to webpack builds.
 */

import { readdirSync, statSync } from 'fs';
import { join } from 'path';

function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'kB', 'MB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${(bytes / k ** i).toFixed(1)} ${sizes[i]}`;
}

function getChunkSizes(): Map<string, number> {
  const chunksDir = join(process.cwd(), '.next/static/chunks');
  const chunkSizes = new Map<string, number>();

  try {
    const files = readdirSync(chunksDir);
    for (const file of files) {
      if (file.endsWith('.js')) {
        const stats = statSync(join(chunksDir, file));
        chunkSizes.set(file, stats.size);
      }
    }
  } catch (error) {
    console.error('Error reading chunks:', error);
  }

  return chunkSizes;
}

function calculateSharedChunksSize(chunkSizes: Map<string, number>): number {
  // Core framework chunks that are shared across all pages
  const sharedChunks = [
    'turbopack',
    '1a95a0709c22910d.js', // React
    '6876e14d55231712.js', // React DOM
    '065150d832e51e8f.js', // Framework
    'bb820649d05609d0.js', // Commons
    'd6209c16069b4f6c.js', // Main
  ];

  let total = 0;
  for (const [filename, size] of chunkSizes) {
    if (sharedChunks.some((chunk) => filename.includes(chunk))) {
      total += size;
    }
  }

  return total;
}

function main() {
  console.log('\n📊 Bundle Size Analysis (Turbopack Build)\n');
  console.log('='.repeat(80));

  const chunkSizes = getChunkSizes();
  const sharedSize = calculateSharedChunksSize(chunkSizes);

  // Calculate total bundle size
  let totalSize = 0;
  for (const size of chunkSizes.values()) {
    totalSize += size;
  }

  console.log('\n🎯 Core Metrics:');
  console.log(`   Total Chunks: ${chunkSizes.size}`);
  console.log(`   Total Bundle Size: ${formatBytes(totalSize)}`);
  console.log(`   Shared Chunks (First Load JS): ${formatBytes(sharedSize)}`);

  // Performance target check
  const targetSize = 300 * 1024; // 300 KB target
  const targetMet = sharedSize <= targetSize;

  console.log('\n🎯 Performance Target (< 300 KB First Load JS):');
  console.log(`   Current: ${formatBytes(sharedSize)}`);
  console.log(`   Target: ${formatBytes(targetSize)}`);
  console.log(`   Status: ${targetMet ? '✅ PASS' : '❌ FAIL'}`);

  if (targetMet) {
    const savings = targetSize - sharedSize;
    console.log(
      `   Under Budget: ${formatBytes(savings)} (${((savings / targetSize) * 100).toFixed(1)}%)`
    );
  } else {
    const overage = sharedSize - targetSize;
    console.log(
      `   Overage: ${formatBytes(overage)} (${((overage / targetSize) * 100).toFixed(1)}%)`
    );
  }

  // Top 10 largest chunks
  console.log('\n📦 Top 10 Largest Chunks:');
  const sortedChunks = Array.from(chunkSizes.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);

  for (const [filename, size] of sortedChunks) {
    console.log(`   ${formatBytes(size).padStart(10)} - ${filename}`);
  }

  console.log(`\n${'='.repeat(80)}`);
  console.log(
    '\n💡 Note: Run with TURBOPACK_STATS=1 to generate detailed webpack-stats.json files'
  );
  console.log('   Analyze with: https://statoscope.tech or webpack-bundle-analyzer\n');
}

main();
