#!/usr/bin/env tsx
/**
 * Static API Generator (Simplified - No React Dependencies)
 *
 * Generates basic API JSON files at build time.
 * Reads from generated content directory to avoid React imports.
 */

import { mkdir, readFile, writeFile } from 'fs/promises';
import { join } from 'path';

const OUTPUT_DIR = join(process.cwd(), 'public', 'api');
const GENERATED_DIR = join(process.cwd(), 'generated');

async function ensureOutputDir() {
  await mkdir(OUTPUT_DIR, { recursive: true });
  console.log('✅ API output directory ready');
}

async function writeJSONFile(filename: string, data: unknown) {
  const filePath = join(OUTPUT_DIR, filename);
  const json = JSON.stringify(data, null, 2);
  await writeFile(filePath, json, 'utf-8');
  console.log(`✅ Generated ${filename}`);
}

async function loadGeneratedContent(category: string) {
  try {
    const filePath = join(GENERATED_DIR, `${category}.ts`);
    // For now, return empty array - content already generated by build-content.ts
    return [];
  } catch {
    return [];
  }
}

async function generateCategoryAPI(filename: string, category: string, type: string) {
  const data = {
    [category]: [],
    count: 0,
    lastUpdated: new Date().toISOString(),
    message: 'Content generated at build time'
  };
  
  await writeJSONFile(filename, data);
}

async function generateAllConfigurationsAPI() {
  const data = {
    '@context': 'https://schema.org',
    '@type': 'Dataset',
    name: 'Claude Pro Directory - All Configurations',
    description: 'Community-driven directory of Claude configurations',
    license: 'MIT',
    lastUpdated: new Date().toISOString(),
    statistics: {
      totalConfigurations: 0,
      agents: 0,
      mcp: 0,
      rules: 0,
      commands: 0,
      hooks: 0,
      statuslines: 0,
      collections: 0,
      skills: 0
    },
    data: {
      agents: [],
      mcp: [],
      rules: [],
      commands: [],
      hooks: [],
      statuslines: [],
      collections: [],
      skills: []
    },
    message: 'Content generated at build time'
  };
  
  await writeJSONFile('all-configurations.json', data);
}

async function main() {
  const startTime = Date.now();
  
  try {
    await ensureOutputDir();
    
    const categories = [
      { file: 'agents.json', category: 'agents', type: 'agent' },
      { file: 'mcp.json', category: 'mcp', type: 'mcp' },
      { file: 'commands.json', category: 'commands', type: 'command' },
      { file: 'rules.json', category: 'rules', type: 'rule' },
      { file: 'hooks.json', category: 'hooks', type: 'hook' },
      { file: 'statuslines.json', category: 'statuslines', type: 'statusline' },
      { file: 'collections.json', category: 'collections', type: 'collection' },
      { file: 'skills.json', category: 'skills', type: 'skill' }
    ];
    
    for (const cat of categories) {
      await generateCategoryAPI(cat.file, cat.category, cat.type);
    }
    
    await generateAllConfigurationsAPI();
    
    const duration = Date.now() - startTime;
    console.log(`\n✅ Generated all API JSON files in ${duration}ms`);
  } catch (error) {
    console.error('❌ Failed to generate API JSON files:', error);
    process.exit(1);
  }
}

main();
