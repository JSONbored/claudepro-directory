/**
 * Fumadocs API Documentation Generator
 *
 * Generates MDX documentation files from OpenAPI 3.1.0 specification using Fumadocs.
 * Creates individual pages for each API endpoint with request/response schemas,
 * examples, and interactive documentation.
 *
 * OPTIMIZATION: Skip on preview builds (saves ~4.5s)
 * API docs rarely change and aren't critical for preview deploys
 *
 * OPTIMIZATION: Hash-based caching (Phase 3)
 * Skip regeneration when OpenAPI spec unchanged (saves ~4.5s on 90% of builds)
 *
 * Features:
 * - Reads from public/openapi.json (generated by generate-openapi.ts)
 * - Generates MDX files in content/api-docs/
 * - Creates navigation structure for Fumadocs sidebar
 * - Includes code examples in multiple languages
 * - Type-safe schemas from Zod
 *
 * Build Integration:
 * - Called by package.json build:api-docs script
 * - Runs before Next.js build to pre-generate docs
 * - Output: content/api-docs/*.mdx (git-ignored, generated at build time)
 *
 * @module scripts/generate-fumadocs-api
 * @see {@link https://fumadocs.dev/docs/ui/openapi Fumadocs OpenAPI Documentation}
 */

// OPTIMIZATION: Skip API docs generation on preview builds
if (process.env.VERCEL_ENV === 'preview') {
  console.log('âš¡ SKIP: API docs generation (preview build)');
  console.log('   â†’ API docs not critical for previews');
  console.log('   â†’ Saves ~4.5 seconds build time');
  process.exit(0);
}

import { createHash } from 'node:crypto';
import { existsSync, readdirSync, readFileSync } from 'node:fs';
import { mkdir, writeFile } from 'node:fs/promises';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import { generateFiles } from 'fumadocs-openapi';
import { logger } from '../../src/lib/logger.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ROOT_DIR = resolve(__dirname, '../..');
const OPENAPI_FILE = resolve(ROOT_DIR, 'public/openapi.json');
const API_DOCS_DIR = resolve(ROOT_DIR, 'content/api-docs');
const CACHE_FILE = resolve(ROOT_DIR, '.next/cache/apidocs-hash.json');

/**
 * Hash OpenAPI spec to detect changes
 */
function calculateOpenAPIHash(): string | null {
  if (!existsSync(OPENAPI_FILE)) return null;
  const content = readFileSync(OPENAPI_FILE, 'utf-8');
  return createHash('sha256').update(content).digest('hex').substring(0, 12);
}

/**
 * Load cached hash
 */
function loadCachedHash(): string | null {
  if (!existsSync(CACHE_FILE)) return null;
  try {
    const cache = JSON.parse(readFileSync(CACHE_FILE, 'utf-8'));
    return cache.openapiHash || null;
  } catch {
    return null;
  }
}

/**
 * Save hash to cache
 */
async function saveCacheHash(openapiHash: string): Promise<void> {
  const cacheDir = dirname(CACHE_FILE);
  await mkdir(cacheDir, { recursive: true });
  await writeFile(
    CACHE_FILE,
    JSON.stringify({ openapiHash, timestamp: new Date().toISOString() }, null, 2)
  );
}

/**
 * Check if API docs exist
 */
function apiDocsExist(): boolean {
  if (!existsSync(API_DOCS_DIR)) return false;
  const files = readdirSync(API_DOCS_DIR);
  return files.some((f) => f.endsWith('.mdx'));
}

/**
 * Generate API documentation from OpenAPI spec
 *
 * Process:
 * 1. Uses configured openapi instance from lib/openapi.ts
 * 2. Reads public/openapi.json (OpenAPI 3.1.0 spec)
 * 3. Parses endpoints and schemas
 * 4. Generates MDX files for each endpoint with descriptions
 * 5. Creates navigation metadata and page tree
 * 6. Outputs to content/api-docs/
 *
 * Configuration:
 * - input: Configured openapi instance (single source of truth)
 * - output: Directory for generated MDX files
 * - includeDescription: Include endpoint descriptions in MDX (recommended)
 * - addGeneratedComment: Add auto-generated comment to files
 *
 * Generated Structure:
 * ```
 * content/api-docs/
 * â”œâ”€â”€ index.mdx (overview page)
 * â”œâ”€â”€ content/
 * â”‚   â”œâ”€â”€ get-items.mdx
 * â”‚   â”œâ”€â”€ get-item.mdx
 * â”‚   â””â”€â”€ ...
 * â”œâ”€â”€ search/
 * â”‚   â””â”€â”€ search-items.mdx
 * â””â”€â”€ ...
 * ```
 *
 * @async
 * @function generateAPIDocs
 * @returns {Promise<void>} Resolves when generation is complete
 * @throws {Error} If OpenAPI spec cannot be read or MDX generation fails
 *
 * @example
 * ```bash
 * # Via package.json script
 * npm run build:api-docs
 *
 * # Direct execution
 * node --import tsx scripts/generate-fumadocs-api.ts
 * ```
 */
async function generateAPIDocs(): Promise<void> {
  try {
    // OPTIMIZATION: Check if OpenAPI spec changed
    const currentHash = calculateOpenAPIHash();
    const cachedHash = loadCachedHash();

    if (currentHash && cachedHash === currentHash && apiDocsExist()) {
      console.log('âš¡ SKIP: OpenAPI spec unchanged');
      console.log(`   OpenAPI hash: ${currentHash}`);
      console.log('   â†’ Using cached API docs');
      console.log('   â†’ Saves ~4.5 seconds build time\n');
      process.exit(0);
    }

    if (cachedHash && cachedHash !== currentHash) {
      console.log('ðŸ“Š OpenAPI spec changed - regenerating API docs\n');
    }

    logger.progress('Generating Fumadocs API documentation from OpenAPI spec...');

    // Generate MDX files from OpenAPI specification file
    // Direct file path approach is simpler and avoids server object complexity
    await generateFiles({
      // Path to OpenAPI 3.1.0 JSON spec (generated by scripts/generate-openapi.ts)
      input: ['./public/openapi.json'],

      // Output directory for generated MDX files
      // These files are git-ignored and regenerated at build time
      output: './content/api-docs',

      // Include endpoint descriptions in generated MDX
      // Ensures comprehensive documentation for each endpoint
      includeDescription: true,

      // Add comment indicating files are auto-generated
      addGeneratedComment: true,
    });

    // Save hash to cache
    if (currentHash) {
      await saveCacheHash(currentHash);
    }

    logger.success('API documentation generated successfully');
    logger.log('Output: content/api-docs/*.mdx');
  } catch (error) {
    logger.failure(
      `Failed to generate API documentation: ${error instanceof Error ? error.message : String(error)}`
    );
    process.exit(1);
  }
}

// Execute immediately
generateAPIDocs().catch((error: unknown) => {
  logger.failure(
    `Failed to generate API docs: ${error instanceof Error ? error.message : String(error)}`
  );
  process.exit(1);
});

export { generateAPIDocs };
