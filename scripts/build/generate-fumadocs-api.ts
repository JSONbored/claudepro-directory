/**
 * Fumadocs API Documentation Generator
 *
 * Generates MDX documentation files from OpenAPI 3.1.0 specification using Fumadocs.
 * Creates individual pages for each API endpoint with request/response schemas,
 * examples, and interactive documentation.
 *
 * Features:
 * - Reads from public/openapi.json (generated by generate-openapi.ts)
 * - Generates MDX files in content/api-docs/
 * - Creates navigation structure for Fumadocs sidebar
 * - Includes code examples in multiple languages
 * - Type-safe schemas from Zod
 *
 * Build Integration:
 * - Called by package.json build:api-docs script
 * - Runs before Next.js build to pre-generate docs
 * - Output: content/api-docs/*.mdx (git-ignored, generated at build time)
 *
 * @module scripts/generate-fumadocs-api
 * @see {@link https://fumadocs.dev/docs/ui/openapi Fumadocs OpenAPI Documentation}
 */

import { generateFiles } from 'fumadocs-openapi';
import { logger } from '../../src/lib/logger.js';

/**
 * Generate API documentation from OpenAPI spec
 *
 * Process:
 * 1. Uses configured openapi instance from lib/openapi.ts
 * 2. Reads public/openapi.json (OpenAPI 3.1.0 spec)
 * 3. Parses endpoints and schemas
 * 4. Generates MDX files for each endpoint with descriptions
 * 5. Creates navigation metadata and page tree
 * 6. Outputs to content/api-docs/
 *
 * Configuration:
 * - input: Configured openapi instance (single source of truth)
 * - output: Directory for generated MDX files
 * - includeDescription: Include endpoint descriptions in MDX (recommended)
 * - addGeneratedComment: Add auto-generated comment to files
 *
 * Generated Structure:
 * ```
 * content/api-docs/
 * ├── index.mdx (overview page)
 * ├── content/
 * │   ├── get-items.mdx
 * │   ├── get-item.mdx
 * │   └── ...
 * ├── search/
 * │   └── search-items.mdx
 * └── ...
 * ```
 *
 * @async
 * @function generateAPIDocs
 * @returns {Promise<void>} Resolves when generation is complete
 * @throws {Error} If OpenAPI spec cannot be read or MDX generation fails
 *
 * @example
 * ```bash
 * # Via package.json script
 * npm run build:api-docs
 *
 * # Direct execution
 * node --import tsx scripts/generate-fumadocs-api.ts
 * ```
 */
async function generateAPIDocs(): Promise<void> {
  try {
    logger.progress('Generating Fumadocs API documentation from OpenAPI spec...');

    // Generate MDX files from OpenAPI specification file
    // Direct file path approach is simpler and avoids server object complexity
    await generateFiles({
      // Path to OpenAPI 3.1.0 JSON spec (generated by scripts/generate-openapi.ts)
      input: ['./public/openapi.json'],

      // Output directory for generated MDX files
      // These files are git-ignored and regenerated at build time
      output: './content/api-docs',

      // Include endpoint descriptions in generated MDX
      // Ensures comprehensive documentation for each endpoint
      includeDescription: true,

      // Add comment indicating files are auto-generated
      addGeneratedComment: true,
    });

    logger.success('API documentation generated successfully');
    logger.log('Output: content/api-docs/*.mdx');
  } catch (error) {
    logger.failure(
      `Failed to generate API documentation: ${error instanceof Error ? error.message : String(error)}`
    );
    process.exit(1);
  }
}

// Execute immediately
generateAPIDocs().catch((error: unknown) => {
  logger.failure(
    `Failed to generate API docs: ${error instanceof Error ? error.message : String(error)}`
  );
  process.exit(1);
});

export { generateAPIDocs };
