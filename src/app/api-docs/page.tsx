/**
 * API Documentation Landing Page
 *
 * Landing page for the ClaudePro Directory REST API documentation.
 * Displays overview, features, and links to specific endpoint documentation.
 *
 * Features:
 * - API overview with key features
 * - Base URL and authentication information
 * - Rate limiting details
 * - Links to endpoint documentation (auto-generated by Fumadocs)
 * - Code examples for common operations
 *
 * SEO:
 * - Title: "API Documentation | ClaudePro Directory API"
 * - Indexed by search engines and AI crawlers (GPTBot, ClaudeBot, Perplexity)
 * - RFC 9727 compliant (/.well-known/api-catalog)
 *
 * @module app/api-docs/page
 * @see {@link /public/openapi.json OpenAPI 3.1.0 Specification}
 */

import type { Metadata } from "next";
import { APP_CONFIG } from "@/src/lib/constants";

/**
 * Page metadata for API documentation landing page
 *
 * @type {Metadata}
 */
export const metadata: Metadata = {
  title: "Overview",
  description:
    "Claude Pro Directory REST API: Access 150+ open-source configurations via JSON endpoints. Includes agents, MCP servers, commands, hooks, search, and analytics with CORS.",
};

/**
 * API Documentation Landing Page Component
 *
 * Renders the main overview page for API documentation.
 * Provides introduction, authentication, rate limits, and endpoint navigation.
 *
 * Content Structure:
 * 1. Introduction
 * 2. Base URL and environments
 * 3. Authentication (no auth required for public endpoints)
 * 4. Rate limiting (Upstash Redis-based)
 * 5. Response format (JSON)
 * 6. Error handling
 * 7. Example requests
 *
 * @returns {JSX.Element} API documentation overview page
 *
 * @example
 * // Accessed at /api-docs
 * // Auto-wrapped by layout.tsx with Fumadocs UI
 */
export default function APIDocsPage() {
  return (
    <div className="prose prose-invert max-w-none">
      <h1>ClaudePro Directory API</h1>

      <p className="lead">
        A comprehensive REST API for accessing Claude configurations including
        agents, MCP servers, rules, commands, hooks, and statuslines. Browse,
        search, and discover community-contributed configurations with full
        TypeScript type safety.
      </p>

      <h2>Features</h2>
      <ul>
        <li>
          <strong>Content Discovery:</strong> Browse and search Claude
          configurations by category
        </li>
        <li>
          <strong>MCP Servers:</strong> Discover and integrate Model Context
          Protocol servers
        </li>
        <li>
          <strong>Rules & Commands:</strong> Find expert-crafted rules and
          automation commands
        </li>
        <li>
          <strong>Trending Analytics:</strong> Track popular and trending
          configurations
        </li>
        <li>
          <strong>Performance Optimized:</strong> Redis-backed caching with ISR
          revalidation
        </li>
        <li>
          <strong>Type-Safe:</strong> Full TypeScript support with Zod
          validation
        </li>
      </ul>

      <h2>Base URL</h2>
      <pre>
        <code>{APP_CONFIG.url}/api</code>
      </pre>

      <h3>Environments</h3>
      <ul>
        <li>
          <strong>Production:</strong> <code>{APP_CONFIG.url}/api</code>
        </li>
        <li>
          <strong>API Base Path:</strong> <code>/api</code>
        </li>
      </ul>

      <h2>Authentication</h2>
      <p>
        No authentication required for public endpoints. All endpoints are
        publicly accessible with rate limiting applied.
      </p>

      <h2>Rate Limiting</h2>
      <p>
        Rate limits are enforced using Upstash Redis and Arcjet protection.
        Default limits per IP:
      </p>
      <ul>
        <li>
          <strong>Content endpoints:</strong> 100 requests per minute
        </li>
        <li>
          <strong>Search endpoints:</strong> 50 requests per minute
        </li>
        <li>
          <strong>Analytics endpoints:</strong> 30 requests per minute
        </li>
      </ul>

      <h2>Response Format</h2>
      <p>
        All responses are returned in JSON format with the following structure:
      </p>
      <pre>
        <code>
          {`{
  "success": true,
  "data": { ... },
  "timestamp": "2025-10-02T22:30:00.000Z"
}`}
        </code>
      </pre>

      <h3>Error Responses</h3>
      <pre>
        <code>
          {`{
  "success": false,
  "error": "Error message",
  "code": "ERROR_CODE"
}`}
        </code>
      </pre>

      <h2>Common Error Codes</h2>
      <ul>
        <li>
          <code>400</code> - Bad Request: Invalid parameters
        </li>
        <li>
          <code>404</code> - Not Found: Resource does not exist
        </li>
        <li>
          <code>429</code> - Too Many Requests: Rate limit exceeded
        </li>
        <li>
          <code>500</code> - Internal Server Error: Server-side error
        </li>
      </ul>

      <h2>Quick Start Example</h2>
      <p>Fetch all agents:</p>
      <pre>
        <code>
          {`// TypeScript
const response = await fetch('${APP_CONFIG.url}/api/agents');
const data = await response.json();
console.log(data.items); // Array of agents`}
        </code>
      </pre>

      <h2>Endpoint Documentation</h2>
      <p>
        Browse the sidebar to explore detailed documentation for each endpoint,
        including request parameters, response schemas, and code examples in
        multiple languages.
      </p>
    </div>
  );
}
