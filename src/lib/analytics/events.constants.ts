/**
 * Analytics Events - Unified Tree-Shakeable Architecture (AUTO-GENERATED)
 *
 * Single source of truth for ALL analytics: events, config, and type definitions.
 * Merges events.constants.ts + events.config.ts + event-payloads.types.ts into ONE file.
 *
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 * This file is auto-generated by scripts/generate-events.ts
 * To add events, add a category to UNIFIED_CATEGORY_REGISTRY in category-config.ts
 *
 * Modern 2025 Architecture with Maximum Performance:
 * - Configuration-driven: Events auto-generated from category registry
 * - Type-safe: Full TypeScript inference with template literals
 * - Zero duplication: Single source of truth in category-config.ts
 * - Build-time generation: Run 'npm run generate:events'
 * - Maintainable: Add category → all events/config/types auto-generate
 * - Tree-shakeable: Lazy initialization prevents loading unused code
 *
 * Tree-Shaking Optimization:
 * - EVENTS const: ~2KB (imported by all components)
 * - getEventConfig(): ~4KB (only imported by tracker.ts)
 * - EventPayloads: 0KB (types stripped at compile time)
 *
 * Components importing EVENTS get ~2KB, NOT ~7KB like the old architecture.
 *
 * Generated: 2025-10-16T07:17:37.104Z
 *
 * @module lib/analytics/events.constants
 * @generated
 */

/**
 * ============================================
 * TYPE-SAFE EVENT GENERATION
 * ============================================
 *
 * Category-specific events use TypeScript template literals
 * for full compile-time type safety and IDE autocomplete.
 */

/**
 * Category IDs that have analytics events
 * Auto-generated from UNIFIED_CATEGORY_REGISTRY
 */
type AnalyticsCategory =
  | 'agents'
  | 'mcp'
  | 'commands'
  | 'rules'
  | 'hooks'
  | 'statuslines'
  | 'collections'
  | 'skills';

/**
 * Additional content types (not in main category registry)
 */
type AdditionalContentType = 'guide';

/**
 * Category event suffix mapping (for singular forms)
 * Auto-generated transformation rules
 */
type CategorySuffix<T extends string> = T extends 'agents'
  ? 'agent'
  : T extends 'mcp'
    ? 'mcp'
    : T extends 'commands'
      ? 'command'
      : T extends 'rules'
        ? 'rule'
        : T extends 'hooks'
          ? 'hook'
          : T extends 'statuslines'
            ? 'statusline'
            : T extends 'collections'
              ? 'collection'
              : T extends 'skills'
                ? 'skill'
                : T extends 'guide'
                  ? 'guide'
                  : never;

/**
 * TypeScript template literal types for dynamic event generation
 * These types ensure compile-time validation of all event names
 */
type ContentViewEvent<T extends AnalyticsCategory> = `content_view_${CategorySuffix<T>}`;
type RelatedClickEvent<T extends AnalyticsCategory | AdditionalContentType> =
  `related_click_from_${CategorySuffix<T>}`;
type RelatedViewEvent<T extends AnalyticsCategory | AdditionalContentType> =
  `related_view_on_${CategorySuffix<T>}`;
type SearchEvent<T extends AnalyticsCategory | 'guides'> = `search_${T}`;
type CopyCodeEvent<T extends AnalyticsCategory | AdditionalContentType> =
  `copy_code_${CategorySuffix<T>}`;
type CopyMarkdownEvent<T extends AnalyticsCategory | AdditionalContentType> =
  `copy_markdown_${CategorySuffix<T>}`;
type DownloadMarkdownEvent<T extends AnalyticsCategory | AdditionalContentType> =
  `download_markdown_${CategorySuffix<T>}`;

/**
 * ============================================
 * EVENT NAMES (STATIC CONST - TREE-SHAKEABLE)
 * ============================================
 *
 * Static const object - fully tree-shakeable, no side effects.
 * Components can import this without pulling in EVENT_CONFIG.
 * 100% auto-generated from UNIFIED_CATEGORY_REGISTRY.
 */
export const EVENTS = {
  // ============================================
  // CONTENT VIEW EVENTS (Category-specific)
  // ============================================
  CONTENT_VIEW_AGENT: 'content_view_agent' as ContentViewEvent<'agents'>,
  CONTENT_VIEW_MCP: 'content_view_mcp' as ContentViewEvent<'mcp'>,
  CONTENT_VIEW_COMMAND: 'content_view_command' as ContentViewEvent<'commands'>,
  CONTENT_VIEW_RULE: 'content_view_rule' as ContentViewEvent<'rules'>,
  CONTENT_VIEW_HOOK: 'content_view_hook' as ContentViewEvent<'hooks'>,
  CONTENT_VIEW_STATUSLINE: 'content_view_statusline' as ContentViewEvent<'statuslines'>,
  CONTENT_VIEW_COLLECTION: 'content_view_collection' as ContentViewEvent<'collections'>,
  CONTENT_VIEW_SKILL: 'content_view_skill' as ContentViewEvent<'skills'>,

  // ============================================
  // RELATED CONTENT CLICK EVENTS (Category-specific)
  // ============================================
  RELATED_CLICK_FROM_AGENT: 'related_click_from_agent' as RelatedClickEvent<'agents'>,
  RELATED_CLICK_FROM_MCP: 'related_click_from_mcp' as RelatedClickEvent<'mcp'>,
  RELATED_CLICK_FROM_COMMAND: 'related_click_from_command' as RelatedClickEvent<'commands'>,
  RELATED_CLICK_FROM_RULE: 'related_click_from_rule' as RelatedClickEvent<'rules'>,
  RELATED_CLICK_FROM_HOOK: 'related_click_from_hook' as RelatedClickEvent<'hooks'>,
  RELATED_CLICK_FROM_STATUSLINE:
    'related_click_from_statusline' as RelatedClickEvent<'statuslines'>,
  RELATED_CLICK_FROM_COLLECTION:
    'related_click_from_collection' as RelatedClickEvent<'collections'>,
  RELATED_CLICK_FROM_SKILL: 'related_click_from_skill' as RelatedClickEvent<'skills'>,
  RELATED_CLICK_FROM_GUIDE: 'related_click_from_guide' as RelatedClickEvent<'guide'>,

  // ============================================
  // RELATED CONTENT VIEW EVENTS (Category-specific)
  // ============================================
  RELATED_VIEW_ON_AGENT: 'related_view_on_agent' as RelatedViewEvent<'agents'>,
  RELATED_VIEW_ON_MCP: 'related_view_on_mcp' as RelatedViewEvent<'mcp'>,
  RELATED_VIEW_ON_COMMAND: 'related_view_on_command' as RelatedViewEvent<'commands'>,
  RELATED_VIEW_ON_RULE: 'related_view_on_rule' as RelatedViewEvent<'rules'>,
  RELATED_VIEW_ON_HOOK: 'related_view_on_hook' as RelatedViewEvent<'hooks'>,
  RELATED_VIEW_ON_STATUSLINE: 'related_view_on_statusline' as RelatedViewEvent<'statuslines'>,
  RELATED_VIEW_ON_COLLECTION: 'related_view_on_collection' as RelatedViewEvent<'collections'>,
  RELATED_VIEW_ON_SKILL: 'related_view_on_skill' as RelatedViewEvent<'skills'>,
  RELATED_VIEW_ON_GUIDE: 'related_view_on_guide' as RelatedViewEvent<'guide'>,

  // ============================================
  // SEARCH EVENTS (Category-specific)
  // ============================================
  SEARCH_AGENTS: 'search_agents' as SearchEvent<'agents'>,
  SEARCH_MCP: 'search_mcp' as SearchEvent<'mcp'>,
  SEARCH_COMMANDS: 'search_commands' as SearchEvent<'commands'>,
  SEARCH_RULES: 'search_rules' as SearchEvent<'rules'>,
  SEARCH_HOOKS: 'search_hooks' as SearchEvent<'hooks'>,
  SEARCH_STATUSLINES: 'search_statuslines' as SearchEvent<'statuslines'>,
  SEARCH_COLLECTIONS: 'search_collections' as SearchEvent<'collections'>,
  SEARCH_SKILLS: 'search_skills' as SearchEvent<'skills'>,
  SEARCH_GUIDES: 'search_guides' as SearchEvent<'guides'>,

  // ============================================
  // COPY CODE EVENTS (Category-specific)
  // ============================================
  COPY_CODE_AGENT: 'copy_code_agent' as CopyCodeEvent<'agents'>,
  COPY_CODE_MCP: 'copy_code_mcp' as CopyCodeEvent<'mcp'>,
  COPY_CODE_COMMAND: 'copy_code_command' as CopyCodeEvent<'commands'>,
  COPY_CODE_RULE: 'copy_code_rule' as CopyCodeEvent<'rules'>,
  COPY_CODE_HOOK: 'copy_code_hook' as CopyCodeEvent<'hooks'>,
  COPY_CODE_STATUSLINE: 'copy_code_statusline' as CopyCodeEvent<'statuslines'>,
  COPY_CODE_COLLECTION: 'copy_code_collection' as CopyCodeEvent<'collections'>,
  COPY_CODE_SKILL: 'copy_code_skill' as CopyCodeEvent<'skills'>,
  COPY_CODE_GUIDE: 'copy_code_guide' as CopyCodeEvent<'guide'>,

  // ============================================
  // COPY MARKDOWN EVENTS (Category-specific)
  // ============================================
  COPY_MARKDOWN_AGENT: 'copy_markdown_agent' as CopyMarkdownEvent<'agents'>,
  COPY_MARKDOWN_MCP: 'copy_markdown_mcp' as CopyMarkdownEvent<'mcp'>,
  COPY_MARKDOWN_COMMAND: 'copy_markdown_command' as CopyMarkdownEvent<'commands'>,
  COPY_MARKDOWN_RULE: 'copy_markdown_rule' as CopyMarkdownEvent<'rules'>,
  COPY_MARKDOWN_HOOK: 'copy_markdown_hook' as CopyMarkdownEvent<'hooks'>,
  COPY_MARKDOWN_STATUSLINE: 'copy_markdown_statusline' as CopyMarkdownEvent<'statuslines'>,
  COPY_MARKDOWN_COLLECTION: 'copy_markdown_collection' as CopyMarkdownEvent<'collections'>,
  COPY_MARKDOWN_SKILL: 'copy_markdown_skill' as CopyMarkdownEvent<'skills'>,
  COPY_MARKDOWN_GUIDE: 'copy_markdown_guide' as CopyMarkdownEvent<'guide'>,

  // ============================================
  // DOWNLOAD MARKDOWN EVENTS (Category-specific)
  // ============================================
  DOWNLOAD_MARKDOWN_AGENT: 'download_markdown_agent' as DownloadMarkdownEvent<'agents'>,
  DOWNLOAD_MARKDOWN_MCP: 'download_markdown_mcp' as DownloadMarkdownEvent<'mcp'>,
  DOWNLOAD_MARKDOWN_COMMAND: 'download_markdown_command' as DownloadMarkdownEvent<'commands'>,
  DOWNLOAD_MARKDOWN_RULE: 'download_markdown_rule' as DownloadMarkdownEvent<'rules'>,
  DOWNLOAD_MARKDOWN_HOOK: 'download_markdown_hook' as DownloadMarkdownEvent<'hooks'>,
  DOWNLOAD_MARKDOWN_STATUSLINE:
    'download_markdown_statusline' as DownloadMarkdownEvent<'statuslines'>,
  DOWNLOAD_MARKDOWN_COLLECTION:
    'download_markdown_collection' as DownloadMarkdownEvent<'collections'>,
  DOWNLOAD_MARKDOWN_SKILL: 'download_markdown_skill' as DownloadMarkdownEvent<'skills'>,
  DOWNLOAD_MARKDOWN_GUIDE: 'download_markdown_guide' as DownloadMarkdownEvent<'guide'>,

  // ============================================
  // CORE EVENTS (Non-category-specific)
  // ============================================

  // Related Content (Generic)
  RELATED_CONTENT_IMPRESSION: 'related_content_impression',
  CAROUSEL_NAVIGATION: 'carousel_navigation',

  // User Journey
  CONTENT_JOURNEY: 'content_journey',
  SESSION_START: 'session_start',
  SESSION_DEPTH: 'session_depth',

  // Performance
  PERFORMANCE_METRIC: 'performance_metric',
  CACHE_PERFORMANCE: 'cache_performance',
  API_LATENCY: 'api_latency',
  PAGE_LOAD_TIME: 'page_load_time',

  // Algorithm
  ALGORITHM_PERFORMANCE: 'algorithm_performance',

  // Search (Global)
  SEARCH_GLOBAL: 'search_global',
  FILTER_APPLIED: 'filter_applied',

  // Sharing & Feedback
  DOWNLOAD_RESOURCE: 'download_resource',
  SHARE_CONTENT: 'share_content',
  FEEDBACK_SUBMITTED: 'feedback_submitted',

  // Email Capture
  EMAIL_MODAL_SHOWN: 'email_modal_shown',
  EMAIL_MODAL_DISMISSED: 'email_modal_dismissed',
  EMAIL_SUBSCRIBED_FOOTER: 'email_subscribed_footer',
  EMAIL_SUBSCRIBED_INLINE: 'email_subscribed_inline',
  EMAIL_SUBSCRIBED_POST_COPY: 'email_subscribed_post_copy',
  EMAIL_SUBSCRIBED_HOMEPAGE: 'email_subscribed_homepage',
  EMAIL_SUBSCRIBED_MODAL: 'email_subscribed_modal',
  EMAIL_SUBSCRIBED_CONTENT_PAGE: 'email_subscribed_content_page',

  // Error Tracking
  ERROR_OCCURRED: 'error_occurred',
  NOT_FOUND: 'not_found',
  API_ERROR: 'api_error',

  // Content Activation
  MCP_INSTALLED: 'mcp_installed',
  AGENT_ACTIVATED: 'agent_activated',
  COMMAND_EXECUTED: 'command_executed',
  RULE_APPLIED: 'rule_applied',
  HOOK_TRIGGERED: 'hook_triggered',

  // Navigation
  TAB_SWITCHED: 'tab_switched',
  FILTER_TOGGLED: 'filter_toggled',
  SORT_CHANGED: 'sort_changed',
  PAGINATION_CLICKED: 'pagination_clicked',

  // Personalization
  PERSONALIZATION_AFFINITY_CALCULATED: 'personalization_affinity_calculated',
  PERSONALIZATION_RECOMMENDATION_SHOWN: 'personalization_recommendation_shown',
  PERSONALIZATION_RECOMMENDATION_CLICKED: 'personalization_recommendation_clicked',
  PERSONALIZATION_SIMILAR_CONFIG_CLICKED: 'personalization_similar_config_clicked',
  PERSONALIZATION_FOR_YOU_VIEWED: 'personalization_for_you_viewed',
  PERSONALIZATION_USAGE_RECOMMENDATION_SHOWN: 'personalization_usage_recommendation_shown',
} as const;

/**
 * Type helper for event names
 */
export type EventName = (typeof EVENTS)[keyof typeof EVENTS];

/**
 * ============================================
 * EVENT CONFIGURATION (LAZY INITIALIZATION)
 * ============================================
 *
 * Tree-shaking optimization: EVENT_CONFIG is built lazily via getEventConfig().
 * Components importing only EVENTS will NOT include this code in their bundle.
 * Only tracker.ts uses this, saving ~5KB per route for other components.
 */

/**
 * Event configuration interface
 */
interface EventConfig {
  description: string;
  category:
    | 'CONTENT'
    | 'JOURNEY'
    | 'PERFORMANCE'
    | 'INTERACTION'
    | 'ERROR'
    | 'FEATURE'
    | 'NAVIGATION'
    | 'PERSONALIZATION';
  enabled: boolean;
  sampleRate?: number;
  debugOnly?: boolean;
}

/**
 * Category display name mapping for descriptions
 */
const CATEGORY_DISPLAY_NAMES: Record<string, string> = {
  agents: 'agent',
  mcp: 'MCP server',
  commands: 'command',
  rules: 'rule',
  hooks: 'hook',
  statuslines: 'statusline',
  collections: 'collection',
  skills: 'skill',
  guides: 'guide',
};

/**
 * Build event configurations dynamically from EVENTS
 * Generates consistent configs for all category-specific events
 */
function buildEventConfig(): Record<EventName, EventConfig> {
  const config: Record<string, EventConfig> = {};

  // Dynamically generate configs for all category events
  for (const [key, value] of Object.entries(EVENTS)) {
    const eventName = value as EventName;

    // Content view events
    if (key.startsWith('CONTENT_VIEW_')) {
      const category = key.replace('CONTENT_VIEW_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User views ${displayName} detail page`,
        category: 'CONTENT',
        enabled: true,
      };
    }
    // Related view events
    else if (key.startsWith('RELATED_VIEW_ON_')) {
      const category = key.replace('RELATED_VIEW_ON_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `Related content viewed on ${displayName} detail page`,
        category: 'CONTENT',
        enabled: true,
      };
    }
    // Related click events
    else if (key.startsWith('RELATED_CLICK_FROM_')) {
      const category = key.replace('RELATED_CLICK_FROM_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User clicks related content from ${displayName} detail page`,
        category: 'CONTENT',
        enabled: true,
      };
    }
    // Search events
    else if (key.startsWith('SEARCH_') && key !== 'SEARCH_GLOBAL') {
      const category = key.replace('SEARCH_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User searches within ${displayName} section`,
        category: 'INTERACTION',
        enabled: true,
      };
    }
    // Copy code events
    else if (key.startsWith('COPY_CODE_')) {
      const category = key.replace('COPY_CODE_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User copies code from ${displayName} detail page`,
        category: 'INTERACTION',
        enabled: true,
      };
    }
    // Copy markdown events
    else if (key.startsWith('COPY_MARKDOWN_')) {
      const category = key.replace('COPY_MARKDOWN_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User copies ${displayName} as markdown`,
        category: 'INTERACTION',
        enabled: true,
      };
    }
    // Download markdown events
    else if (key.startsWith('DOWNLOAD_MARKDOWN_')) {
      const category = key.replace('DOWNLOAD_MARKDOWN_', '').toLowerCase();
      const displayName = CATEGORY_DISPLAY_NAMES[category] || category;
      config[eventName] = {
        description: `User downloads ${displayName} as markdown file`,
        category: 'INTERACTION',
        enabled: true,
      };
    }
  }

  // Add static event configurations
  return {
    ...config,

    // Related Content (Generic)
    [EVENTS.RELATED_CONTENT_IMPRESSION]: {
      description: 'Related content items shown to user',
      category: 'CONTENT',
      enabled: true,
      sampleRate: 0.5,
    },
    [EVENTS.CAROUSEL_NAVIGATION]: {
      description: 'User navigates carousel',
      category: 'CONTENT',
      enabled: true,
    },

    // User Journey
    [EVENTS.CONTENT_JOURNEY]: {
      description: 'User navigates between content',
      category: 'JOURNEY',
      enabled: true,
    },
    [EVENTS.SESSION_START]: {
      description: 'New user session starts',
      category: 'JOURNEY',
      enabled: true,
    },
    [EVENTS.SESSION_DEPTH]: {
      description: 'Session engagement metrics',
      category: 'JOURNEY',
      enabled: true,
    },

    // Performance
    [EVENTS.PERFORMANCE_METRIC]: {
      description: 'Performance measurement (Core Web Vitals)',
      category: 'PERFORMANCE',
      enabled: true,
      sampleRate: 0.2,
    },
    [EVENTS.CACHE_PERFORMANCE]: {
      description: 'Cache hit/miss metrics',
      category: 'PERFORMANCE',
      enabled: true,
      sampleRate: 0.1,
    },
    [EVENTS.API_LATENCY]: {
      description: 'API response times',
      category: 'PERFORMANCE',
      enabled: true,
      sampleRate: 0.1,
    },
    [EVENTS.PAGE_LOAD_TIME]: {
      description: 'Page load performance',
      category: 'PERFORMANCE',
      enabled: true,
    },

    // Algorithm
    [EVENTS.ALGORITHM_PERFORMANCE]: {
      description: 'Content algorithm effectiveness',
      category: 'CONTENT',
      enabled: true,
    },

    // Search (Global)
    [EVENTS.SEARCH_GLOBAL]: {
      description: 'User performs global search across all content types',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.FILTER_APPLIED]: {
      description: 'User applies filter',
      category: 'NAVIGATION',
      enabled: true,
    },

    // Sharing & Feedback
    [EVENTS.DOWNLOAD_RESOURCE]: {
      description: 'User downloads resource',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.SHARE_CONTENT]: {
      description: 'User shares content',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.FEEDBACK_SUBMITTED]: {
      description: 'User submits feedback',
      category: 'INTERACTION',
      enabled: true,
    },

    // Email Capture
    [EVENTS.EMAIL_MODAL_SHOWN]: {
      description: 'Email capture modal displayed to user',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_MODAL_DISMISSED]: {
      description: 'User dismissed email capture modal',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_FOOTER]: {
      description: 'User subscribed via sticky footer bar',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_INLINE]: {
      description: 'User subscribed via inline CTA',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_POST_COPY]: {
      description: 'User subscribed via post-copy modal',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_HOMEPAGE]: {
      description: 'User subscribed from homepage',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_MODAL]: {
      description: 'User subscribed via modal',
      category: 'INTERACTION',
      enabled: true,
    },
    [EVENTS.EMAIL_SUBSCRIBED_CONTENT_PAGE]: {
      description: 'User subscribed from content detail page',
      category: 'INTERACTION',
      enabled: true,
    },

    // Error Tracking
    [EVENTS.ERROR_OCCURRED]: {
      description: 'Error occurred',
      category: 'ERROR',
      enabled: true,
    },
    [EVENTS.NOT_FOUND]: {
      description: '404 page accessed',
      category: 'ERROR',
      enabled: true,
    },
    [EVENTS.API_ERROR]: {
      description: 'API error occurred',
      category: 'ERROR',
      enabled: true,
    },

    // Content Activation
    [EVENTS.MCP_INSTALLED]: {
      description: 'MCP server installed',
      category: 'FEATURE',
      enabled: true,
    },
    [EVENTS.AGENT_ACTIVATED]: {
      description: 'Agent activated',
      category: 'FEATURE',
      enabled: true,
    },
    [EVENTS.COMMAND_EXECUTED]: {
      description: 'Command executed',
      category: 'FEATURE',
      enabled: true,
    },
    [EVENTS.RULE_APPLIED]: {
      description: 'Rule applied',
      category: 'FEATURE',
      enabled: true,
    },
    [EVENTS.HOOK_TRIGGERED]: {
      description: 'Hook triggered',
      category: 'FEATURE',
      enabled: true,
    },

    // Navigation
    [EVENTS.TAB_SWITCHED]: {
      description: 'Tab switched',
      category: 'NAVIGATION',
      enabled: true,
    },
    [EVENTS.FILTER_TOGGLED]: {
      description: 'Filter toggled',
      category: 'NAVIGATION',
      enabled: true,
    },
    [EVENTS.SORT_CHANGED]: {
      description: 'Sort order changed',
      category: 'NAVIGATION',
      enabled: true,
    },
    [EVENTS.PAGINATION_CLICKED]: {
      description: 'Pagination used',
      category: 'NAVIGATION',
      enabled: true,
    },

    // Personalization
    [EVENTS.PERSONALIZATION_AFFINITY_CALCULATED]: {
      description: 'User affinity score calculated',
      category: 'PERSONALIZATION',
      enabled: true,
      sampleRate: 0.1,
    },
    [EVENTS.PERSONALIZATION_RECOMMENDATION_SHOWN]: {
      description: 'Personalized recommendation displayed',
      category: 'PERSONALIZATION',
      enabled: true,
    },
    [EVENTS.PERSONALIZATION_RECOMMENDATION_CLICKED]: {
      description: 'User clicked personalized recommendation',
      category: 'PERSONALIZATION',
      enabled: true,
    },
    [EVENTS.PERSONALIZATION_SIMILAR_CONFIG_CLICKED]: {
      description: 'User clicked similar config suggestion',
      category: 'PERSONALIZATION',
      enabled: true,
    },
    [EVENTS.PERSONALIZATION_FOR_YOU_VIEWED]: {
      description: 'User viewed For You feed',
      category: 'PERSONALIZATION',
      enabled: true,
    },
    [EVENTS.PERSONALIZATION_USAGE_RECOMMENDATION_SHOWN]: {
      description: 'Usage-based recommendation displayed',
      category: 'PERSONALIZATION',
      enabled: true,
    },
  } as Record<EventName, EventConfig>;
}

/**
 * Lazy initialization cache for EVENT_CONFIG
 * Only builds when getEventConfig() is called (by tracker.ts)
 */
let _eventConfigCache: Record<EventName, EventConfig> | null = null;

/**
 * Get event configuration with lazy initialization
 *
 * Tree-shaking: This function and buildEventConfig() are only included
 * in bundles that actually call getEventConfig(). Components importing
 * only EVENTS will NOT include this code (~5KB savings per route).
 *
 * @returns Event configuration map
 */
export function getEventConfig(): Record<EventName, EventConfig> {
  if (!_eventConfigCache) {
    _eventConfigCache = buildEventConfig();
  }
  return _eventConfigCache;
}

/**
 * ============================================
 * EVENT PAYLOAD TYPE DEFINITIONS
 * ============================================
 *
 * Type-only definitions - 0KB runtime cost (types are stripped at compile time).
 * Provides full type safety and autocomplete for trackEvent() calls.
 */

/**
 * Event payload definitions for type-safe analytics tracking
 * Maps each event name to its required payload structure
 */
export interface EventPayloads {
  [EVENTS.CONTENT_VIEW_AGENT]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_AGENTS]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_AGENT]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_AGENT]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_AGENT]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_AGENT]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_AGENT]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_MCP]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_MCP]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_MCP]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_MCP]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_MCP]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_MCP]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_MCP]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_COMMAND]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_COMMANDS]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_COMMAND]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_COMMAND]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_COMMAND]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_COMMAND]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_COMMAND]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_RULE]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_RULES]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_RULE]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_RULE]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_RULE]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_RULE]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_RULE]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_HOOK]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_HOOKS]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_HOOK]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_HOOK]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_HOOK]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_HOOK]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_HOOK]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_STATUSLINE]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_STATUSLINES]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_STATUSLINE]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_STATUSLINE]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_STATUSLINE]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_STATUSLINE]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_STATUSLINE]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_COLLECTION]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_COLLECTIONS]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_COLLECTION]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_COLLECTION]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_COLLECTION]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_COLLECTION]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_COLLECTION]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.CONTENT_VIEW_SKILL]: {
    slug: string;
    page: string;
    source?: string;
  };

  [EVENTS.SEARCH_SKILLS]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_SKILL]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_SKILL]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_SKILL]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_SKILL]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_SKILL]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.SEARCH_GUIDES]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.COPY_CODE_GUIDE]: {
    slug: string;
    content_length: number;
    language?: string;
  };

  [EVENTS.COPY_MARKDOWN_GUIDE]: {
    slug: string;
    include_metadata: boolean;
    include_footer: boolean;
    content_length: number;
  };

  [EVENTS.DOWNLOAD_MARKDOWN_GUIDE]: {
    slug: string;
    filename: string;
    file_size: number;
  };

  [EVENTS.RELATED_CLICK_FROM_GUIDE]: {
    target_slug: string;
    target_category: string;
    position: number;
    match_score: number;
    match_type: string;
  };

  [EVENTS.RELATED_VIEW_ON_GUIDE]: {
    items_shown: number;
    cache_hit: boolean;
  };

  [EVENTS.RELATED_CONTENT_IMPRESSION]: {
    source_page: string;
    algorithm_version: string;
    content_ids: string;
    user_segment?: 'new' | 'returning';
  };

  [EVENTS.CAROUSEL_NAVIGATION]: {
    action: 'next' | 'previous';
    current_slide: number;
    total_slides: number;
    source_page: string;
  };

  [EVENTS.CONTENT_JOURNEY]: {
    from_page: string;
    to_page: string;
    journey_step: number;
    session_id?: string;
  };

  [EVENTS.SESSION_START]: {
    entry_page: string;
    referrer?: string;
    utm_source?: string;
    utm_medium?: string;
    utm_campaign?: string;
  };

  [EVENTS.SESSION_DEPTH]: {
    pages_viewed: number;
    time_spent: number;
    categories_explored: string;
  };

  [EVENTS.PERFORMANCE_METRIC]: {
    metric: string;
    value: number;
    page?: string;
    component?: string;
  };

  [EVENTS.CACHE_PERFORMANCE]: {
    cache_hit: boolean;
    latency_ms: number;
    cache_key?: string;
    cache_size?: number;
  };

  [EVENTS.API_LATENCY]: {
    endpoint: string;
    method: string;
    duration_ms: number;
    status_code: number;
    cached: boolean;
  };

  [EVENTS.PAGE_LOAD_TIME]: {
    page: string;
    time_to_interactive: number;
    time_to_first_byte: number;
    dom_content_loaded: number;
    fully_loaded: number;
  };

  [EVENTS.ALGORITHM_PERFORMANCE]: {
    algorithm_version: string;
    match_score: number;
    user_clicked: boolean;
    position?: number;
  };

  [EVENTS.SEARCH_GLOBAL]: {
    query: string;
    results_count: number;
    filters_applied: boolean;
    time_to_results: number;
  };

  [EVENTS.FILTER_APPLIED]: {
    filter_type: string;
    filter_value: string;
    page: string;
    results_count: number;
  };

  [EVENTS.DOWNLOAD_RESOURCE]: {
    resource_type: string;
    resource_name: string;
    file_size?: number;
    page: string;
  };

  [EVENTS.SHARE_CONTENT]: {
    content_type: string;
    content_slug: string;
    share_method: 'twitter' | 'linkedin' | 'copy_link' | 'email';
  };

  [EVENTS.FEEDBACK_SUBMITTED]: {
    feedback_type: 'helpful' | 'not_helpful' | 'report_issue';
    page: string;
    category?: string;
  };

  [EVENTS.EMAIL_MODAL_SHOWN]: {
    trigger_source: string;
    copy_type?: string;
    session_copy_count: number;
  };

  [EVENTS.EMAIL_MODAL_DISMISSED]: {
    trigger_source: string;
    dismissal_method: 'close_button' | 'overlay_click' | 'maybe_later';
    time_shown_ms: number;
  };

  [EVENTS.EMAIL_SUBSCRIBED_FOOTER]: {
    contact_id?: string;
    referrer?: string;
  };

  [EVENTS.EMAIL_SUBSCRIBED_INLINE]: {
    contact_id?: string;
    referrer?: string;
    page?: string;
    category?: string;
  };

  [EVENTS.EMAIL_SUBSCRIBED_POST_COPY]: {
    contact_id?: string;
    referrer?: string;
    copy_type?: string;
    content_category?: string;
    content_slug?: string;
  };

  [EVENTS.EMAIL_SUBSCRIBED_HOMEPAGE]: {
    contact_id?: string;
    referrer?: string;
  };

  [EVENTS.EMAIL_SUBSCRIBED_MODAL]: {
    contact_id?: string;
    referrer?: string;
    modal_context?: string;
  };

  [EVENTS.EMAIL_SUBSCRIBED_CONTENT_PAGE]: {
    contact_id?: string;
    referrer?: string;
    page?: string;
    category?: string;
  };

  [EVENTS.ERROR_OCCURRED]: {
    error_type: string;
    error_code?: string;
    context?: string;
    page?: string;
  };

  [EVENTS.NOT_FOUND]: {
    requested_path: string;
    referrer?: string;
  };

  [EVENTS.API_ERROR]: {
    endpoint: string;
    status_code: number;
    error_message?: string;
  };

  [EVENTS.MCP_INSTALLED]: {
    mcp_slug: string;
    installation_method: string;
    from_page: string;
  };

  [EVENTS.AGENT_ACTIVATED]: {
    agent_slug: string;
    activation_source: string;
    configuration?: string;
  };

  [EVENTS.COMMAND_EXECUTED]: {
    command_slug: string;
    execution_context: string;
    parameters?: string;
  };

  [EVENTS.RULE_APPLIED]: {
    rule_slug: string;
    application_context: string;
  };

  [EVENTS.HOOK_TRIGGERED]: {
    hook_slug: string;
    trigger_context: string;
    execution_time?: number;
  };

  [EVENTS.TAB_SWITCHED]: {
    from_tab: string;
    to_tab: string;
    page: string;
  };

  [EVENTS.FILTER_TOGGLED]: {
    filter_name: string;
    filter_state: boolean;
    page: string;
  };

  [EVENTS.SORT_CHANGED]: {
    sort_field: string;
    sort_direction: 'asc' | 'desc';
    page: string;
  };

  [EVENTS.PAGINATION_CLICKED]: {
    from_page: number;
    to_page: number;
    total_pages: number;
    items_per_page: number;
    section: string;
  };

  [EVENTS.PERSONALIZATION_AFFINITY_CALCULATED]: {
    user_id: string;
    content_type: string;
    affinity_score: number;
    based_on_interactions: number;
  };

  [EVENTS.PERSONALIZATION_RECOMMENDATION_SHOWN]: {
    recommendation_source: string;
    position: number;
    content_slug: string;
    content_type: string;
  };

  [EVENTS.PERSONALIZATION_RECOMMENDATION_CLICKED]: {
    content_slug: string;
    content_type: string;
    position: number;
    recommendation_source: string;
  };

  [EVENTS.PERSONALIZATION_SIMILAR_CONFIG_CLICKED]: {
    source_slug: string;
    target_slug: string;
    similarity_score: number;
  };

  [EVENTS.PERSONALIZATION_FOR_YOU_VIEWED]: {
    items_shown: number;
    algorithm_version: string;
    user_has_history: boolean;
  };

  [EVENTS.PERSONALIZATION_USAGE_RECOMMENDATION_SHOWN]: {
    trigger: string;
    recommendations_count: number;
    context_type?: string;
  };
}

/**
 * Type helper to extract payload type for a specific event
 *
 * @example
 * ```typescript
 * type Payload = EventPayload<'copy_code_agent'>;
 * // Inferred as: { slug: string; content_length: number; language?: string; }
 * ```
 */
export type EventPayload<T extends keyof EventPayloads> = EventPayloads[T];
