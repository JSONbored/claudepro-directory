name: Validation Suite

on:
  pull_request:
    branches: [main, dev]
    paths:
      - 'content/**/*.json'
      - 'content/**/*.mdx'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'
      - 'scripts/validate*.ts'
      - 'scripts/validation/**'
  push:
    branches: [main]
    paths:
      - 'content/**/*.json'
      - 'content/**/*.mdx'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Auto-label PRs based on changed files
  label:
    name: Label Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Apply path-based labels
        uses: actions/labeler@v6
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

  # Get changed files for intelligent validation
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      content-changed: ${{ steps.filter.outputs.content }}
      seo-changed: ${{ steps.filter.outputs.seo }}
      any-changed: ${{ steps.filter.outputs.content == 'true' || steps.filter.outputs.seo == 'true' }}

    steps:
      - uses: actions/checkout@v5

      - name: Check changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            content:
              - 'content/**/*.json'
              - 'content/**/*.mdx'
            seo:
              - 'content/**/*.mdx'
              - 'content/**/*.json'
              - 'src/app/**/page.tsx'
              - 'src/lib/seo/**'

  # Unified validation using matrix strategy
  validate:
    name: Validate ${{ matrix.validator }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes]
    if: needs.detect-changes.outputs.any-changed == 'true'

    strategy:
      matrix:
        validator:
          - content
          - seo
          - metadata
          - titles
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js with dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Run ${{ matrix.validator }} validation
        id: validate
        uses: ./.github/actions/validate-content
        with:
          validation-type: ${{ matrix.validator }}
          output-file: ${{ matrix.validator }}-report.txt
          continue-on-error: 'true'

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.validator }}-validation-report
          path: ${{ matrix.validator }}-report.txt
          retention-days: 30

  # Content-specific validation (metadata checks, auto-labeling)
  content-quality:
    name: Content Quality & Labeling
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes]
    if: needs.detect-changes.outputs.content-changed == 'true' && github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js with dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          production-only: 'true'
          skip-build-content: 'true'

      - name: Get changed content files
        id: changed
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47
        with:
          files: |
            content/**/*.json
            content/guides/**/*.mdx

      - name: Check content metadata
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed.outputs.all_changed_files }}; do
            # Skip non-JSON files
            [[ "$file" != *.json ]] && continue

            echo "Checking metadata for $file..."

            # Check required fields based on category
            category=$(jq -r '.category' "$file" 2>/dev/null || echo "")

            # For hooks, agents, rules, commands, statuslines, collections, skills, and mcp, check slug instead of title
            if [[ "$category" == "hooks" || "$category" == "agents" || "$category" == "rules" || "$category" == "commands" || "$category" == "statuslines" || "$category" == "collections" || "$category" == "mcp" || "$category" == "skills" ]]; then
              if ! jq -e '.slug' "$file" > /dev/null; then
                echo "ERROR: Missing slug in $category file $file"
                exit 1
              fi
            else
              # For other content types, check title OR name
              if ! jq -e '.title // .name' "$file" > /dev/null; then
                echo "ERROR: Missing title or name in $file"
                exit 1
              fi
            fi

            # Check common required fields
            required_fields=("description" "category" "author" "dateAdded")
            for field in "${required_fields[@]}"; do
              if ! jq -e ".$field" "$file" > /dev/null; then
                echo "ERROR: Missing $field in $file"
                exit 1
              fi
            done

            # Validate date format (YYYY-MM-DD)
            date=$(jq -r '.dateAdded' "$file")
            if ! echo "$date" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' > /dev/null; then
              echo "ERROR: Invalid date format in $file (should be YYYY-MM-DD)"
              exit 1
            fi

            # Validate category is valid
            if [[ ! "$category" =~ ^(agents|mcp|rules|commands|hooks|statuslines|collections|skills|guides|jobs|changelog)$ ]]; then
              echo "ERROR: Invalid category '$category' in $file"
              exit 1
            fi

            echo "✓ $file passed validation"
          done

      - name: Build content to verify generation
        if: steps.changed.outputs.any_changed == 'true'
        run: npm run build:content

      - name: Auto-label by content type
        if: steps.changed.outputs.any_changed == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const changedFiles = '${{ steps.changed.outputs.all_changed_files }}'.split(' ').filter(f => f.trim());
            const labels = new Set(['content-submission', 'needs-review']);
            const contentTypes = new Set();

            for (const file of changedFiles) {
              // Detect content type from path
              if (file.includes('/agents/')) {
                labels.add('agent');
                contentTypes.add('agent');
              } else if (file.includes('/mcp/')) {
                labels.add('mcp');
                contentTypes.add('MCP server');
              } else if (file.includes('/hooks/')) {
                labels.add('hook');
                contentTypes.add('hook');
              } else if (file.includes('/commands/')) {
                labels.add('command');
                contentTypes.add('command');
              } else if (file.includes('/rules/')) {
                labels.add('rule');
                contentTypes.add('rule');
              } else if (file.includes('/statuslines/')) {
                labels.add('statusline');
                contentTypes.add('statusline');
              } else if (file.includes('/collections/')) {
                labels.add('collection');
                contentTypes.add('collection');
              } else if (file.includes('/guides/')) {
                labels.add('guide');
                contentTypes.add('guide');
              } else if (file.includes('/skills/')) {
                labels.add('skill');
                contentTypes.add('skill');
              }

              // Try to read JSON files for category validation
              if (file.endsWith('.json')) {
                try {
                  const content = fs.readFileSync(file, 'utf8');
                  const data = JSON.parse(content);

                  if (data.category) {
                    const categoryMap = {
                      'agents': 'agent',
                      'mcp': 'MCP server',
                      'hooks': 'hook',
                      'commands': 'command',
                      'rules': 'rule',
                      'statuslines': 'statusline',
                      'collections': 'collection',
                      'skills': 'skill',
                      'guides': 'guide'
                    };

                    labels.add(data.category);
                    if (categoryMap[data.category]) {
                      contentTypes.add(categoryMap[data.category]);
                    }
                  }
                } catch (error) {
                  console.log(`Could not parse ${file}:`, error.message);
                }
              }
            }

            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
              console.log(`Applied labels: ${Array.from(labels).join(', ')}`);
            }

            // Add helpful comment for first-time contributors
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('Auto-validation'));

            if (!botComment && contentTypes.size > 0) {
              const typesList = Array.from(contentTypes).join(', ');
              const message = [
                '## 🤖 Auto-validation',
                '',
                `Thanks for your contribution! I've detected the following content type(s): **${typesList}**`,
                '',
                'The content validation workflow has checked your submission. Please make sure:',
                '- ✅ All required fields are present',
                '- ✅ No API keys or secrets are included',
                '- ✅ The JSON/YAML is valid',
                '- ✅ Dates are in YYYY-MM-DD format',
                '',
                `If you need help, check out the [contribution guide](https://github.com/${context.repo.owner}/${context.repo.repo}#contributing).`
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

  # Aggregate results and report
  report:
    name: Validation Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, content-quality]
    if: always() && needs.detect-changes.outputs.any-changed == 'true'

    steps:
      - name: Download all validation reports
        uses: actions/download-artifact@v5
        with:
          pattern: '*-validation-report'
          path: reports

      - name: Generate summary
        run: |
          echo "## 📋 Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if reports directory exists and has files
          if [ -d "reports" ] && [ "$(ls -A reports)" ]; then
            for report_dir in reports/*; do
              if [ -d "$report_dir" ]; then
                validator=$(basename "$report_dir" | sed 's/-validation-report//')
                echo "### ${validator^} Validation" >> $GITHUB_STEP_SUMMARY

                # Find report file in subdirectory
                report_file=$(find "$report_dir" -name "*.txt" -type f | head -1)
                if [ -f "$report_file" ]; then
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  tail -50 "$report_file" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                fi
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No validation reports found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = '## 🔍 Validation Results\n\n';

            const reportsDir = 'reports';
            if (fs.existsSync(reportsDir)) {
              const reportDirs = fs.readdirSync(reportsDir);

              for (const reportDir of reportDirs) {
                const fullPath = path.join(reportsDir, reportDir);
                if (fs.statSync(fullPath).isDirectory()) {
                  const validator = reportDir.replace('-validation-report', '');
                  comment += `### ${validator.charAt(0).toUpperCase() + validator.slice(1)} Validation\n`;

                  // Find report file
                  const files = fs.readdirSync(fullPath);
                  const reportFile = files.find(f => f.endsWith('.txt'));

                  if (reportFile) {
                    const content = fs.readFileSync(path.join(fullPath, reportFile), 'utf8');
                    const preview = content.slice(-1500); // Last 1500 chars
                    comment += '```\n' + preview + '\n```\n\n';
                  }
                }
              }
            }

            comment += '\n---\n_✨ Powered by unified validation system_';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
