name: Validate Content

on:
  pull_request:
    paths:
      - 'content/**/*.mdx'
      - 'content/**/*.json'
      - 'lib/schemas/**/*.ts'
      - 'scripts/validate-content.ts'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Content Changes
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git diff

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --ignore-scripts

    - name: Get changed content files
      id: changed
      run: |
        echo "Getting changed files between origin/${{ github.base_ref }} and HEAD"
        changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- 'content/**/*.mdx' 'content/**/*.json' | tr '\n' ' ')

        if [ -z "$changed_files" ]; then
          echo "No content files changed"
          echo "files=" >> $GITHUB_OUTPUT
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changed files: $changed_files"
          echo "files=$changed_files" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Validate content with proper Zod schemas
      if: steps.changed.outputs.has_changes == 'true'
      run: |
        echo "Validating changed content files using category-specific Zod schemas..."

        # Use the existing validation script that properly validates each content type
        npx tsx scripts/validate-content.ts ${{ steps.changed.outputs.files }}

        echo "✅ All content files passed schema validation"

    - name: Validate MDX guide frontmatter
      if: steps.changed.outputs.has_changes == 'true'
      run: |
        mdx_files=$(echo "${{ steps.changed.outputs.files }}" | tr ' ' '\n' | grep '\.mdx$' || true)

        if [ -n "$mdx_files" ]; then
          echo "Validating MDX guide files..."
          for file in $mdx_files; do
            if [ -f "$file" ]; then
              if ! head -20 "$file" | grep -q "^---$"; then
                echo "ERROR: MDX guide file $file missing frontmatter"
                exit 1
              fi
              echo "✓ $file has frontmatter"
            fi
          done
        else
          echo "No MDX files to validate"
        fi

    - name: Validate category directory structure
      if: steps.changed.outputs.has_changes == 'true'
      run: |
        for file in ${{ steps.changed.outputs.files }}; do
          # Skip deleted files
          if [ ! -f "$file" ]; then
            continue
          fi

          # Check if file is in proper content directory structure
          if [[ "$file" =~ content/([^/]+)/ ]]; then
            category="${BASH_REMATCH[1]}"

            # Validate category is supported
            if [[ ! "$category" =~ ^(agents|mcp|rules|commands|hooks|guides)$ ]]; then
              echo "ERROR: Unsupported category '$category' for file $file"
              echo "Supported categories: agents, mcp, rules, commands, hooks, guides"
              exit 1
            fi

            echo "✓ $file is in valid category: $category"
          fi
        done

    - name: Test content processor integration
      if: steps.changed.outputs.has_changes == 'true'
      run: |
        echo "Testing content processor can load updated content..."
        node -e "
          const { contentProcessor } = require('./lib/services/content-processor.service.ts');
          contentProcessor.getAllCategories()
            .then(() => console.log('✅ Content processor integration test passed'))
            .catch(err => {
              console.error('❌ Content processor integration test failed:', err.message);
              process.exit(1);
            });
        "

    - name: Summary
      if: always()
      run: |
        if [ "${{ steps.changed.outputs.has_changes }}" == "true" ]; then
          echo "### ✅ Content Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Validated files:" >> $GITHUB_STEP_SUMMARY
          for file in ${{ steps.changed.outputs.files }}; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All content follows schema requirements and can be processed by the content processor service." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ No Content Changes" >> $GITHUB_STEP_SUMMARY
          echo "No content files were modified in this PR." >> $GITHUB_STEP_SUMMARY
        fi