name: SEO Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'content/**/*.mdx'
      - 'content/**/*.json'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'
      - 'scripts/validate-*.ts'
      - 'scripts/check-quality-gates.sh'
  push:
    branches: [main]
    paths:
      - 'content/**/*.mdx'
      - 'content/**/*.json'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'
      - 'scripts/validate-*.ts'
      - 'scripts/check-quality-gates.sh'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-seo:
    name: SEO Standards Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js with dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Validate SEO standards
        id: validate-seo
        uses: ./.github/actions/validate-content
        with:
          validation-type: 'seo'
          output-file: 'seo-report.txt'
          continue-on-error: 'true'

      - name: Validate title lengths
        id: validate-titles
        uses: ./.github/actions/validate-content
        with:
          validation-type: 'titles'
          output-file: 'titles-report.txt'
          continue-on-error: 'true'

      - name: Validate metadata quality (Phase 5)
        id: validate-metadata
        uses: ./.github/actions/validate-content
        with:
          validation-type: 'metadata'
          output-file: 'metadata-report.txt'
          continue-on-error: 'true'

      - name: Check quality gate thresholds (Phase 5)
        id: quality-gates
        uses: ./.github/actions/validate-content
        with:
          validation-type: 'quality-gates'
          continue-on-error: 'true'

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const seoReport = fs.readFileSync('seo-report.txt', 'utf8');
            const titlesReport = fs.readFileSync('titles-report.txt', 'utf8');
            const metadataReport = fs.readFileSync('metadata-report.txt', 'utf8');

            const seoFailed = '${{ steps.validate-seo.outputs.validation-failed }}' === 'true';
            const titlesFailed = '${{ steps.validate-titles.outputs.validation-failed }}' === 'true';
            const metadataFailed = '${{ steps.validate-metadata.outputs.validation-failed }}' === 'true';
            const qualityGateFailed = '${{ steps.quality-gates.outputs.validation-failed }}' === 'true';

            const status = (!seoFailed && !titlesFailed && !metadataFailed && !qualityGateFailed) ? '✅ PASSED' : '❌ FAILED';

            const body = [
              '## SEO Validation ' + status,
              '',
              '### Overview',
              'This validation enforces comprehensive SEO standards across all public routes using our Phase 5 metadata system.',
              '',
              '**Quality Gates:**',
              '1. **Route Coverage**: All 64+ public routes must have metadata registry entries',
              '2. **No Bypasses**: All pages must use `generatePageMetadata()` - no direct metadata exports',
              '3. **Title Generation**: All titles generated via registry helpers (buildPageTitle/buildContentTitle)',
              '4. **MDX Validation**: All content files pass frontmatter and SEO requirements',
              '',
              '---',
              '',
              '### SEO Standards',
              seoFailed ? '❌ Failed' : '✅ Passed',
              '```',
              seoReport.slice(-2000),
              '```',
              '',
              '### Title Lengths',
              titlesFailed ? '❌ Failed' : '✅ Passed',
              '```',
              titlesReport.slice(-1000),
              '```',
              '',
              '### Metadata Quality (Phase 5)',
              metadataFailed ? '❌ Failed' : '✅ Passed',
              '',
              '**What this validates:**',
              '- ✅ All routes registered in metadata system',
              '- ✅ No pages bypass the metadata generator',
              '- ✅ Title lengths (55-60 chars - Google optimal)',
              '- ✅ Description lengths (150-160 chars - AI optimized)',
              '- ✅ No placeholder text (undefined, TODO, FIXME)',
              '- ✅ Canonical URLs (HTTPS, no trailing slash)',
              '- ✅ OpenGraph metadata (1200x630 images)',
              '- ✅ Structured data (JSON-LD Schema.org 29.3)',
              '- ✅ AI optimization (year mentions, freshness scores)',
              '',
              '```',
              metadataReport.slice(-2000),
              '```',
              '',
              '### Quality Gates',
              qualityGateFailed ? '❌ Failed' : '✅ Passed',
              '',
              (seoFailed || titlesFailed || metadataFailed || qualityGateFailed) ? '**⚠️ SEO issues detected - fix iteratively (non-blocking).**' : '**✅ All SEO validations passed!**',
              '',
              '---',
              '',
              '_Phase 5: Comprehensive Testing & CI/CD Integration_',
              '',
              '_✨ Validation powered by reusable composite actions_'
            ].join('\n');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Upload validation report artifact (Phase 5)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: seo-validation-report
          path: |
            seo-report.txt
            titles-report.txt
            metadata-report.txt
          retention-days: 30

      - name: Report validation status (Phase 5)
        if: |
          steps.validate-seo.outputs.validation-failed == 'true' ||
          steps.validate-titles.outputs.validation-failed == 'true' ||
          steps.validate-metadata.outputs.validation-failed == 'true' ||
          steps.quality-gates.outputs.validation-failed == 'true'
        run: |
          echo "⚠️  SEO validation failed but not blocking deployment"
          echo "Review the validation reports and fix iteratively"
          echo "These validations are informational only"
