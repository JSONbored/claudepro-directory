name: SEO Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'content/**/*.mdx'
      - 'content/**/*.json'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'
      - 'scripts/validate-*.ts'
  push:
    branches: [main]
    paths:
      - 'content/**/*.mdx'
      - 'content/**/*.json'
      - 'src/app/**/page.tsx'
      - 'src/lib/seo/**'
      - 'scripts/validate-*.ts'

jobs:
  validate-seo:
    name: SEO Standards Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate SEO standards
        id: validate-seo
        run: |
          npm run validate:seo > seo-report.txt 2>&1 || echo "SEO_FAILED=true" >> $GITHUB_OUTPUT
          cat seo-report.txt
        continue-on-error: true

      - name: Validate title lengths
        id: validate-titles
        run: |
          npm run validate:titles:quick > titles-report.txt 2>&1 || echo "TITLES_FAILED=true" >> $GITHUB_OUTPUT
          cat titles-report.txt
        continue-on-error: true

      - name: Validate metadata quality (Phase 5)
        id: validate-metadata
        run: |
          npm run validate:seo -- --report > metadata-report.txt 2>&1 || echo "METADATA_FAILED=true" >> $GITHUB_OUTPUT
          cat metadata-report.txt
        continue-on-error: true

      - name: Check quality gate thresholds (Phase 5)
        id: quality-gates
        run: |
          echo "Checking quality gates..."

          # Quality Gate 1: No missing routes
          MISSING_ROUTES=$(grep -c "Missing Metadata:" metadata-report.txt || echo "0")
          if [ "$MISSING_ROUTES" -gt "0" ]; then
            echo "QUALITY_GATE_FAILED=true" >> $GITHUB_OUTPUT
            echo "❌ Quality Gate Failed: Routes missing metadata"
          fi

          # Quality Gate 2: No metadata bypasses
          BYPASSES=$(grep -c "Bypasses found" metadata-report.txt || echo "0")
          if [ "$BYPASSES" -gt "0" ]; then
            echo "QUALITY_GATE_FAILED=true" >> $GITHUB_OUTPUT
            echo "❌ Quality Gate Failed: Metadata system bypasses detected"
          fi

          # Quality Gate 3: All MDX files pass
          MDX_FAILED=$(grep -c "❌ Failed:" metadata-report.txt || echo "0")
          if [ "$MDX_FAILED" -gt "0" ]; then
            echo "QUALITY_GATE_FAILED=true" >> $GITHUB_OUTPUT
            echo "❌ Quality Gate Failed: MDX validation errors"
          fi

          if [ -z "$QUALITY_GATE_FAILED" ]; then
            echo "✅ All quality gates passed"
          fi
        continue-on-error: true

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const seoReport = fs.readFileSync('seo-report.txt', 'utf8');
            const titlesReport = fs.readFileSync('titles-report.txt', 'utf8');
            const metadataReport = fs.readFileSync('metadata-report.txt', 'utf8');

            const seoFailed = '${{ steps.validate-seo.outputs.SEO_FAILED }}' === 'true';
            const titlesFailed = '${{ steps.validate-titles.outputs.TITLES_FAILED }}' === 'true';
            const metadataFailed = '${{ steps.validate-metadata.outputs.METADATA_FAILED }}' === 'true';
            const qualityGateFailed = '${{ steps.quality-gates.outputs.QUALITY_GATE_FAILED }}' === 'true';

            const status = (!seoFailed && !titlesFailed && !metadataFailed && !qualityGateFailed) ? '✅ PASSED' : '❌ FAILED';

            const body = [
              '## SEO Validation ' + status,
              '',
              '### Overview',
              'This validation enforces comprehensive SEO standards across all public routes using our Phase 5 metadata system.',
              '',
              '**Quality Gates:**',
              '1. **Route Coverage**: All 64+ public routes must have metadata registry entries',
              '2. **No Bypasses**: All pages must use `generatePageMetadata()` - no direct metadata exports',
              '3. **Title Generation**: All titles generated via registry helpers (buildPageTitle/buildContentTitle)',
              '4. **MDX Validation**: All content files pass frontmatter and SEO requirements',
              '',
              '---',
              '',
              '### SEO Standards',
              seoFailed ? '❌ Failed' : '✅ Passed',
              '```',
              seoReport.slice(-2000),
              '```',
              '',
              '### Title Lengths',
              titlesFailed ? '❌ Failed' : '✅ Passed',
              '```',
              titlesReport.slice(-1000),
              '```',
              '',
              '### Metadata Quality (Phase 5)',
              metadataFailed ? '❌ Failed' : '✅ Passed',
              '',
              '**What this validates:**',
              '- ✅ All routes registered in metadata system',
              '- ✅ No pages bypass the metadata generator',
              '- ✅ Title lengths (55-60 chars - Google optimal)',
              '- ✅ Description lengths (150-160 chars - AI optimized)',
              '- ✅ No placeholder text (undefined, TODO, FIXME)',
              '- ✅ Canonical URLs (HTTPS, no trailing slash)',
              '- ✅ OpenGraph metadata (1200x630 images)',
              '- ✅ Structured data (JSON-LD Schema.org 29.3)',
              '- ✅ AI optimization (year mentions, freshness scores)',
              '',
              '```',
              metadataReport.slice(-2000),
              '```',
              '',
              '### Quality Gates',
              qualityGateFailed ? '❌ Failed' : '✅ Passed',
              '',
              (seoFailed || titlesFailed || metadataFailed || qualityGateFailed) ? '**⚠️ Please fix SEO issues before merging.**' : '**✅ All SEO validations passed - ready to merge!**',
              '',
              '---',
              '',
              '_Phase 5: Comprehensive Testing & CI/CD Integration_'
            ].join('\n');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Upload validation report artifact (Phase 5)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: seo-validation-report
          path: |
            seo-report.txt
            titles-report.txt
            metadata-report.txt
            seo-validation-report.md
          retention-days: 30

      - name: Block deployment if validation fails (Phase 5)
        if: |
          steps.validate-seo.outputs.SEO_FAILED == 'true' ||
          steps.validate-titles.outputs.TITLES_FAILED == 'true' ||
          steps.validate-metadata.outputs.METADATA_FAILED == 'true' ||
          steps.quality-gates.outputs.QUALITY_GATE_FAILED == 'true'
        run: |
          echo "❌ SEO validation failed - deployment blocked"
          echo "Review the validation reports for details"
          exit 1
