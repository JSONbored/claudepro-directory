name: 'Setup Node.js with Dependencies'
description: 'Setup Node.js with optimized caching, install dependencies, and generate content'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  skip-build-content:
    description: 'Skip building content metadata'
    required: false
    default: 'false'
  install-args:
    description: 'Additional arguments for npm ci'
    required: false
    default: ''
  production-only:
    description: 'Install only production dependencies (--omit=dev)'
    required: false
    default: 'false'

outputs:
  cache-hit:
    description: 'Whether dependencies cache was hit'
    value: ${{ steps.cache-deps.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'

    - name: Cache dependencies and build outputs
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '!node_modules/**') }}
        restore-keys: |
          ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-npm-

    - name: Install dependencies
      shell: bash
      run: |
        if [ "${{ inputs.production-only }}" = "true" ]; then
          echo "Installing production dependencies only..."
          npm ci --ignore-scripts --omit=dev ${{ inputs.install-args }}
        else
          echo "Installing all dependencies..."
          npm ci ${{ inputs.install-args }}
        fi

    - name: Generate content metadata
      if: inputs.skip-build-content != 'true'
      shell: bash
      run: npm run build:content
