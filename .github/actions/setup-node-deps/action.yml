name: 'Setup Node.js with Dependencies'
description: 'Setup Node.js with optimized caching, install dependencies, and generate content'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  skip-build-content:
    description: 'Skip building content metadata'
    required: false
    default: 'false'
  install-args:
    description: 'Additional arguments for pnpm install'
    required: false
    default: ''
  production-only:
    description: 'Install only production dependencies (--prod)'
    required: false
    default: 'false'

outputs:
  cache-hit:
    description: 'Whether dependencies cache was hit'
    value: ${{ steps.cache-deps.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.19.0

    - name: Cache dependencies and build outputs
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
          .next/cache
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '!node_modules/**') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      shell: bash
      run: |
        if [ "${{ inputs.production-only }}" = "true" ]; then
          echo "Installing production dependencies only..."
          pnpm install --frozen-lockfile --prod ${{ inputs.install-args }}
        else
          echo "Installing all dependencies..."
          pnpm install --frozen-lockfile ${{ inputs.install-args }}
        fi

    - name: Generate content metadata
      if: inputs.skip-build-content != 'true'
      shell: bash
      run: pnpm build:content
